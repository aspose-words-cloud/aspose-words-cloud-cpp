/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * WordsApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_WordsApi_H_
#define IO_SWAGGER_CLIENT_API_WordsApi_H_


#include "../ApiClient.h"

#include "AsposeResponse.h"
#include "AvailableFontsResponse.h"
#include "BookmarkData.h"
#include "BookmarkResponse.h"
#include "BookmarksResponse.h"
#include "Border.h"
#include "BorderResponse.h"
#include "BordersResponse.h"
#include "ClassificationResponse.h"
#include "Comment.h"
#include "CommentResponse.h"
#include "CommentsResponse.h"
#include "CompareData.h"
#include "DocumentEntryList.h"
#include "DocumentPropertiesResponse.h"
#include "DocumentProperty.h"
#include "DocumentPropertyResponse.h"
#include "DocumentResponse.h"
#include "DrawingObjectResponse.h"
#include "DrawingObjectsResponse.h"
#include "Field.h"
#include "FieldNamesResponse.h"
#include "FieldResponse.h"
#include "FieldsResponse.h"
#include "Font.h"
#include "FontResponse.h"
#include "Footnote.h"
#include "FootnoteResponse.h"
#include "FootnotesResponse.h"
#include "FormField.h"
#include "FormFieldResponse.h"
#include "FormFieldsResponse.h"
#include "HeaderFooterResponse.h"
#include "HeaderFootersResponse.h"
#include "HttpContent.h"
#include "HyperlinkResponse.h"
#include "HyperlinksResponse.h"
#include "LoadWebDocumentData.h"
#include "OfficeMathObjectResponse.h"
#include "OfficeMathObjectsResponse.h"
#include "PageNumber.h"
#include "PageSetup.h"
#include "ParagraphFormat.h"
#include "ParagraphFormatResponse.h"
#include "ParagraphInsert.h"
#include "ParagraphLinkCollectionResponse.h"
#include "ParagraphResponse.h"
#include "ProtectionDataResponse.h"
#include "ProtectionRequest.h"
#include "ReplaceTextRequest.h"
#include "ReplaceTextResponse.h"
#include "RevisionsModificationResponse.h"
#include "Run.h"
#include "RunResponse.h"
#include "RunsResponse.h"
#include "SaveOptionsData.h"
#include "SaveResponse.h"
#include "SearchResponse.h"
#include "SectionLinkCollectionResponse.h"
#include "SectionPageSetupResponse.h"
#include "SectionResponse.h"
#include "SplitDocumentResponse.h"
#include "StatDataResponse.h"
#include "TableCellFormat.h"
#include "TableCellFormatResponse.h"
#include "TableCellInsert.h"
#include "TableCellResponse.h"
#include "TableInsert.h"
#include "TableLinkCollectionResponse.h"
#include "TableProperties.h"
#include "TablePropertiesResponse.h"
#include "TableResponse.h"
#include "TableRowFormat.h"
#include "TableRowFormatResponse.h"
#include "TableRowInsert.h"
#include "TableRowResponse.h"
#include "TextItemsResponse.h"
#include "TiffSaveOptionsData.h"
#include "WatermarkText.h"
#include <cpprest/details/basic_types.h>
#undef U
#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  WordsApi
{
public:
    WordsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~WordsApi();
    /// <summary>
    /// Accept all revisions in document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<RevisionsModificationResponse>> acceptAllRevisions(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Classify raw text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="text">Text to classify.</param>
    /// <param name="bestClassesCount">Count of the best classes to return. (optional, default to 1)</param>
    pplx::task<std::shared_ptr<ClassificationResponse>> classify(
        utility::string_t text,
        boost::optional<utility::string_t> bestClassesCount
    );
    /// <summary>
    /// Classify document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentName">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="bestClassesCount">Count of the best classes to return. (optional, default to 1)</param>
    /// <param name="taxonomy">Taxonomy to use for classification return. (optional, default to default)</param>
    pplx::task<std::shared_ptr<ClassificationResponse>> classifyDocument(
        utility::string_t documentName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> bestClassesCount,
        boost::optional<utility::string_t> taxonomy
    );
    /// <summary>
    /// Add new or update existing document property.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="propertyName">The property name.</param>
    /// <param name="property">The property with new value.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<DocumentPropertyResponse>> createOrUpdateDocumentProperty(
        utility::string_t name,
        utility::string_t propertyName,
        std::shared_ptr<DocumentProperty> property,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Resets border properties to default values.             
    /// </summary>
    /// <remarks>
    /// &#39;nodePath&#39; should refer to node with cell or row
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<BorderResponse>> deleteBorder(
        utility::string_t name,
        utility::string_t nodePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Resets borders properties to default values.             
    /// </summary>
    /// <remarks>
    /// &#39;nodePath&#39; should refer to node with cell or row
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<BordersResponse>> deleteBorders(
        utility::string_t name,
        utility::string_t nodePath,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Remove comment from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="commentIndex">Comment index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteComment(
        utility::string_t name,
        int32_t commentIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Remove macros from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteDocumentMacros(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Delete document property.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="propertyName">The property name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteDocumentProperty(
        utility::string_t name,
        utility::string_t propertyName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Delete watermark (for deleting last watermark from the document).
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> deleteDocumentWatermark(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Removes drawing object from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteDrawingObject(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Delete field from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteField(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Remove fields from section paragraph.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteFields(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Removes footnote from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of footnotes. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteFootnote(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Removes form field from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node that contains collection of formfields. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteFormField(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Delete header/footer from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="sectionPath">Path to parent section. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteHeaderFooter(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> sectionPath
    );
    /// <summary>
    /// Delete document headers and footers.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="sectionPath">Path to parent section. (optional)</param>
    /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteHeadersFooters(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> sectionPath,
        boost::optional<utility::string_t> headersFootersTypes
    );
    /// <summary>
    /// Removes OfficeMath object from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteOfficeMathObject(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Remove paragraph from section.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node which contains paragraphs. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteParagraph(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Removes run from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteRun(
        utility::string_t name,
        utility::string_t paragraphPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Delete a table.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteTable(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Delete a table cell.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tableRowPath">Path to table row.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteTableCell(
        utility::string_t name,
        utility::string_t tableRowPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Delete a table row.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tablePath">Path to table.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<AsposeResponse>> deleteTableRow(
        utility::string_t name,
        utility::string_t tablePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Unprotect document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="protectionRequest">with protection settings.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<ProtectionDataResponse>> deleteUnprotectDocument(
        utility::string_t name,
        std::shared_ptr<ProtectionRequest> protectionRequest,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Gets the list of fonts, available for document processing
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<std::shared_ptr<AvailableFontsResponse>> getAvailableFonts(
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Return a border.
    /// </summary>
    /// <remarks>
    /// &#39;nodePath&#39; should refer to node with cell or row
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<BorderResponse>> getBorder(
        utility::string_t name,
        utility::string_t nodePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a collection of borders.
    /// </summary>
    /// <remarks>
    /// &#39;nodePath&#39; should refer to node with cell or row
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<BordersResponse>> getBorders(
        utility::string_t name,
        utility::string_t nodePath,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Get comment from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="commentIndex">Comment index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<CommentResponse>> getComment(
        utility::string_t name,
        int32_t commentIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Get comments from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<CommentsResponse>> getComments(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document common info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="documentName">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> getDocument(
        utility::string_t documentName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document bookmark data by its name.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="bookmarkName">The bookmark name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<BookmarkResponse>> getDocumentBookmarkByName(
        utility::string_t name,
        utility::string_t bookmarkName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document bookmarks common info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<BookmarksResponse>> getDocumentBookmarks(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document drawing object common info by its index or convert to format specified.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<std::shared_ptr<DrawingObjectResponse>> getDocumentDrawingObjectByIndex(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Read drawing object image data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<HttpContent> getDocumentDrawingObjectImageData(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get drawing object OLE data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<HttpContent> getDocumentDrawingObjectOleData(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Read document drawing objects common info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<std::shared_ptr<DrawingObjectsResponse>> getDocumentDrawingObjects(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Read document field names.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional, default to false)</param>
    pplx::task<std::shared_ptr<FieldNamesResponse>> getDocumentFieldNames(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<bool> useNonMergeFields
    );
    /// <summary>
    /// Read document hyperlink by its index.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="hyperlinkIndex">The hyperlink index.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<HyperlinkResponse>> getDocumentHyperlinkByIndex(
        utility::string_t name,
        int32_t hyperlinkIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document hyperlinks common info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<HyperlinksResponse>> getDocumentHyperlinks(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// This resource represents one of the paragraphs contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node which contains paragraphs. (optional)</param>
    pplx::task<std::shared_ptr<ParagraphResponse>> getDocumentParagraph(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Represents all the formatting for a paragraph.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node which contains paragraphs. (optional)</param>
    pplx::task<std::shared_ptr<ParagraphFormatResponse>> getDocumentParagraphFormat(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// This resource represents run of text contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<RunResponse>> getDocumentParagraphRun(
        utility::string_t name,
        utility::string_t paragraphPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// This resource represents font of run.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<FontResponse>> getDocumentParagraphRunFont(
        utility::string_t name,
        utility::string_t paragraphPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// This resource represents collection of runs in the paragraph.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<RunsResponse>> getDocumentParagraphRuns(
        utility::string_t name,
        utility::string_t paragraphPath,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a list of paragraphs that are contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node which contains paragraphs. (optional)</param>
    pplx::task<std::shared_ptr<ParagraphLinkCollectionResponse>> getDocumentParagraphs(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Read document properties info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document&#39;s name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<DocumentPropertiesResponse>> getDocumentProperties(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document property info by the property name.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="propertyName">The property name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<DocumentPropertyResponse>> getDocumentProperty(
        utility::string_t name,
        utility::string_t propertyName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document protection common info.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<ProtectionDataResponse>> getDocumentProtection(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Read document statistics.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional, default to false)</param>
    /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional, default to false)</param>
    /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional, default to false)</param>
    pplx::task<std::shared_ptr<StatDataResponse>> getDocumentStatistics(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<bool> includeComments,
        boost::optional<bool> includeFootnotes,
        boost::optional<bool> includeTextInShapes
    );
    /// <summary>
    /// Read document text items.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<TextItemsResponse>> getDocumentTextItems(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Export the document into the specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="format">The destination format.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="outPath">Path to save result (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> getDocumentWithFormat(
        utility::string_t name,
        utility::string_t format,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> outPath,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Get field from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    pplx::task<std::shared_ptr<FieldResponse>> getField(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get fields from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    pplx::task<std::shared_ptr<FieldsResponse>> getFields(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Read footnote by index.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of footnotes. (optional)</param>
    pplx::task<std::shared_ptr<FootnoteResponse>> getFootnote(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get footnotes from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of footnotes. (optional)</param>
    pplx::task<std::shared_ptr<FootnotesResponse>> getFootnotes(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Returns representation of an one of the form field.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node that contains collection of formfields. (optional)</param>
    pplx::task<std::shared_ptr<FormFieldResponse>> getFormField(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get form fields from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node containing collection of form fields. (optional)</param>
    pplx::task<std::shared_ptr<FormFieldsResponse>> getFormFields(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Return a header/footer that is contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="headerFooterIndex">Header/footer index.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="filterByType">List of types of headers and footers. (optional)</param>
    pplx::task<std::shared_ptr<HeaderFooterResponse>> getHeaderFooter(
        utility::string_t name,
        int32_t headerFooterIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> filterByType
    );
    /// <summary>
    /// Return a header/footer that is contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="headerFooterIndex">Header/footer index.</param>
    /// <param name="sectionIndex">Section index.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="filterByType">List of types of headers and footers. (optional)</param>
    pplx::task<std::shared_ptr<HeaderFooterResponse>> getHeaderFooterOfSection(
        utility::string_t name,
        int32_t headerFooterIndex,
        int32_t sectionIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> filterByType
    );
    /// <summary>
    /// Return a list of header/footers that are contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="sectionPath">Path to parent section. (optional)</param>
    /// <param name="filterByType">List of types of headers and footers. (optional)</param>
    pplx::task<std::shared_ptr<HeaderFootersResponse>> getHeaderFooters(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> sectionPath,
        boost::optional<utility::string_t> filterByType
    );
    /// <summary>
    /// Read OfficeMath object by index.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects. (optional)</param>
    pplx::task<std::shared_ptr<OfficeMathObjectResponse>> getOfficeMathObject(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get OfficeMath objects from document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects. (optional)</param>
    pplx::task<std::shared_ptr<OfficeMathObjectsResponse>> getOfficeMathObjects(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Get document section by index.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="sectionIndex">Section index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<SectionResponse>> getSection(
        utility::string_t name,
        int32_t sectionIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Get page setup of section.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="sectionIndex">Section index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<SectionPageSetupResponse>> getSectionPageSetup(
        utility::string_t name,
        int32_t sectionIndex,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a list of sections that are contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<SectionLinkCollectionResponse>> getSections(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a table.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<TableResponse>> getTable(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Return a table cell.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tableRowPath">Path to table row.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<TableCellResponse>> getTableCell(
        utility::string_t name,
        utility::string_t tableRowPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a table cell format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tableRowPath">Path to table row.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<TableCellFormatResponse>> getTableCellFormat(
        utility::string_t name,
        utility::string_t tableRowPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a table properties.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<TablePropertiesResponse>> getTableProperties(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Return a table row.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tablePath">Path to table.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<TableRowResponse>> getTableRow(
        utility::string_t name,
        utility::string_t tablePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a table row format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tablePath">Path to table.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<TableRowFormatResponse>> getTableRowFormat(
        utility::string_t name,
        utility::string_t tablePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Return a list of tables that are contained in the document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<TableLinkCollectionResponse>> getTables(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Adds table to document, returns added table&#39;s data.             
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="table">Table parameters/ (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<TableResponse>> insertTable(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableInsert>> table,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Adds table cell to table, returns added cell&#39;s data.             
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tableRowPath">Path to table row.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="cell">Table cell parameters/ (optional)</param>
    pplx::task<std::shared_ptr<TableCellResponse>> insertTableCell(
        utility::string_t name,
        utility::string_t tableRowPath,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableCellInsert>> cell
    );
    /// <summary>
    /// Adds table row to table, returns added row&#39;s data.             
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tablePath">Path to table.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="row">Table row parameters/ (optional)</param>
    pplx::task<std::shared_ptr<TableRowResponse>> insertTableRow(
        utility::string_t name,
        utility::string_t tablePath,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableRowInsert>> row
    );
    /// <summary>
    /// Append documents to original document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">Original document name.</param>
    /// <param name="documentList">with a list of documents to append.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postAppendDocument(
        utility::string_t name,
        std::shared_ptr<DocumentEntryList> documentList,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Change document protection.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="protectionRequest">with protection settings.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<ProtectionDataResponse>> postChangeDocumentProtection(
        utility::string_t name,
        std::shared_ptr<ProtectionRequest> protectionRequest,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Updates the comment, returns updated comment&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="commentIndex">Comment index</param>
    /// <param name="comment">Comment data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<CommentResponse>> postComment(
        utility::string_t name,
        int32_t commentIndex,
        std::shared_ptr<Comment> comment,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Compare document with original document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">Original document name.</param>
    /// <param name="compareData">with a document to compare.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postCompareDocument(
        utility::string_t name,
        std::shared_ptr<CompareData> compareData,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Execute document mail merge operation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="data">Mail merge data (optional)</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="withRegions">With regions flag. (optional, default to false)</param>
    /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
    /// <param name="cleanup">Clean up options. (optional)</param>
    /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or              TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.              The default value is true. (optional, default to true)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postDocumentExecuteMailMerge(
        utility::string_t name,
        boost::optional<utility::string_t> data,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<bool> withRegions,
        boost::optional<utility::string_t> mailMergeDataFile,
        boost::optional<utility::string_t> cleanup,
        boost::optional<bool> useWholeParagraphAsRegion,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Updates paragrpaph format properties, returns updated format properties.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="dto">Paragraph format object</param>
    /// <param name="nodePath">Path to node which contains paragraphs.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<ParagraphFormatResponse>> postDocumentParagraphFormat(
        utility::string_t name,
        std::shared_ptr<ParagraphFormat> dto,
        utility::string_t nodePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Updates font properties, returns updated font data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="fontDto">Font dto object</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<FontResponse>> postDocumentParagraphRunFont(
        utility::string_t name,
        std::shared_ptr<Font> fontDto,
        utility::string_t paragraphPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Convert document to destination format with detailed settings and save result to storage.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="saveOptionsData">Save options.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<std::shared_ptr<SaveResponse>> postDocumentSaveAs(
        utility::string_t name,
        std::shared_ptr<SaveOptionsData> saveOptionsData,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Updates drawing object, returns updated  drawing object&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="drawingObject">Drawing object parameters</param>
    /// <param name="imageFile">File with image</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<std::shared_ptr<DrawingObjectResponse>> postDrawingObject(
        utility::string_t name,
        utility::string_t drawingObject,
        std::shared_ptr<HttpContent> imageFile,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Populate document template with data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The template document name.</param>
    /// <param name="data">Mail merge data</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="cleanup">Clean up options. (optional)</param>
    /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or  TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.   The default value is true. (optional, default to true)</param>
    /// <param name="withRegions">Merge with regions or not. True by default (optional, default to true)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postExecuteTemplate(
        utility::string_t name,
        utility::string_t data,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> cleanup,
        boost::optional<bool> useWholeParagraphAsRegion,
        boost::optional<bool> withRegions,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Updates field&#39;s properties, returns updated field&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="field">Field data.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    pplx::task<std::shared_ptr<FieldResponse>> postField(
        utility::string_t name,
        std::shared_ptr<Field> field,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Updates footnote&#39;s properties, returns updated run&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="footnoteDto">Footnote data.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of footnotes. (optional)</param>
    pplx::task<std::shared_ptr<FootnoteResponse>> postFootnote(
        utility::string_t name,
        std::shared_ptr<Footnote> footnoteDto,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Updates properties of form field, returns updated form field.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="formField">From field data.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node that contains collection of formfields. (optional)</param>
    pplx::task<std::shared_ptr<FormFieldResponse>> postFormField(
        utility::string_t name,
        std::shared_ptr<FormField> formField,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Insert document watermark image.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="imageFile">File with image (optional)</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="rotationAngle">The watermark rotation angle. (optional, default to 0.0)</param>
    /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postInsertDocumentWatermarkImage(
        utility::string_t name,
        boost::optional<std::shared_ptr<HttpContent>> imageFile,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<double> rotationAngle,
        boost::optional<utility::string_t> image
    );
    /// <summary>
    /// Insert document watermark text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="watermarkText">with the watermark data.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postInsertDocumentWatermarkText(
        utility::string_t name,
        std::shared_ptr<WatermarkText> watermarkText,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Insert document page numbers.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">A document name.</param>
    /// <param name="pageNumber">with the page numbers settings.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postInsertPageNumbers(
        utility::string_t name,
        std::shared_ptr<PageNumber> pageNumber,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Loads new document from web into the file with any supported format of data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="data">Parameters of loading.</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    pplx::task<std::shared_ptr<SaveResponse>> postLoadWebDocument(
        std::shared_ptr<LoadWebDocumentData> data,
        boost::optional<utility::string_t> storage
    );
    /// <summary>
    /// Replace document text.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="replaceText">with the replace operation settings.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<ReplaceTextResponse>> postReplaceText(
        utility::string_t name,
        std::shared_ptr<ReplaceTextRequest> replaceText,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Updates run&#39;s properties, returns updated run&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="run">Run data.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<RunResponse>> postRun(
        utility::string_t name,
        std::shared_ptr<Run> run,
        utility::string_t paragraphPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Split document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">Original document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="format">Format to split. (optional)</param>
    /// <param name="from">Start page. (optional)</param>
    /// <param name="to">End page. (optional)</param>
    /// <param name="zipOutput">ZipOutput or not. (optional, default to false)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<std::shared_ptr<SplitDocumentResponse>> postSplitDocument(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> format,
        boost::optional<int32_t> from,
        boost::optional<int32_t> to,
        boost::optional<bool> zipOutput,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Update document bookmark.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="bookmarkData">with new bookmark data.            </param>
    /// <param name="bookmarkName">The bookmark name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<BookmarkResponse>> postUpdateDocumentBookmark(
        utility::string_t name,
        std::shared_ptr<BookmarkData> bookmarkData,
        utility::string_t bookmarkName,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Update (reevaluate) fields in document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> postUpdateDocumentFields(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Adds comment to document, returns inserted comment&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="comment">Comment data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<CommentResponse>> putComment(
        utility::string_t name,
        std::shared_ptr<Comment> comment,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Convert document from request content to format specified.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="document">Converting document</param>
    /// <param name="format">Format to convert.</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
    /// <param name="documentFileName">This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not setted, \&quot;sourceFilename\&quot; will be used instead.  (optional, default to sourceFilename)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> putConvertDocument(
        std::shared_ptr<HttpContent> document,
        utility::string_t format,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> outPath,
        boost::optional<utility::string_t> documentFileName,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Creates new document. Document is created with format which is recognized from file extensions.  Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot;
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="fileName">The file name. (optional)</param>
    /// <param name="folder">The document folder. (optional)</param>
    pplx::task<std::shared_ptr<DocumentResponse>> putCreateDocument(
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> fileName,
        boost::optional<utility::string_t> folder
    );
    /// <summary>
    /// Read document field names.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="_template">File with template</param>
    /// <param name="useNonMergeFields">Use non merge fields or not. (optional, default to false)</param>
    pplx::task<std::shared_ptr<FieldNamesResponse>> putDocumentFieldNames(
        std::shared_ptr<HttpContent> _template,
        boost::optional<bool> useNonMergeFields
    );
    /// <summary>
    /// Convert document to tiff with detailed settings and save result to storage.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="saveOptions">Tiff save options.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="resultFile">The resulting file name. (optional)</param>
    /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
    /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
    /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
    /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
    /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
    /// <param name="numeralFormat">The images numeral format. (optional)</param>
    /// <param name="pageCount">Number of pages to render. (optional)</param>
    /// <param name="pageIndex">Page index to start rendering. (optional)</param>
    /// <param name="paperColor">Background image color. (optional)</param>
    /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
    /// <param name="resolution">The resolution of generated images. (optional)</param>
    /// <param name="scale">Zoom factor for generated images. (optional)</param>
    /// <param name="tiffCompression">The compression tipe. (optional)</param>
    /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
    /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
    /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
    /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<std::shared_ptr<SaveResponse>> putDocumentSaveAsTiff(
        utility::string_t name,
        std::shared_ptr<TiffSaveOptionsData> saveOptions,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> resultFile,
        boost::optional<bool> useAntiAliasing,
        boost::optional<bool> useHighQualityRendering,
        boost::optional<double> imageBrightness,
        boost::optional<utility::string_t> imageColorMode,
        boost::optional<double> imageContrast,
        boost::optional<utility::string_t> numeralFormat,
        boost::optional<int32_t> pageCount,
        boost::optional<int32_t> pageIndex,
        boost::optional<utility::string_t> paperColor,
        boost::optional<utility::string_t> pixelFormat,
        boost::optional<double> resolution,
        boost::optional<double> scale,
        boost::optional<utility::string_t> tiffCompression,
        boost::optional<utility::string_t> dmlRenderingMode,
        boost::optional<utility::string_t> dmlEffectsRenderingMode,
        boost::optional<utility::string_t> tiffBinarizationMethod,
        boost::optional<bool> zipOutput,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Adds  drawing object to document, returns added  drawing object&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="drawingObject">Drawing object parameters</param>
    /// <param name="imageFile">File with image</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of drawing objects. (optional)</param>
    pplx::task<std::shared_ptr<DrawingObjectResponse>> putDrawingObject(
        utility::string_t name,
        utility::string_t drawingObject,
        std::shared_ptr<HttpContent> imageFile,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Execute document mail merge online.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="_template">File with template</param>
    /// <param name="data">File with mailmerge data</param>
    /// <param name="withRegions">With regions flag. (optional, default to false)</param>
    /// <param name="cleanup">Clean up options. (optional)</param>
    /// <param name="documentFileName">This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not setted, \&quot;template\&quot; will be used instead.  (optional, default to template)</param>
    pplx::task<HttpContent> putExecuteMailMergeOnline(
        std::shared_ptr<HttpContent> _template,
        std::shared_ptr<HttpContent> data,
        boost::optional<bool> withRegions,
        boost::optional<utility::string_t> cleanup,
        boost::optional<utility::string_t> documentFileName
    );
    /// <summary>
    /// Populate document template with data online.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="_template">File with template</param>
    /// <param name="data">File with mailmerge data</param>
    /// <param name="cleanup">Clean up options. (optional)</param>
    /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or              TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.              The default value is true. (optional, default to true)</param>
    /// <param name="withRegions">Merge with regions or not. True by default (optional, default to true)</param>
    /// <param name="documentFileName">This file name will be used when resulting document has dynamic field for document file name {filename}.  If it is not setted, \&quot;template\&quot; will be used instead.  Note: if withRegions &#x3D;&#x3D; true executeTemplate updates fields only inside regions (optional, default to template)</param>
    pplx::task<HttpContent> putExecuteTemplateOnline(
        std::shared_ptr<HttpContent> _template,
        std::shared_ptr<HttpContent> data,
        boost::optional<utility::string_t> cleanup,
        boost::optional<bool> useWholeParagraphAsRegion,
        boost::optional<bool> withRegions,
        boost::optional<utility::string_t> documentFileName
    );
    /// <summary>
    /// Adds field to document, returns inserted field&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="field">Field data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of fields. (optional)</param>
    /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
    pplx::task<std::shared_ptr<FieldResponse>> putField(
        utility::string_t name,
        std::shared_ptr<Field> field,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> insertBeforeNode
    );
    /// <summary>
    /// Adds footnote to document, returns added footnote&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="footnoteDto">Footnote data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node, which contains collection of footnotes. (optional)</param>
    pplx::task<std::shared_ptr<FootnoteResponse>> putFootnote(
        utility::string_t name,
        std::shared_ptr<Footnote> footnoteDto,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Adds form field to paragraph, returns added form field&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="formField">From field data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node that contains collection of formfields. (optional)</param>
    /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
    pplx::task<std::shared_ptr<FormFieldResponse>> putFormField(
        utility::string_t name,
        std::shared_ptr<FormField> formField,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> insertBeforeNode
    );
    /// <summary>
    /// Insert to document header or footer.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="headerFooterType">Type of header/footer.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="sectionPath">Path to parent section. (optional)</param>
    pplx::task<std::shared_ptr<HeaderFooterResponse>> putHeaderFooter(
        utility::string_t name,
        utility::string_t headerFooterType,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> sectionPath
    );
    /// <summary>
    /// Adds paragraph to document, returns added paragraph&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="paragraph">Paragraph data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="nodePath">Path to node which contains paragraphs. (optional)</param>
    /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
    pplx::task<std::shared_ptr<ParagraphResponse>> putParagraph(
        utility::string_t name,
        std::shared_ptr<ParagraphInsert> paragraph,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> insertBeforeNode
    );
    /// <summary>
    /// Protect document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="protectionRequest">with protection settings.            </param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<ProtectionDataResponse>> putProtectDocument(
        utility::string_t name,
        std::shared_ptr<ProtectionRequest> protectionRequest,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Adds run to document, returns added paragraph&#39;s data.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="paragraphPath">Path to parent paragraph.</param>
    /// <param name="run">Run data.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
    pplx::task<std::shared_ptr<RunResponse>> putRun(
        utility::string_t name,
        utility::string_t paragraphPath,
        std::shared_ptr<Run> run,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<utility::string_t> insertBeforeNode
    );
    /// <summary>
    /// Reject all revisions in document
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    pplx::task<std::shared_ptr<RevisionsModificationResponse>> rejectAllRevisions(
        utility::string_t name,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName
    );
    /// <summary>
    /// Renders drawing object to specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="format">The destination format.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains drawing objects. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> renderDrawingObject(
        utility::string_t name,
        utility::string_t format,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Renders math object to specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="format">The destination format.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains office math objects. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> renderMathObject(
        utility::string_t name,
        utility::string_t format,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Renders page to specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="pageIndex">Comment index</param>
    /// <param name="format">The destination format.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> renderPage(
        utility::string_t name,
        int32_t pageIndex,
        utility::string_t format,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Renders paragraph to specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="format">The destination format.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains paragraphs. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> renderParagraph(
        utility::string_t name,
        utility::string_t format,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Renders table to specified format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The file name.</param>
    /// <param name="format">The destination format.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
    pplx::task<HttpContent> renderTable(
        utility::string_t name,
        utility::string_t format,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> nodePath,
        boost::optional<utility::string_t> fontsLocation
    );
    /// <summary>
    /// Resets font&#39;s cache.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<AsposeResponse>> resetCache(
    );
    /// <summary>
    /// Search text in document.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="pattern">The regular expression used to find matches.</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    pplx::task<std::shared_ptr<SearchResponse>> search(
        utility::string_t name,
        utility::string_t pattern,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password
    );
    /// <summary>
    /// Updates border properties.             
    /// </summary>
    /// <remarks>
    /// &#39;nodePath&#39; should refer to node with cell or row
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="borderProperties">Border properties</param>
    /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<BorderResponse>> updateBorder(
        utility::string_t name,
        std::shared_ptr<Border> borderProperties,
        utility::string_t nodePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Update page setup of section.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="sectionIndex">Section index</param>
    /// <param name="pageSetup">Page setup properties dto</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    pplx::task<std::shared_ptr<SectionPageSetupResponse>> updateSectionPageSetup(
        utility::string_t name,
        int32_t sectionIndex,
        std::shared_ptr<PageSetup> pageSetup,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime
    );
    /// <summary>
    /// Updates a table cell format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tableRowPath">Path to table row.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="format">The properties. (optional)</param>
    pplx::task<std::shared_ptr<TableCellFormatResponse>> updateTableCellFormat(
        utility::string_t name,
        utility::string_t tableRowPath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableCellFormat>> format
    );
    /// <summary>
    /// Updates a table properties.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="properties">The properties. (optional)</param>
    /// <param name="nodePath">Path to node, which contains tables. (optional)</param>
    pplx::task<std::shared_ptr<TablePropertiesResponse>> updateTableProperties(
        utility::string_t name,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableProperties>> properties,
        boost::optional<utility::string_t> nodePath
    );
    /// <summary>
    /// Updates a table row format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The document name.</param>
    /// <param name="tablePath">Path to table.</param>
    /// <param name="index">Object&#39;s index</param>
    /// <param name="folder">Original document folder. (optional)</param>
    /// <param name="storage">File storage, which have to be used. (optional)</param>
    /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
    /// <param name="password">Password for opening an encrypted document. (optional)</param>
    /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
    /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
    /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
    /// <param name="format">Table row format. (optional)</param>
    pplx::task<std::shared_ptr<TableRowFormatResponse>> updateTableRowFormat(
        utility::string_t name,
        utility::string_t tablePath,
        int32_t index,
        boost::optional<utility::string_t> folder,
        boost::optional<utility::string_t> storage,
        boost::optional<utility::string_t> loadEncoding,
        boost::optional<utility::string_t> password,
        boost::optional<utility::string_t> destFileName,
        boost::optional<utility::string_t> revisionAuthor,
        boost::optional<utility::string_t> revisionDateTime,
        boost::optional<std::shared_ptr<TableRowFormat>> format
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_WordsApi_H_ */

