/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AvailableFontsResponse.h
 *
 * The list of fonts, available for document processing
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_AvailableFontsResponse_H_
#define IO_SWAGGER_CLIENT_MODEL_AvailableFontsResponse_H_


#include "AsposeResponse.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "FontInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The list of fonts, available for document processing
/// </summary>
class  AvailableFontsResponse
    : public AsposeResponse
{
public:
    AvailableFontsResponse();
    virtual ~AvailableFontsResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AvailableFontsResponse members

    /// <summary>
    /// The list of addititional fonts, provided by aspose team
    /// </summary>
    std::vector<std::shared_ptr<FontInfo>>& getAdditionalFonts();
    bool additionalFontsIsSet() const;
    void unsetAdditionalFonts();
    void setAdditionalFonts(std::vector<std::shared_ptr<FontInfo>> value);
    /// <summary>
    /// Custom user fonts (from user file storage). To use them, you should specify \&quot;fontsLocation\&quot; parameter in any request
    /// </summary>
    std::vector<std::shared_ptr<FontInfo>>& getCustomFonts();
    bool customFontsIsSet() const;
    void unsetCustomFonts();
    void setCustomFonts(std::vector<std::shared_ptr<FontInfo>> value);
    /// <summary>
    /// The list of system fonts, availiable on the server
    /// </summary>
    std::vector<std::shared_ptr<FontInfo>>& getSystemFonts();
    bool systemFontsIsSet() const;
    void unsetSystemFonts();
    void setSystemFonts(std::vector<std::shared_ptr<FontInfo>> value);

protected:
    std::vector<std::shared_ptr<FontInfo>> m_AdditionalFonts;
    bool m_AdditionalFontsIsSet;
    std::vector<std::shared_ptr<FontInfo>> m_CustomFonts;
    bool m_CustomFontsIsSet;
    std::vector<std::shared_ptr<FontInfo>> m_SystemFonts;
    bool m_SystemFontsIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_AvailableFontsResponse_H_ */
