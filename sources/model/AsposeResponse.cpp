/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AsposeResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AsposeResponse::AsposeResponse()
{
    m_Code = 0;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

AsposeResponse::~AsposeResponse()
{
}

void AsposeResponse::validate()
{
    // TODO: implement validation
}

web::json::value AsposeResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("Code")] = ModelBase::toJson(m_Code);
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("Status")] = ModelBase::toJson(m_Status);
    }

    return val;
}

void AsposeResponse::fromJson(web::json::value& val)
{
    setCode(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("Code")]));
    if(val.has_field(utility::conversions::to_string_t("Status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Status")];
        if(!fieldValue.is_null())
        {
            setStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void AsposeResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Code"), m_Code));
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Status"), m_Status));
        
    }
}

void AsposeResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Code"))));
    if(multipart->hasContent(utility::conversions::to_string_t("Status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Status"))));
    }
}

int32_t AsposeResponse::getCode() const
{
    return m_Code;
}


void AsposeResponse::setCode(int32_t value)
{
    m_Code = value;
    
}
utility::string_t AsposeResponse::getStatus() const
{
    return m_Status;
}


void AsposeResponse::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool AsposeResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void AsposeResponse::unsetStatus()
{
    m_StatusIsSet = false;
}

}
}
}
}

