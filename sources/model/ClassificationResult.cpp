/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ClassificationResult.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ClassificationResult::ClassificationResult()
{
    m_ClassName = utility::conversions::to_string_t("");
    m_ClassNameIsSet = false;
    m_ClassProbability = 0.0;
}

ClassificationResult::~ClassificationResult()
{
}

void ClassificationResult::validate()
{
    // TODO: implement validation
}

web::json::value ClassificationResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ClassNameIsSet)
    {
        val[utility::conversions::to_string_t("ClassName")] = ModelBase::toJson(m_ClassName);
    }
    val[utility::conversions::to_string_t("ClassProbability")] = ModelBase::toJson(m_ClassProbability);

    return val;
}

void ClassificationResult::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("ClassName")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("ClassName")];
        if(!fieldValue.is_null())
        {
            setClassName(ModelBase::stringFromJson(fieldValue));
        }
    }
    setClassProbability(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("ClassProbability")]));
}

void ClassificationResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ClassName"), m_ClassName));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ClassProbability"), m_ClassProbability));
}

void ClassificationResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ClassName")))
    {
        setClassName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ClassName"))));
    }
    setClassProbability(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ClassProbability"))));
}

utility::string_t ClassificationResult::getClassName() const
{
    return m_ClassName;
}


void ClassificationResult::setClassName(utility::string_t value)
{
    m_ClassName = value;
    m_ClassNameIsSet = true;
}
bool ClassificationResult::classNameIsSet() const
{
    return m_ClassNameIsSet;
}

void ClassificationResult::unsetClassName()
{
    m_ClassNameIsSet = false;
}

double ClassificationResult::getClassProbability() const
{
    return m_ClassProbability;
}


void ClassificationResult::setClassProbability(double value)
{
    m_ClassProbability = value;
    
}
}
}
}
}

