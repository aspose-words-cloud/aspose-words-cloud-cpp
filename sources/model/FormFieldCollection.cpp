/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FormFieldCollection.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

FormFieldCollection::FormFieldCollection()
{
    m_ListIsSet = false;
}

FormFieldCollection::~FormFieldCollection()
{
}

void FormFieldCollection::validate()
{
    // TODO: implement validation
}

web::json::value FormFieldCollection::toJson() const
{
    web::json::value val = this->LinkElement::toJson();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_List )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("List")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void FormFieldCollection::fromJson(web::json::value& val)
{
    this->LinkElement::fromJson(val);

    {
        m_List.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("List")))
        {
        for( auto& item : val[utility::conversions::to_string_t("List")].as_array() )
        {
            if(item.is_null())
            {
                m_List.push_back( std::shared_ptr<FormField>(nullptr) );
            }
            else
            {
                std::shared_ptr<FormField> newItem(new FormField());
                newItem->fromJson(item);
                m_List.push_back( newItem );
            }
        }
        }
    }
}

void FormFieldCollection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LinkIsSet)
    {
        if (m_Link.get())
        {
            m_Link->toMultipart(multipart, utility::conversions::to_string_t("link."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_List )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("List"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void FormFieldCollection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("link")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link")))
        {
            std::shared_ptr<WordsApiLink> newItem(new WordsApiLink());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link."));
            setLink( newItem );
        }
    }
    {
        m_List.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("List")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("List"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_List.push_back( std::shared_ptr<FormField>(nullptr) );
            }
            else
            {
                std::shared_ptr<FormField> newItem(new FormField());
                newItem->fromJson(item);
                m_List.push_back( newItem );
            }
        }
        }
    }
}

std::vector<std::shared_ptr<FormField>>& FormFieldCollection::getList()
{
    return m_List;
}

void FormFieldCollection::setList(std::vector<std::shared_ptr<FormField>> value)
{
    m_List = value;
    m_ListIsSet = true;
}
bool FormFieldCollection::listIsSet() const
{
    return m_ListIsSet;
}

void FormFieldCollection::unsetList()
{
    m_ListIsSet = false;
}

}
}
}
}

