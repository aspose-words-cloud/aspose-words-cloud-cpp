/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Footnote.h
 *
 * Footnote.
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Footnote_H_
#define IO_SWAGGER_CLIENT_MODEL_Footnote_H_


#include "DocumentPosition.h"
#include "FootnoteLink.h"
#include <cpprest/details/basic_types.h>
#include "StoryChildNodes.h"
#include "WordsApiLink.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Footnote.
/// </summary>
class  Footnote
    : public FootnoteLink
{
public:
    Footnote();
    virtual ~Footnote();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Footnote members

    /// <summary>
    /// Content of footnote.
    /// </summary>
    std::shared_ptr<StoryChildNodes> getContent() const;
    bool contentIsSet() const;
    void unsetContent();
    void setContent(std::shared_ptr<StoryChildNodes> value);
    /// <summary>
    /// Returns a value that specifies whether this is a footnote or endnote.
    /// </summary>
    utility::string_t getFootnoteType() const;
    bool footnoteTypeIsSet() const;
    void unsetFootnoteType();
    void setFootnoteType(utility::string_t value);
    /// <summary>
    /// Link to comment range start node.
    /// </summary>
    std::shared_ptr<DocumentPosition> getPosition() const;
    bool positionIsSet() const;
    void unsetPosition();
    void setPosition(std::shared_ptr<DocumentPosition> value);
    /// <summary>
    /// Gets/sets custom reference mark to be used for this footnote. Default value is , meaning auto-numbered footnotes are used.
    /// </summary>
    utility::string_t getReferenceMark() const;
    bool referenceMarkIsSet() const;
    void unsetReferenceMark();
    void setReferenceMark(utility::string_t value);
    /// <summary>
    /// This is a convenience property that allows to easily get or set text of the footnote.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();
    void setText(utility::string_t value);

protected:
    std::shared_ptr<StoryChildNodes> m_Content;
    bool m_ContentIsSet;
    utility::string_t m_FootnoteType;
    bool m_FootnoteTypeIsSet;
    std::shared_ptr<DocumentPosition> m_Position;
    bool m_PositionIsSet;
    utility::string_t m_ReferenceMark;
    bool m_ReferenceMarkIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Footnote_H_ */
