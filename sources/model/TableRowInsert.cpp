/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TableRowInsert.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TableRowInsert::TableRowInsert()
{
    m_InsertAfter = 0;
    m_InsertAfterIsSet = false;
    m_ColumnsCount = 0;
}

TableRowInsert::~TableRowInsert()
{
}

void TableRowInsert::validate()
{
    // TODO: implement validation
}

web::json::value TableRowInsert::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_InsertAfterIsSet)
    {
        val[utility::conversions::to_string_t("InsertAfter")] = ModelBase::toJson(m_InsertAfter);
    }
    val[utility::conversions::to_string_t("ColumnsCount")] = ModelBase::toJson(m_ColumnsCount);

    return val;
}

void TableRowInsert::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("InsertAfter")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("InsertAfter")];
        if(!fieldValue.is_null())
        {
            setInsertAfter(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    setColumnsCount(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("ColumnsCount")]));
}

void TableRowInsert::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_InsertAfterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("InsertAfter"), m_InsertAfter));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ColumnsCount"), m_ColumnsCount));
}

void TableRowInsert::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("InsertAfter")))
    {
        setInsertAfter(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("InsertAfter"))));
    }
    setColumnsCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ColumnsCount"))));
}

int32_t TableRowInsert::getInsertAfter() const
{
    return m_InsertAfter;
}


void TableRowInsert::setInsertAfter(int32_t value)
{
    m_InsertAfter = value;
    m_InsertAfterIsSet = true;
}
bool TableRowInsert::insertAfterIsSet() const
{
    return m_InsertAfterIsSet;
}

void TableRowInsert::unsetInsertAfter()
{
    m_InsertAfterIsSet = false;
}

int32_t TableRowInsert::getColumnsCount() const
{
    return m_ColumnsCount;
}


void TableRowInsert::setColumnsCount(int32_t value)
{
    m_ColumnsCount = value;
    
}
}
}
}
}

