/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DocumentStatData.h
 *
 * Container for the document&#39;s statistical data
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_DocumentStatData_H_
#define IO_SWAGGER_CLIENT_MODEL_DocumentStatData_H_


#include "../ModelBase.h"

#include "PageStatData.h"
#include "FootnotesStatData.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Container for the document&#39;s statistical data
/// </summary>
class  DocumentStatData
    : public ModelBase
{
public:
    DocumentStatData();
    virtual ~DocumentStatData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DocumentStatData members

    /// <summary>
    /// Total count of words in the document
    /// </summary>
    int32_t getWordCount() const;
        void setWordCount(int32_t value);
    /// <summary>
    /// Total count of paragraphs in the document
    /// </summary>
    int32_t getParagraphCount() const;
        void setParagraphCount(int32_t value);
    /// <summary>
    /// Total count of pages in the document
    /// </summary>
    int32_t getPageCount() const;
        void setPageCount(int32_t value);
    /// <summary>
    /// Detailed statistics of footnotes
    /// </summary>
    std::shared_ptr<FootnotesStatData> getFootnotesStatData() const;
    bool footnotesStatDataIsSet() const;
    void unsetFootnotesStatData();
    void setFootnotesStatData(std::shared_ptr<FootnotesStatData> value);
    /// <summary>
    /// Detailed statistics of all pages
    /// </summary>
    std::vector<std::shared_ptr<PageStatData>>& getPageStatData();
    bool pageStatDataIsSet() const;
    void unsetPageStatData();
    void setPageStatData(std::vector<std::shared_ptr<PageStatData>> value);

protected:
    int32_t m_WordCount;
        int32_t m_ParagraphCount;
        int32_t m_PageCount;
        std::shared_ptr<FootnotesStatData> m_FootnotesStatData;
    bool m_FootnotesStatDataIsSet;
    std::vector<std::shared_ptr<PageStatData>> m_PageStatData;
    bool m_PageStatDataIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_DocumentStatData_H_ */
