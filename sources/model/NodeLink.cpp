/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NodeLink.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NodeLink::NodeLink()
{
    m_NodeId = utility::conversions::to_string_t("");
    m_NodeIdIsSet = false;
}

NodeLink::~NodeLink()
{
}

void NodeLink::validate()
{
    // TODO: implement validation
}

web::json::value NodeLink::toJson() const
{
    web::json::value val = this->LinkElement::toJson();

    if(m_NodeIdIsSet)
    {
        val[utility::conversions::to_string_t("NodeId")] = ModelBase::toJson(m_NodeId);
    }

    return val;
}

void NodeLink::fromJson(web::json::value& val)
{
    this->LinkElement::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("NodeId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("NodeId")];
        if(!fieldValue.is_null())
        {
            setNodeId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void NodeLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_LinkIsSet)
    {
        if (m_Link.get())
        {
            m_Link->toMultipart(multipart, utility::conversions::to_string_t("link."));
        }
        
    }
    if(m_NodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("NodeId"), m_NodeId));
        
    }
}

void NodeLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("link")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("link")))
        {
            std::shared_ptr<WordsApiLink> newItem(new WordsApiLink());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("link."));
            setLink( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("NodeId")))
    {
        setNodeId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("NodeId"))));
    }
}

utility::string_t NodeLink::getNodeId() const
{
    return m_NodeId;
}


void NodeLink::setNodeId(utility::string_t value)
{
    m_NodeId = value;
    m_NodeIdIsSet = true;
}
bool NodeLink::nodeIdIsSet() const
{
    return m_NodeIdIsSet;
}

void NodeLink::unsetNodeId()
{
    m_NodeIdIsSet = false;
}

}
}
}
}

