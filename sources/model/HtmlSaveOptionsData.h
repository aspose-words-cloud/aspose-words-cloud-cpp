
/** --------------------------------------------------------------------------------------------------------------------
* <copyright company="Aspose" file="HtmlSaveOptionsData.h">
*   Copyright (c) 2019 Aspose.Words for Cloud
* </copyright>
* <summary>
*   Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
* 
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
* 
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* </summary> 
-------------------------------------------------------------------------------------------------------------------- **/

#ifndef ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_
#define ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_


#include "SaveOptionsData.h"
#include <cpprest/details/basic_types.h>

namespace aspose {
namespace words {
namespace cloud {
namespace api {
namespace models {

/// <summary>
/// container class for html save options.
/// </summary>
class  HtmlSaveOptionsData
    : public SaveOptionsData
{
public:
    HtmlSaveOptionsData();
    virtual ~HtmlSaveOptionsData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(const std::shared_ptr<MultipartFormData>& multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(const std::shared_ptr<MultipartFormData>& multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HtmlSaveOptionsData members

    /// <summary>
    /// Gets or sets specifies whether negative left and right indents of paragraphs are allowed (not normalized).
    /// </summary>
    bool isAllowNegativeIndent() const;
    bool allowNegativeIndentIsSet() const;
    void unsetAllowNegativeIndent();
    void setAllowNegativeIndent(bool value);
    /// <summary>
    /// Gets or sets specifies a prefix which is added to all CSS class names. Default value is an empty string and generated CSS class names have no common prefix.  If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.This might be useful, for example, if you add custom CSS to generated documents and want to prevent class name conflicts. If the value is not null or empty, it must be a valid CSS identifier.
    /// </summary>
    utility::string_t getCssClassNamePrefix() const;
    bool cssClassNamePrefixIsSet() const;
    void unsetCssClassNamePrefix();
    void setCssClassNamePrefix(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the name of the CSS file written when the document is exported to HTML.
    /// </summary>
    utility::string_t getCssStyleSheetFileName() const;
    bool cssStyleSheetFileNameIsSet() const;
    void unsetCssStyleSheetFileName();
    void setCssStyleSheetFileName(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies how CSS styles are exported.
    /// </summary>
    utility::string_t getCssStyleSheetType() const;
    bool cssStyleSheetTypeIsSet() const;
    void unsetCssStyleSheetType();
    void setCssStyleSheetType(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies how the document should be split when saving.
    /// </summary>
    utility::string_t getDocumentSplitCriteria() const;
    bool documentSplitCriteriaIsSet() const;
    void unsetDocumentSplitCriteria();
    void setDocumentSplitCriteria(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the maximum level of headings at which to split the document.
    /// </summary>
    int32_t getDocumentSplitHeadingLevel() const;
    bool documentSplitHeadingLevelIsSet() const;
    void unsetDocumentSplitHeadingLevel();
    void setDocumentSplitHeadingLevel(int32_t value);
    /// <summary>
    /// Gets or sets specifies the encoding to use when exporting.
    /// </summary>
    utility::string_t getEncoding() const;
    bool encodingIsSet() const;
    void unsetEncoding();
    void setEncoding(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies whether to export built-in and custom document properties.
    /// </summary>
    bool isExportDocumentProperties() const;
    bool exportDocumentPropertiesIsSet() const;
    void unsetExportDocumentProperties();
    void setExportDocumentProperties(bool value);
    /// <summary>
    /// Gets or sets controls how drop-down form fields are saved to HTML. Default value is false.
    /// </summary>
    bool isExportDropDownFormFieldAsText() const;
    bool exportDropDownFormFieldAsTextIsSet() const;
    void unsetExportDropDownFormFieldAsText();
    void setExportDropDownFormFieldAsText(bool value);
    /// <summary>
    /// Gets or sets specifies whether font resources should be exported.
    /// </summary>
    bool isExportFontResources() const;
    bool exportFontResourcesIsSet() const;
    void unsetExportFontResources();
    void setExportFontResources(bool value);
    /// <summary>
    /// Gets or sets specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.
    /// </summary>
    bool isExportFontsAsBase64() const;
    bool exportFontsAsBase64IsSet() const;
    void unsetExportFontsAsBase64();
    void setExportFontsAsBase64(bool value);
    /// <summary>
    /// Gets or sets specifies how headers and footers are output.
    /// </summary>
    utility::string_t getExportHeadersFootersMode() const;
    bool exportHeadersFootersModeIsSet() const;
    void unsetExportHeadersFootersMode();
    void setExportHeadersFootersMode(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies whether images are saved in Base64 format.
    /// </summary>
    bool isExportImagesAsBase64() const;
    bool exportImagesAsBase64IsSet() const;
    void unsetExportImagesAsBase64();
    void setExportImagesAsBase64(bool value);
    /// <summary>
    /// Gets or sets specifies whether language information is exported.
    /// </summary>
    bool isExportLanguageInformation() const;
    bool exportLanguageInformationIsSet() const;
    void unsetExportLanguageInformation();
    void setExportLanguageInformation(bool value);
    /// <summary>
    /// Gets or sets controls how list labels are output.
    /// </summary>
    utility::string_t getExportListLabels() const;
    bool exportListLabelsIsSet() const;
    void unsetExportListLabels();
    void setExportListLabels(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies whether original URL should be used as the URL of the linked images. Default value is false.
    /// </summary>
    bool isExportOriginalUrlForLinkedImages() const;
    bool exportOriginalUrlForLinkedImagesIsSet() const;
    void unsetExportOriginalUrlForLinkedImages();
    void setExportOriginalUrlForLinkedImages(bool value);
    /// <summary>
    /// Gets or sets specifies whether page margins is exported to HTML, MHTML or EPUB. Default is false.
    /// </summary>
    bool isExportPageMargins() const;
    bool exportPageMarginsIsSet() const;
    void unsetExportPageMargins();
    void setExportPageMargins(bool value);
    /// <summary>
    /// Gets or sets specifies whether page setup is exported.
    /// </summary>
    bool isExportPageSetup() const;
    bool exportPageSetupIsSet() const;
    void unsetExportPageSetup();
    void setExportPageSetup(bool value);
    /// <summary>
    /// Gets or sets specifies whether font sizes should be output in relative units when saving.
    /// </summary>
    bool isExportRelativeFontSize() const;
    bool exportRelativeFontSizeIsSet() const;
    void unsetExportRelativeFontSize();
    void setExportRelativeFontSize(bool value);
    /// <summary>
    /// Gets or sets specifies whether to write the roundtrip information when saving to HTML Default value is true.
    /// </summary>
    bool isExportRoundtripInformation() const;
    bool exportRoundtripInformationIsSet() const;
    void unsetExportRoundtripInformation();
    void setExportRoundtripInformation(bool value);
    /// <summary>
    /// Gets or sets controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.
    /// </summary>
    bool isExportTextBoxAsSvg() const;
    bool exportTextBoxAsSvgIsSet() const;
    void unsetExportTextBoxAsSvg();
    void setExportTextBoxAsSvg(bool value);
    /// <summary>
    /// Gets or sets controls how text input form fields are saved.
    /// </summary>
    bool isExportTextInputFormFieldAsText() const;
    bool exportTextInputFormFieldAsTextIsSet() const;
    void unsetExportTextInputFormFieldAsText();
    void setExportTextInputFormFieldAsText(bool value);
    /// <summary>
    /// Gets or sets specifies whether to write page numbers to table of contents when saving.
    /// </summary>
    bool isExportTocPageNumbers() const;
    bool exportTocPageNumbersIsSet() const;
    void unsetExportTocPageNumbers();
    void setExportTocPageNumbers(bool value);
    /// <summary>
    /// Gets or sets specifies whether to write the DOCTYPE declaration when saving.
    /// </summary>
    bool isExportXhtmlTransitional() const;
    bool exportXhtmlTransitionalIsSet() const;
    void unsetExportXhtmlTransitional();
    void setExportXhtmlTransitional(bool value);
    /// <summary>
    /// Gets or sets controls which font resources need subsetting when saving.
    /// </summary>
    int32_t getFontResourcesSubsettingSizeThreshold() const;
    bool fontResourcesSubsettingSizeThresholdIsSet() const;
    void unsetFontResourcesSubsettingSizeThreshold();
    void setFontResourcesSubsettingSizeThreshold(int32_t value);
    /// <summary>
    /// Gets or sets specifies the physical folder where fonts are saved when exporting a document.
    /// </summary>
    utility::string_t getFontsFolder() const;
    bool fontsFolderIsSet() const;
    void unsetFontsFolder();
    void setFontsFolder(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct font URIs.
    /// </summary>
    utility::string_t getFontsFolderAlias() const;
    bool fontsFolderAliasIsSet() const;
    void unsetFontsFolderAlias();
    void setFontsFolderAlias(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies version of HTML standard that should be used when saving the document to HTML or MHTML. Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
    /// </summary>
    utility::string_t getHtmlVersion() const;
    bool htmlVersionIsSet() const;
    void unsetHtmlVersion();
    void setHtmlVersion(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the output resolution for images when exporting.
    /// </summary>
    int32_t getImageResolution() const;
    bool imageResolutionIsSet() const;
    void unsetImageResolution();
    void setImageResolution(int32_t value);
    /// <summary>
    /// Gets or sets specifies the physical folder where images are saved when exporting a document.
    /// </summary>
    utility::string_t getImagesFolder() const;
    bool imagesFolderIsSet() const;
    void unsetImagesFolder();
    void setImagesFolder(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct image URIs.
    /// </summary>
    utility::string_t getImagesFolderAlias() const;
    bool imagesFolderAliasIsSet() const;
    void unsetImagesFolderAlias();
    void setImagesFolderAlias(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies in what format metafiles are saved when exporting to HTML, MHTML, or EPUB. Default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.  Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion. Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
    /// </summary>
    utility::string_t getMetafileFormat() const;
    bool metafileFormatIsSet() const;
    void unsetMetafileFormat();
    void setMetafileFormat(utility::string_t value);
    /// <summary>
    /// Gets or sets controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
    /// </summary>
    utility::string_t getOfficeMathOutputMode() const;
    bool officeMathOutputModeIsSet() const;
    void unsetOfficeMathOutputMode();
    void setOfficeMathOutputMode(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies whether or not use pretty formats output.
    /// </summary>
    bool isPrettyFormat() const;
    bool prettyFormatIsSet() const;
    void unsetPrettyFormat();
    void setPrettyFormat(bool value);
    /// <summary>
    /// Gets or sets specifies whether font family names used in the document are resolved and substituted according to FontSettings when being written into HTML-based formats. default value is false.
    /// </summary>
    bool isResolveFontNames() const;
    bool resolveFontNamesIsSet() const;
    void unsetResolveFontNames();
    void setResolveFontNames(bool value);
    /// <summary>
    /// Gets or sets specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.
    /// </summary>
    utility::string_t getResourceFolder() const;
    bool resourceFolderIsSet() const;
    void unsetResourceFolder();
    void setResourceFolder(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.
    /// </summary>
    utility::string_t getResourceFolderAlias() const;
    bool resourceFolderAliasIsSet() const;
    void unsetResourceFolderAlias();
    void setResourceFolderAlias(utility::string_t value);
    /// <summary>
    /// Gets or sets specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting.
    /// </summary>
    bool isScaleImageToShapeSize() const;
    bool scaleImageToShapeSizeIsSet() const;
    void unsetScaleImageToShapeSize();
    void setScaleImageToShapeSize(bool value);
    /// <summary>
    /// Gets or sets controls how table, row and cell widths are exported.
    /// </summary>
    utility::string_t getTableWidthOutputMode() const;
    bool tableWidthOutputModeIsSet() const;
    void unsetTableWidthOutputMode();
    void setTableWidthOutputMode(utility::string_t value);

protected:
    bool m_AllowNegativeIndent;
    bool m_AllowNegativeIndentIsSet;
    utility::string_t m_CssClassNamePrefix;
    bool m_CssClassNamePrefixIsSet;
    utility::string_t m_CssStyleSheetFileName;
    bool m_CssStyleSheetFileNameIsSet;
    utility::string_t m_CssStyleSheetType;
    bool m_CssStyleSheetTypeIsSet;
    utility::string_t m_DocumentSplitCriteria;
    bool m_DocumentSplitCriteriaIsSet;
    int32_t m_DocumentSplitHeadingLevel;
    bool m_DocumentSplitHeadingLevelIsSet;
    utility::string_t m_Encoding;
    bool m_EncodingIsSet;
    bool m_ExportDocumentProperties;
    bool m_ExportDocumentPropertiesIsSet;
    bool m_ExportDropDownFormFieldAsText;
    bool m_ExportDropDownFormFieldAsTextIsSet;
    bool m_ExportFontResources;
    bool m_ExportFontResourcesIsSet;
    bool m_ExportFontsAsBase64;
    bool m_ExportFontsAsBase64IsSet;
    utility::string_t m_ExportHeadersFootersMode;
    bool m_ExportHeadersFootersModeIsSet;
    bool m_ExportImagesAsBase64;
    bool m_ExportImagesAsBase64IsSet;
    bool m_ExportLanguageInformation;
    bool m_ExportLanguageInformationIsSet;
    utility::string_t m_ExportListLabels;
    bool m_ExportListLabelsIsSet;
    bool m_ExportOriginalUrlForLinkedImages;
    bool m_ExportOriginalUrlForLinkedImagesIsSet;
    bool m_ExportPageMargins;
    bool m_ExportPageMarginsIsSet;
    bool m_ExportPageSetup;
    bool m_ExportPageSetupIsSet;
    bool m_ExportRelativeFontSize;
    bool m_ExportRelativeFontSizeIsSet;
    bool m_ExportRoundtripInformation;
    bool m_ExportRoundtripInformationIsSet;
    bool m_ExportTextBoxAsSvg;
    bool m_ExportTextBoxAsSvgIsSet;
    bool m_ExportTextInputFormFieldAsText;
    bool m_ExportTextInputFormFieldAsTextIsSet;
    bool m_ExportTocPageNumbers;
    bool m_ExportTocPageNumbersIsSet;
    bool m_ExportXhtmlTransitional;
    bool m_ExportXhtmlTransitionalIsSet;
    int32_t m_FontResourcesSubsettingSizeThreshold;
    bool m_FontResourcesSubsettingSizeThresholdIsSet;
    utility::string_t m_FontsFolder;
    bool m_FontsFolderIsSet;
    utility::string_t m_FontsFolderAlias;
    bool m_FontsFolderAliasIsSet;
    utility::string_t m_HtmlVersion;
    bool m_HtmlVersionIsSet;
    int32_t m_ImageResolution;
    bool m_ImageResolutionIsSet;
    utility::string_t m_ImagesFolder;
    bool m_ImagesFolderIsSet;
    utility::string_t m_ImagesFolderAlias;
    bool m_ImagesFolderAliasIsSet;
    utility::string_t m_MetafileFormat;
    bool m_MetafileFormatIsSet;
    utility::string_t m_OfficeMathOutputMode;
    bool m_OfficeMathOutputModeIsSet;
    bool m_PrettyFormat;
    bool m_PrettyFormatIsSet;
    bool m_ResolveFontNames;
    bool m_ResolveFontNamesIsSet;
    utility::string_t m_ResourceFolder;
    bool m_ResourceFolderIsSet;
    utility::string_t m_ResourceFolderAlias;
    bool m_ResourceFolderAliasIsSet;
    bool m_ScaleImageToShapeSize;
    bool m_ScaleImageToShapeSizeIsSet;
    utility::string_t m_TableWidthOutputMode;
    bool m_TableWidthOutputModeIsSet;
};

}
}
}
}
}

#endif /* ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_ */
