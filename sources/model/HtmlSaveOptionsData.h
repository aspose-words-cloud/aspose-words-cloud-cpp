/** --------------------------------------------------------------------------------------------------------------------
* <copyright company="Aspose" file="HtmlSaveOptionsData.h">
*   Copyright (c) 2019 Aspose.Words for Cloud
* </copyright>
* <summary>
*   Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
* 
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
* 
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* </summary> 
-------------------------------------------------------------------------------------------------------------------- **/

#ifndef ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_
#define ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_


#include "SaveOptionsData.h"
#include <cpprest/details/basic_types.h>

namespace aspose {
namespace words {
namespace cloud {
namespace api {
namespace models {

/// <summary>
/// container class for html save options.
/// </summary>
class  HtmlSaveOptionsData
    : public SaveOptionsData
{
public:
    HtmlSaveOptionsData();
    virtual ~HtmlSaveOptionsData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(const std::shared_ptr<MultipartFormData>& multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(const std::shared_ptr<MultipartFormData>& multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HtmlSaveOptionsData members

    /// <summary>
    /// Gets or sets specifies whether negative left and right indents of paragraphs are allowed (not normalized).
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isAllowNegativeIndent() const;
    bool allowNegativeIndentIsSet() const;
    void unsetAllowNegativeIndent();
    void setAllowNegativeIndent(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies a prefix which is added to all CSS class names. Default value is an empty string and generated CSS class names have no common prefix.  If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.This might be useful, for example, if you add custom CSS to generated documents and want to prevent class name conflicts. If the value is not null or empty, it must be a valid CSS identifier.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getCssClassNamePrefix() const;
    bool cssClassNamePrefixIsSet() const;
    void unsetCssClassNamePrefix();
    void setCssClassNamePrefix(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the name of the CSS file written when the document is exported to HTML.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getCssStyleSheetFileName() const;
    bool cssStyleSheetFileNameIsSet() const;
    void unsetCssStyleSheetFileName();
    void setCssStyleSheetFileName(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies how CSS styles are exported.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getCssStyleSheetType() const;
    bool cssStyleSheetTypeIsSet() const;
    void unsetCssStyleSheetType();
    void setCssStyleSheetType(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies how the document should be split when saving.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getDocumentSplitCriteria() const;
    bool documentSplitCriteriaIsSet() const;
    void unsetDocumentSplitCriteria();
    void setDocumentSplitCriteria(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the maximum level of headings at which to split the document.
    /// </summary>
    <DATA_TYPE_START>int?<DATA_TYPE_END> getDocumentSplitHeadingLevel() const;
    bool documentSplitHeadingLevelIsSet() const;
    void unsetDocumentSplitHeadingLevel();
    void setDocumentSplitHeadingLevel(<DATA_TYPE_START>int?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the encoding to use when exporting.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getEncoding() const;
    bool encodingIsSet() const;
    void unsetEncoding();
    void setEncoding(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether to export built-in and custom document properties.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportDocumentProperties() const;
    bool exportDocumentPropertiesIsSet() const;
    void unsetExportDocumentProperties();
    void setExportDocumentProperties(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how drop-down form fields are saved to HTML. Default value is false.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportDropDownFormFieldAsText() const;
    bool exportDropDownFormFieldAsTextIsSet() const;
    void unsetExportDropDownFormFieldAsText();
    void setExportDropDownFormFieldAsText(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether font resources should be exported.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportFontResources() const;
    bool exportFontResourcesIsSet() const;
    void unsetExportFontResources();
    void setExportFontResources(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportFontsAsBase64() const;
    bool exportFontsAsBase64IsSet() const;
    void unsetExportFontsAsBase64();
    void setExportFontsAsBase64(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies how headers and footers are output.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getExportHeadersFootersMode() const;
    bool exportHeadersFootersModeIsSet() const;
    void unsetExportHeadersFootersMode();
    void setExportHeadersFootersMode(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether images are saved in Base64 format.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportImagesAsBase64() const;
    bool exportImagesAsBase64IsSet() const;
    void unsetExportImagesAsBase64();
    void setExportImagesAsBase64(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether language information is exported.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportLanguageInformation() const;
    bool exportLanguageInformationIsSet() const;
    void unsetExportLanguageInformation();
    void setExportLanguageInformation(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how list labels are output.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getExportListLabels() const;
    bool exportListLabelsIsSet() const;
    void unsetExportListLabels();
    void setExportListLabels(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether original URL should be used as the URL of the linked images. Default value is false.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportOriginalUrlForLinkedImages() const;
    bool exportOriginalUrlForLinkedImagesIsSet() const;
    void unsetExportOriginalUrlForLinkedImages();
    void setExportOriginalUrlForLinkedImages(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether page margins is exported to HTML, MHTML or EPUB. Default is false.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportPageMargins() const;
    bool exportPageMarginsIsSet() const;
    void unsetExportPageMargins();
    void setExportPageMargins(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether page setup is exported.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportPageSetup() const;
    bool exportPageSetupIsSet() const;
    void unsetExportPageSetup();
    void setExportPageSetup(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether font sizes should be output in relative units when saving.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportRelativeFontSize() const;
    bool exportRelativeFontSizeIsSet() const;
    void unsetExportRelativeFontSize();
    void setExportRelativeFontSize(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether to write the roundtrip information when saving to HTML Default value is true.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportRoundtripInformation() const;
    bool exportRoundtripInformationIsSet() const;
    void unsetExportRoundtripInformation();
    void setExportRoundtripInformation(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportTextBoxAsSvg() const;
    bool exportTextBoxAsSvgIsSet() const;
    void unsetExportTextBoxAsSvg();
    void setExportTextBoxAsSvg(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how text input form fields are saved.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportTextInputFormFieldAsText() const;
    bool exportTextInputFormFieldAsTextIsSet() const;
    void unsetExportTextInputFormFieldAsText();
    void setExportTextInputFormFieldAsText(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether to write page numbers to table of contents when saving.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportTocPageNumbers() const;
    bool exportTocPageNumbersIsSet() const;
    void unsetExportTocPageNumbers();
    void setExportTocPageNumbers(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether to write the DOCTYPE declaration when saving.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isExportXhtmlTransitional() const;
    bool exportXhtmlTransitionalIsSet() const;
    void unsetExportXhtmlTransitional();
    void setExportXhtmlTransitional(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls which font resources need subsetting when saving.
    /// </summary>
    <DATA_TYPE_START>int?<DATA_TYPE_END> getFontResourcesSubsettingSizeThreshold() const;
    bool fontResourcesSubsettingSizeThresholdIsSet() const;
    void unsetFontResourcesSubsettingSizeThreshold();
    void setFontResourcesSubsettingSizeThreshold(<DATA_TYPE_START>int?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the physical folder where fonts are saved when exporting a document.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getFontsFolder() const;
    bool fontsFolderIsSet() const;
    void unsetFontsFolder();
    void setFontsFolder(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct font URIs.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getFontsFolderAlias() const;
    bool fontsFolderAliasIsSet() const;
    void unsetFontsFolderAlias();
    void setFontsFolderAlias(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies version of HTML standard that should be used when saving the document to HTML or MHTML. Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getHtmlVersion() const;
    bool htmlVersionIsSet() const;
    void unsetHtmlVersion();
    void setHtmlVersion(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the output resolution for images when exporting.
    /// </summary>
    <DATA_TYPE_START>int?<DATA_TYPE_END> getImageResolution() const;
    bool imageResolutionIsSet() const;
    void unsetImageResolution();
    void setImageResolution(<DATA_TYPE_START>int?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the physical folder where images are saved when exporting a document.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getImagesFolder() const;
    bool imagesFolderIsSet() const;
    void unsetImagesFolder();
    void setImagesFolder(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct image URIs.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getImagesFolderAlias() const;
    bool imagesFolderAliasIsSet() const;
    void unsetImagesFolderAlias();
    void setImagesFolderAlias(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies in what format metafiles are saved when exporting to HTML, MHTML, or EPUB. Default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.  Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion. Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getMetafileFormat() const;
    bool metafileFormatIsSet() const;
    void unsetMetafileFormat();
    void setMetafileFormat(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getOfficeMathOutputMode() const;
    bool officeMathOutputModeIsSet() const;
    void unsetOfficeMathOutputMode();
    void setOfficeMathOutputMode(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether or not use pretty formats output.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isPrettyFormat() const;
    bool prettyFormatIsSet() const;
    void unsetPrettyFormat();
    void setPrettyFormat(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether font family names used in the document are resolved and substituted according to FontSettings when being written into HTML-based formats. default value is false.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isResolveFontNames() const;
    bool resolveFontNamesIsSet() const;
    void unsetResolveFontNames();
    void setResolveFontNames(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getResourceFolder() const;
    bool resourceFolderIsSet() const;
    void unsetResourceFolder();
    void setResourceFolder(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getResourceFolderAlias() const;
    bool resourceFolderAliasIsSet() const;
    void unsetResourceFolderAlias();
    void setResourceFolderAlias(<DATA_TYPE_START>string<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting.
    /// </summary>
    <DATA_TYPE_START>bool?<DATA_TYPE_END> isScaleImageToShapeSize() const;
    bool scaleImageToShapeSizeIsSet() const;
    void unsetScaleImageToShapeSize();
    void setScaleImageToShapeSize(<DATA_TYPE_START>bool?<DATA_TYPE_END> value);
    /// <summary>
    /// Gets or sets controls how table, row and cell widths are exported.
    /// </summary>
    <DATA_TYPE_START>string<DATA_TYPE_END> getTableWidthOutputMode() const;
    bool tableWidthOutputModeIsSet() const;
    void unsetTableWidthOutputMode();
    void setTableWidthOutputMode(<DATA_TYPE_START>string<DATA_TYPE_END> value);

protected:
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_AllowNegativeIndent;
    bool m_AllowNegativeIndentIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_CssClassNamePrefix;
    bool m_CssClassNamePrefixIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_CssStyleSheetFileName;
    bool m_CssStyleSheetFileNameIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_CssStyleSheetType;
    bool m_CssStyleSheetTypeIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_DocumentSplitCriteria;
    bool m_DocumentSplitCriteriaIsSet;
    <DATA_TYPE_START>int?<DATA_TYPE_END> m_DocumentSplitHeadingLevel;
    bool m_DocumentSplitHeadingLevelIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_Encoding;
    bool m_EncodingIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportDocumentProperties;
    bool m_ExportDocumentPropertiesIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportDropDownFormFieldAsText;
    bool m_ExportDropDownFormFieldAsTextIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportFontResources;
    bool m_ExportFontResourcesIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportFontsAsBase64;
    bool m_ExportFontsAsBase64IsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ExportHeadersFootersMode;
    bool m_ExportHeadersFootersModeIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportImagesAsBase64;
    bool m_ExportImagesAsBase64IsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportLanguageInformation;
    bool m_ExportLanguageInformationIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ExportListLabels;
    bool m_ExportListLabelsIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportOriginalUrlForLinkedImages;
    bool m_ExportOriginalUrlForLinkedImagesIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportPageMargins;
    bool m_ExportPageMarginsIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportPageSetup;
    bool m_ExportPageSetupIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportRelativeFontSize;
    bool m_ExportRelativeFontSizeIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportRoundtripInformation;
    bool m_ExportRoundtripInformationIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportTextBoxAsSvg;
    bool m_ExportTextBoxAsSvgIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportTextInputFormFieldAsText;
    bool m_ExportTextInputFormFieldAsTextIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportTocPageNumbers;
    bool m_ExportTocPageNumbersIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ExportXhtmlTransitional;
    bool m_ExportXhtmlTransitionalIsSet;
    <DATA_TYPE_START>int?<DATA_TYPE_END> m_FontResourcesSubsettingSizeThreshold;
    bool m_FontResourcesSubsettingSizeThresholdIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_FontsFolder;
    bool m_FontsFolderIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_FontsFolderAlias;
    bool m_FontsFolderAliasIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_HtmlVersion;
    bool m_HtmlVersionIsSet;
    <DATA_TYPE_START>int?<DATA_TYPE_END> m_ImageResolution;
    bool m_ImageResolutionIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ImagesFolder;
    bool m_ImagesFolderIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ImagesFolderAlias;
    bool m_ImagesFolderAliasIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_MetafileFormat;
    bool m_MetafileFormatIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_OfficeMathOutputMode;
    bool m_OfficeMathOutputModeIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_PrettyFormat;
    bool m_PrettyFormatIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ResolveFontNames;
    bool m_ResolveFontNamesIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ResourceFolder;
    bool m_ResourceFolderIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_ResourceFolderAlias;
    bool m_ResourceFolderAliasIsSet;
    <DATA_TYPE_START>bool?<DATA_TYPE_END> m_ScaleImageToShapeSize;
    bool m_ScaleImageToShapeSizeIsSet;
    <DATA_TYPE_START>string<DATA_TYPE_END> m_TableWidthOutputMode;
    bool m_TableWidthOutputModeIsSet;
};

}
}
}
}
}

#endif /* ASPOSE_WORDS_CLOUD_API_MODELS_HtmlSaveOptionsData_H_ */
