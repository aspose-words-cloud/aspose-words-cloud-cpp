/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TableRowFormat.h
 *
 * Represents all formatting for a table row.
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_TableRowFormat_H_
#define IO_SWAGGER_CLIENT_MODEL_TableRowFormat_H_


#include <cpprest/details/basic_types.h>
#include "LinkElement.h"
#include "WordsApiLink.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Represents all formatting for a table row.
/// </summary>
class  TableRowFormat
    : public LinkElement
{
public:
    TableRowFormat();
    virtual ~TableRowFormat();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TableRowFormat members

    /// <summary>
    /// True if the text in a table row is allowed to split across a page break.
    /// </summary>
    bool isAllowBreakAcrossPages() const;
    bool allowBreakAcrossPagesIsSet() const;
    void unsetAllowBreakAcrossPages();
    void setAllowBreakAcrossPages(bool value);
    /// <summary>
    /// True if the row is repeated as a table heading on every page when the table spans more than one page.
    /// </summary>
    bool isHeadingFormat() const;
    bool headingFormatIsSet() const;
    void unsetHeadingFormat();
    void setHeadingFormat(bool value);
    /// <summary>
    /// Gets or sets the height of the table row in points.
    /// </summary>
    double getHeight() const;
    bool heightIsSet() const;
    void unsetHeight();
    void setHeight(double value);
    /// <summary>
    /// Gets or sets the rule for determining the height of the table row.
    /// </summary>
    utility::string_t getHeightRule() const;
    bool heightRuleIsSet() const;
    void unsetHeightRule();
    void setHeightRule(utility::string_t value);

protected:
    bool m_AllowBreakAcrossPages;
    bool m_AllowBreakAcrossPagesIsSet;
    bool m_HeadingFormat;
    bool m_HeadingFormatIsSet;
    double m_Height;
    bool m_HeightIsSet;
    utility::string_t m_HeightRule;
    bool m_HeightRuleIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_TableRowFormat_H_ */
