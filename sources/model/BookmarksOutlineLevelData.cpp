/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BookmarksOutlineLevelData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BookmarksOutlineLevelData::BookmarksOutlineLevelData()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_BookmarksOutlineLevel = 0;
}

BookmarksOutlineLevelData::~BookmarksOutlineLevelData()
{
}

void BookmarksOutlineLevelData::validate()
{
    // TODO: implement validation
}

web::json::value BookmarksOutlineLevelData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("Name")] = ModelBase::toJson(m_Name);
    }
    val[utility::conversions::to_string_t("BookmarksOutlineLevel")] = ModelBase::toJson(m_BookmarksOutlineLevel);

    return val;
}

void BookmarksOutlineLevelData::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("Name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("Name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    setBookmarksOutlineLevel(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("BookmarksOutlineLevel")]));
}

void BookmarksOutlineLevelData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Name"), m_Name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BookmarksOutlineLevel"), m_BookmarksOutlineLevel));
}

void BookmarksOutlineLevelData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Name"))));
    }
    setBookmarksOutlineLevel(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("BookmarksOutlineLevel"))));
}

utility::string_t BookmarksOutlineLevelData::getName() const
{
    return m_Name;
}


void BookmarksOutlineLevelData::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BookmarksOutlineLevelData::nameIsSet() const
{
    return m_NameIsSet;
}

void BookmarksOutlineLevelData::unsetName()
{
    m_NameIsSet = false;
}

int32_t BookmarksOutlineLevelData::getBookmarksOutlineLevel() const
{
    return m_BookmarksOutlineLevel;
}


void BookmarksOutlineLevelData::setBookmarksOutlineLevel(int32_t value)
{
    m_BookmarksOutlineLevel = value;
    
}
}
}
}
}

