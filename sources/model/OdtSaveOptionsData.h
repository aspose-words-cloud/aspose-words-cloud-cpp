/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * OdtSaveOptionsData.h
 *
 * container class for odt/ott save options
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_OdtSaveOptionsData_H_
#define IO_SWAGGER_CLIENT_MODEL_OdtSaveOptionsData_H_


#include "SaveOptionsData.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// container class for odt/ott save options
/// </summary>
class  OdtSaveOptionsData
    : public SaveOptionsData
{
public:
    OdtSaveOptionsData();
    virtual ~OdtSaveOptionsData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OdtSaveOptionsData members

    /// <summary>
    /// Specifies whether export should correspond to ODT specification 1.1 strictly
    /// </summary>
    bool isIsStrictSchema11() const;
    bool isStrictSchema11IsSet() const;
    void unsetIsStrictSchema11();
    void setIsStrictSchema11(bool value);
    /// <summary>
    /// Allows to specify units of measure to apply to document content. The default value is Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters  Open Office uses centimeters when specifying lengths, widths and other measurable formatting and content properties in documents whereas MS Office uses inches.
    /// </summary>
    utility::string_t getMeasureUnit() const;
    bool measureUnitIsSet() const;
    void unsetMeasureUnit();
    void setMeasureUnit(utility::string_t value);
    /// <summary>
    /// Specifies whether or not use pretty formats output
    /// </summary>
    bool isPrettyFormat() const;
    bool prettyFormatIsSet() const;
    void unsetPrettyFormat();
    void setPrettyFormat(bool value);

protected:
    bool m_IsStrictSchema11;
    bool m_IsStrictSchema11IsSet;
    utility::string_t m_MeasureUnit;
    bool m_MeasureUnitIsSet;
    bool m_PrettyFormat;
    bool m_PrettyFormatIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_OdtSaveOptionsData_H_ */
