/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OfficeMathObjectResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OfficeMathObjectResponse::OfficeMathObjectResponse()
{
    m_OfficeMathObjectIsSet = false;
}

OfficeMathObjectResponse::~OfficeMathObjectResponse()
{
}

void OfficeMathObjectResponse::validate()
{
    // TODO: implement validation
}

web::json::value OfficeMathObjectResponse::toJson() const
{
    web::json::value val = this->AsposeResponse::toJson();

    if(m_OfficeMathObjectIsSet)
    {
        val[utility::conversions::to_string_t("OfficeMathObject")] = ModelBase::toJson(m_OfficeMathObject);
    }

    return val;
}

void OfficeMathObjectResponse::fromJson(web::json::value& val)
{
    this->AsposeResponse::fromJson(val);

    if(val.has_field(utility::conversions::to_string_t("OfficeMathObject")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("OfficeMathObject")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfficeMathObject> newItem(new OfficeMathObject());
            newItem->fromJson(fieldValue);
            setOfficeMathObject( newItem );
        }
    }
}

void OfficeMathObjectResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Code"), m_Code));
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Status"), m_Status));
        
    }
    if(m_OfficeMathObjectIsSet)
    {
        if (m_OfficeMathObject.get())
        {
            m_OfficeMathObject->toMultipart(multipart, utility::conversions::to_string_t("OfficeMathObject."));
        }
        
    }
}

void OfficeMathObjectResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Code"))));
    if(multipart->hasContent(utility::conversions::to_string_t("Status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("Status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("OfficeMathObject")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("OfficeMathObject")))
        {
            std::shared_ptr<OfficeMathObject> newItem(new OfficeMathObject());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("OfficeMathObject."));
            setOfficeMathObject( newItem );
        }
    }
}

std::shared_ptr<OfficeMathObject> OfficeMathObjectResponse::getOfficeMathObject() const
{
    return m_OfficeMathObject;
}


void OfficeMathObjectResponse::setOfficeMathObject(std::shared_ptr<OfficeMathObject> value)
{
    m_OfficeMathObject = value;
    m_OfficeMathObjectIsSet = true;
}
bool OfficeMathObjectResponse::officeMathObjectIsSet() const
{
    return m_OfficeMathObjectIsSet;
}

void OfficeMathObjectResponse::unsetOfficeMathObject()
{
    m_OfficeMathObjectIsSet = false;
}

}
}
}
}

