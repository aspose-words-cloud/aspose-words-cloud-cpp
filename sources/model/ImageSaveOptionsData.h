/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ImageSaveOptionsData.h
 *
 * Container abstract class for image save options
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_ImageSaveOptionsData_H_
#define IO_SWAGGER_CLIENT_MODEL_ImageSaveOptionsData_H_


#include "MetafileRenderingOptionsData.h"
#include "FixedPageSaveOptionsData.h"
#include <cpprest/details/basic_types.h>
#include "GraphicsQualityOptionsData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Container abstract class for image save options
/// </summary>
class  ImageSaveOptionsData
    : public FixedPageSaveOptionsData
{
public:
    ImageSaveOptionsData();
    virtual ~ImageSaveOptionsData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImageSaveOptionsData members

    /// <summary>
    /// Allows to specify additional System.Drawing.Graphics quality options.
    /// </summary>
    std::shared_ptr<GraphicsQualityOptionsData> getGraphicsQualityOptions() const;
    bool graphicsQualityOptionsIsSet() const;
    void unsetGraphicsQualityOptions();
    void setGraphicsQualityOptions(std::shared_ptr<GraphicsQualityOptionsData> value);
    /// <summary>
    /// Gets or sets the horizontal resolution for the generated images, in dots per inch.  This property has effect only when saving to raster image formats. The default value is 96.
    /// </summary>
    double getHorizontalResolution() const;
    bool horizontalResolutionIsSet() const;
    void unsetHorizontalResolution();
    void setHorizontalResolution(double value);
    /// <summary>
    /// Brightness of image
    /// </summary>
    double getImageBrightness() const;
    bool imageBrightnessIsSet() const;
    void unsetImageBrightness();
    void setImageBrightness(double value);
    /// <summary>
    /// Color mode of image
    /// </summary>
    utility::string_t getImageColorMode() const;
    bool imageColorModeIsSet() const;
    void unsetImageColorMode();
    void setImageColorMode(utility::string_t value);
    /// <summary>
    /// Contrast of image
    /// </summary>
    double getImageContrast() const;
    bool imageContrastIsSet() const;
    void unsetImageContrast();
    void setImageContrast(double value);
    /// <summary>
    /// Background (paper) color of image
    /// </summary>
    utility::string_t getPaperColor() const;
    bool paperColorIsSet() const;
    void unsetPaperColor();
    void setPaperColor(utility::string_t value);
    /// <summary>
    /// Pixel format of image
    /// </summary>
    utility::string_t getPixelFormat() const;
    bool pixelFormatIsSet() const;
    void unsetPixelFormat();
    void setPixelFormat(utility::string_t value);
    /// <summary>
    /// Sets both horizontal and vertical resolution for the generated images, in dots per inch.  This property has effect only when saving to raster image formats. The default value is 96.
    /// </summary>
    double getResolution() const;
    bool resolutionIsSet() const;
    void unsetResolution();
    void setResolution(double value);
    /// <summary>
    /// Zoom factor of image
    /// </summary>
    double getScale() const;
    bool scaleIsSet() const;
    void unsetScale();
    void setScale(double value);
    /// <summary>
    /// Determine whether or not to use anti-aliasing for rendering
    /// </summary>
    bool isUseAntiAliasing() const;
    bool useAntiAliasingIsSet() const;
    void unsetUseAntiAliasing();
    void setUseAntiAliasing(bool value);
    /// <summary>
    /// Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.
    /// </summary>
    bool isUseGdiEmfRenderer() const;
    bool useGdiEmfRendererIsSet() const;
    void unsetUseGdiEmfRenderer();
    void setUseGdiEmfRenderer(bool value);
    /// <summary>
    /// Determine whether or not to use high quality (i.e. slow) rendering algorithms
    /// </summary>
    bool isUseHighQualityRendering() const;
    bool useHighQualityRenderingIsSet() const;
    void unsetUseHighQualityRendering();
    void setUseHighQualityRendering(bool value);
    /// <summary>
    /// Gets or sets the vertical resolution for the generated images, in dots per inch.  This property has effect only when saving to raster image formats. The default value is 96.
    /// </summary>
    double getVerticalResolution() const;
    bool verticalResolutionIsSet() const;
    void unsetVerticalResolution();
    void setVerticalResolution(double value);

protected:
    std::shared_ptr<GraphicsQualityOptionsData> m_GraphicsQualityOptions;
    bool m_GraphicsQualityOptionsIsSet;
    double m_HorizontalResolution;
    bool m_HorizontalResolutionIsSet;
    double m_ImageBrightness;
    bool m_ImageBrightnessIsSet;
    utility::string_t m_ImageColorMode;
    bool m_ImageColorModeIsSet;
    double m_ImageContrast;
    bool m_ImageContrastIsSet;
    utility::string_t m_PaperColor;
    bool m_PaperColorIsSet;
    utility::string_t m_PixelFormat;
    bool m_PixelFormatIsSet;
    double m_Resolution;
    bool m_ResolutionIsSet;
    double m_Scale;
    bool m_ScaleIsSet;
    bool m_UseAntiAliasing;
    bool m_UseAntiAliasingIsSet;
    bool m_UseGdiEmfRenderer;
    bool m_UseGdiEmfRendererIsSet;
    bool m_UseHighQualityRendering;
    bool m_UseHighQualityRenderingIsSet;
    double m_VerticalResolution;
    bool m_VerticalResolutionIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_ImageSaveOptionsData_H_ */
