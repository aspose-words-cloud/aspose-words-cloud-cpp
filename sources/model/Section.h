/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Section.h
 *
 * Section element
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Section_H_
#define IO_SWAGGER_CLIENT_MODEL_Section_H_


#include "NodeLink.h"
#include "LinkElement.h"
#include <vector>
#include "WordsApiLink.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Section element
/// </summary>
class  Section
    : public LinkElement
{
public:
    Section();
    virtual ~Section();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Section members

    /// <summary>
    /// Child nodes.
    /// </summary>
    std::vector<std::shared_ptr<NodeLink>>& getChildNodes();
    bool childNodesIsSet() const;
    void unsetChildNodes();
    void setChildNodes(std::vector<std::shared_ptr<NodeLink>> value);
    /// <summary>
    /// Link to HeaderFooters resource
    /// </summary>
    std::shared_ptr<LinkElement> getHeaderFooters() const;
    bool headerFootersIsSet() const;
    void unsetHeaderFooters();
    void setHeaderFooters(std::shared_ptr<LinkElement> value);
    /// <summary>
    /// Link to PageSetup resource
    /// </summary>
    std::shared_ptr<LinkElement> getPageSetup() const;
    bool pageSetupIsSet() const;
    void unsetPageSetup();
    void setPageSetup(std::shared_ptr<LinkElement> value);
    /// <summary>
    /// Link to Paragraphs resource
    /// </summary>
    std::shared_ptr<LinkElement> getParagraphs() const;
    bool paragraphsIsSet() const;
    void unsetParagraphs();
    void setParagraphs(std::shared_ptr<LinkElement> value);
    /// <summary>
    /// Link to Tables resource
    /// </summary>
    std::shared_ptr<LinkElement> getTables() const;
    bool tablesIsSet() const;
    void unsetTables();
    void setTables(std::shared_ptr<LinkElement> value);

protected:
    std::vector<std::shared_ptr<NodeLink>> m_ChildNodes;
    bool m_ChildNodesIsSet;
    std::shared_ptr<LinkElement> m_HeaderFooters;
    bool m_HeaderFootersIsSet;
    std::shared_ptr<LinkElement> m_PageSetup;
    bool m_PageSetupIsSet;
    std::shared_ptr<LinkElement> m_Paragraphs;
    bool m_ParagraphsIsSet;
    std::shared_ptr<LinkElement> m_Tables;
    bool m_TablesIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Section_H_ */
