/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 18.9.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PdfEncryptionDetailsData.h
 *
 * container class for details of encryption
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_PdfEncryptionDetailsData_H_
#define IO_SWAGGER_CLIENT_MODEL_PdfEncryptionDetailsData_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// container class for details of encryption
/// </summary>
class  PdfEncryptionDetailsData
    : public ModelBase
{
public:
    PdfEncryptionDetailsData();
    virtual ~PdfEncryptionDetailsData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PdfEncryptionDetailsData members

    /// <summary>
    /// Specifies the encryption algorithm to use
    /// </summary>
    utility::string_t getEncryptionAlgorithm() const;
    bool encryptionAlgorithmIsSet() const;
    void unsetEncryptionAlgorithm();
    void setEncryptionAlgorithm(utility::string_t value);
    /// <summary>
    /// Specifies the owner password for the encrypted PDF document
    /// </summary>
    utility::string_t getOwnerPassword() const;
    bool ownerPasswordIsSet() const;
    void unsetOwnerPassword();
    void setOwnerPassword(utility::string_t value);
    /// <summary>
    /// Specifies the operations that are allowed to a user on an encrypted PDF document        
    /// </summary>
    utility::string_t getPermissions() const;
    bool permissionsIsSet() const;
    void unsetPermissions();
    void setPermissions(utility::string_t value);
    /// <summary>
    /// Specifies the user password required for opening the encrypted PDF document
    /// </summary>
    utility::string_t getUserPassword() const;
    bool userPasswordIsSet() const;
    void unsetUserPassword();
    void setUserPassword(utility::string_t value);

protected:
    utility::string_t m_EncryptionAlgorithm;
    bool m_EncryptionAlgorithmIsSet;
    utility::string_t m_OwnerPassword;
    bool m_OwnerPasswordIsSet;
    utility::string_t m_Permissions;
    bool m_PermissionsIsSet;
    utility::string_t m_UserPassword;
    bool m_UserPasswordIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_PdfEncryptionDetailsData_H_ */
