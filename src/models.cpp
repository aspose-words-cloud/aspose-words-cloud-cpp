/** --------------------------------------------------------------------------------------------------------------------
* <copyright company="Aspose" file="models.cpp">
*   Copyright (c) 2021 Aspose.Words for Cloud
* </copyright>
* <summary>
*   Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
* 
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
* 
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* </summary> 
-------------------------------------------------------------------------------------------------------------------- **/
#include "aspose_words_cloud.h"

// USE THIRD PARTY LIBS ONLY IN CPP FILES!!!
#include "../thirdparty/json.hpp"
#include "../thirdparty/utf8.h"

namespace aspose::words::cloud::models {
    inline std::wstring convertUtf8(const std::string& value)
    {
        std::wstring result;
        ::utf8::utf8to16(value.begin(), value.end(), back_inserter(result));
        return result;
    }

    inline std::string convertUtf16(const std::wstring& value)
    {
        std::string result;
        ::utf8::utf16to8(value.begin(), value.end(), back_inserter(result));
        return result;
    }

    inline std::string reportBuildOptionsToString(ReportBuildOptions value)
    {
        if (value == ReportBuildOptions::NONE) return "None";
        if (value == ReportBuildOptions::ALLOW_MISSING_MEMBERS) return "AllowMissingMembers";
        if (value == ReportBuildOptions::REMOVE_EMPTY_PARAGRAPHS) return "RemoveEmptyParagraphs";
        if (value == ReportBuildOptions::INLINE_ERROR_MESSAGES) return "InlineErrorMessages";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline ReportBuildOptions reportBuildOptionsFromString(const std::string& value)
    {
        if (value == "None") return ReportBuildOptions::NONE;
        if (value == "AllowMissingMembers") return ReportBuildOptions::ALLOW_MISSING_MEMBERS;
        if (value == "RemoveEmptyParagraphs") return ReportBuildOptions::REMOVE_EMPTY_PARAGRAPHS;
        if (value == "InlineErrorMessages") return ReportBuildOptions::INLINE_ERROR_MESSAGES;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }


    /*
     * ApiError implementation
     */
    void ApiError::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Code) {
            json["Code"] = convertUtf16(*m_Code);
        }
        if (m_DateTime) {
            json["DateTime"] = convertUtf16(*m_DateTime);
        }
        if (m_Description) {
            json["Description"] = convertUtf16(*m_Description);
        }
        if (m_InnerError) {
            m_InnerError->toJson(&json["InnerError"]);
        }
        if (m_Message) {
            json["Message"] = convertUtf16(*m_Message);
        }
    }

    void ApiError::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Code") && !json["Code"].is_null()) {
            m_Code = std::make_shared< std::wstring >(
                convertUtf8( json["Code"].get< std::string >() )
            );
        }
        if (json.contains("DateTime") && !json["DateTime"].is_null()) {
            m_DateTime = std::make_shared< std::wstring >(
                convertUtf8( json["DateTime"].get< std::string >() )
            );
        }
        if (json.contains("Description") && !json["Description"].is_null()) {
            m_Description = std::make_shared< std::wstring >(
                convertUtf8( json["Description"].get< std::string >() )
            );
        }
        if (json.contains("InnerError") && !json["InnerError"].is_null()) {
            m_InnerError = std::make_shared< aspose::words::cloud::models::ApiError >();
            m_InnerError->fromJson(&json["InnerError"]);
        }
        if (json.contains("Message") && !json["Message"].is_null()) {
            m_Message = std::make_shared< std::wstring >(
                convertUtf8( json["Message"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ApiError::getCode() const
    {
        return m_Code;
    }

    void ApiError::setCode(std::shared_ptr< std::wstring > value)
    {
        m_Code = value;
    }

    std::shared_ptr< std::wstring > ApiError::getDateTime() const
    {
        return m_DateTime;
    }

    void ApiError::setDateTime(std::shared_ptr< std::wstring > value)
    {
        m_DateTime = value;
    }

    std::shared_ptr< std::wstring > ApiError::getDescription() const
    {
        return m_Description;
    }

    void ApiError::setDescription(std::shared_ptr< std::wstring > value)
    {
        m_Description = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ApiError > ApiError::getInnerError() const
    {
        return m_InnerError;
    }

    void ApiError::setInnerError(std::shared_ptr< aspose::words::cloud::models::ApiError > value)
    {
        m_InnerError = value;
    }

    std::shared_ptr< std::wstring > ApiError::getMessage() const
    {
        return m_Message;
    }

    void ApiError::setMessage(std::shared_ptr< std::wstring > value)
    {
        m_Message = value;
    }


    /*
     * AvailableFontsResponse implementation
     */
    void AvailableFontsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AdditionalFonts) {
            json["AdditionalFonts"] = ::nlohmann::json::array();
            for (auto& element : *m_AdditionalFonts) {
                element->toJson(&json["AdditionalFonts"].emplace_back());
            }
        }
        if (m_CustomFonts) {
            json["CustomFonts"] = ::nlohmann::json::array();
            for (auto& element : *m_CustomFonts) {
                element->toJson(&json["CustomFonts"].emplace_back());
            }
        }
        if (m_SystemFonts) {
            json["SystemFonts"] = ::nlohmann::json::array();
            for (auto& element : *m_SystemFonts) {
                element->toJson(&json["SystemFonts"].emplace_back());
            }
        }
    }

    void AvailableFontsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AdditionalFonts") && !json["AdditionalFonts"].is_null()) {
            m_AdditionalFonts = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> >();
            for (auto& element : json["AdditionalFonts"]) {
                m_AdditionalFonts->emplace_back(std::make_shared< aspose::words::cloud::models::FontInfo >())->fromJson(&element);
            }
        }
        if (json.contains("CustomFonts") && !json["CustomFonts"].is_null()) {
            m_CustomFonts = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> >();
            for (auto& element : json["CustomFonts"]) {
                m_CustomFonts->emplace_back(std::make_shared< aspose::words::cloud::models::FontInfo >())->fromJson(&element);
            }
        }
        if (json.contains("SystemFonts") && !json["SystemFonts"].is_null()) {
            m_SystemFonts = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> >();
            for (auto& element : json["SystemFonts"]) {
                m_SystemFonts->emplace_back(std::make_shared< aspose::words::cloud::models::FontInfo >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > AvailableFontsResponse::getAdditionalFonts() const
    {
        return m_AdditionalFonts;
    }

    void AvailableFontsResponse::setAdditionalFonts(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > value)
    {
        m_AdditionalFonts = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > AvailableFontsResponse::getCustomFonts() const
    {
        return m_CustomFonts;
    }

    void AvailableFontsResponse::setCustomFonts(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > value)
    {
        m_CustomFonts = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > AvailableFontsResponse::getSystemFonts() const
    {
        return m_SystemFonts;
    }

    void AvailableFontsResponse::setSystemFonts(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FontInfo>> > value)
    {
        m_SystemFonts = value;
    }


    /*
     * BmpSaveOptionsData implementation
     */
    void BmpSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
    }

    void BmpSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
    }




    /*
     * Bookmark implementation
     */
    void Bookmark::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void Bookmark::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Bookmark::getName() const
    {
        return m_Name;
    }

    void Bookmark::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > Bookmark::getText() const
    {
        return m_Text;
    }

    void Bookmark::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * BookmarkData implementation
     */
    void BookmarkData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void BookmarkData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > BookmarkData::getName() const
    {
        return m_Name;
    }

    void BookmarkData::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > BookmarkData::getText() const
    {
        return m_Text;
    }

    void BookmarkData::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * BookmarkResponse implementation
     */
    void BookmarkResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Bookmark) {
            m_Bookmark->toJson(&json["Bookmark"]);
        }
    }

    void BookmarkResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Bookmark") && !json["Bookmark"].is_null()) {
            m_Bookmark = std::make_shared< aspose::words::cloud::models::Bookmark >();
            m_Bookmark->fromJson(&json["Bookmark"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Bookmark > BookmarkResponse::getBookmark() const
    {
        return m_Bookmark;
    }

    void BookmarkResponse::setBookmark(std::shared_ptr< aspose::words::cloud::models::Bookmark > value)
    {
        m_Bookmark = value;
    }


    /*
     * Bookmarks implementation
     */
    void Bookmarks::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BookmarkList) {
            json["BookmarkList"] = ::nlohmann::json::array();
            for (auto& element : *m_BookmarkList) {
                element->toJson(&json["BookmarkList"].emplace_back());
            }
        }
    }

    void Bookmarks::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BookmarkList") && !json["BookmarkList"].is_null()) {
            m_BookmarkList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Bookmark>> >();
            for (auto& element : json["BookmarkList"]) {
                m_BookmarkList->emplace_back(std::make_shared< aspose::words::cloud::models::Bookmark >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Bookmark>> > Bookmarks::getBookmarkList() const
    {
        return m_BookmarkList;
    }

    void Bookmarks::setBookmarkList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Bookmark>> > value)
    {
        m_BookmarkList = value;
    }


    /*
     * BookmarksOutlineLevelData implementation
     */
    void BookmarksOutlineLevelData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BookmarksOutlineLevel) {
            json["BookmarksOutlineLevel"] = *m_BookmarksOutlineLevel;
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
    }

    void BookmarksOutlineLevelData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BookmarksOutlineLevel") && !json["BookmarksOutlineLevel"].is_null()) {
            m_BookmarksOutlineLevel = std::make_shared< int32_t >(
                json["BookmarksOutlineLevel"].get< int32_t >()
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< int32_t > BookmarksOutlineLevelData::getBookmarksOutlineLevel() const
    {
        return m_BookmarksOutlineLevel;
    }

    void BookmarksOutlineLevelData::setBookmarksOutlineLevel(std::shared_ptr< int32_t > value)
    {
        m_BookmarksOutlineLevel = value;
    }

    std::shared_ptr< std::wstring > BookmarksOutlineLevelData::getName() const
    {
        return m_Name;
    }

    void BookmarksOutlineLevelData::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }


    /*
     * BookmarksResponse implementation
     */
    void BookmarksResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Bookmarks) {
            m_Bookmarks->toJson(&json["Bookmarks"]);
        }
    }

    void BookmarksResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Bookmarks") && !json["Bookmarks"].is_null()) {
            m_Bookmarks = std::make_shared< aspose::words::cloud::models::Bookmarks >();
            m_Bookmarks->fromJson(&json["Bookmarks"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Bookmarks > BookmarksResponse::getBookmarks() const
    {
        return m_Bookmarks;
    }

    void BookmarksResponse::setBookmarks(std::shared_ptr< aspose::words::cloud::models::Bookmarks > value)
    {
        m_Bookmarks = value;
    }


    /*
     * Border implementation
     */
    inline std::string borderBorderTypeToString(aspose::words::cloud::models::Border::BorderType value)
    {
        if (value == aspose::words::cloud::models::Border::BorderType::BOTTOM) return "Bottom";
        if (value == aspose::words::cloud::models::Border::BorderType::LEFT) return "Left";
        if (value == aspose::words::cloud::models::Border::BorderType::RIGHT) return "Right";
        if (value == aspose::words::cloud::models::Border::BorderType::TOP) return "Top";
        if (value == aspose::words::cloud::models::Border::BorderType::HORIZONTAL) return "Horizontal";
        if (value == aspose::words::cloud::models::Border::BorderType::VERTICAL) return "Vertical";
        if (value == aspose::words::cloud::models::Border::BorderType::DIAGONAL_DOWN) return "DiagonalDown";
        if (value == aspose::words::cloud::models::Border::BorderType::DIAGONAL_UP) return "DiagonalUp";
        if (value == aspose::words::cloud::models::Border::BorderType::NONE) return "None";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Border::BorderType borderBorderTypeFromString(const std::string& value)
    {
        if (value == "Bottom") return aspose::words::cloud::models::Border::BorderType::BOTTOM;
        if (value == "Left") return aspose::words::cloud::models::Border::BorderType::LEFT;
        if (value == "Right") return aspose::words::cloud::models::Border::BorderType::RIGHT;
        if (value == "Top") return aspose::words::cloud::models::Border::BorderType::TOP;
        if (value == "Horizontal") return aspose::words::cloud::models::Border::BorderType::HORIZONTAL;
        if (value == "Vertical") return aspose::words::cloud::models::Border::BorderType::VERTICAL;
        if (value == "DiagonalDown") return aspose::words::cloud::models::Border::BorderType::DIAGONAL_DOWN;
        if (value == "DiagonalUp") return aspose::words::cloud::models::Border::BorderType::DIAGONAL_UP;
        if (value == "None") return aspose::words::cloud::models::Border::BorderType::NONE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string borderLineStyleToString(aspose::words::cloud::models::Border::LineStyle value)
    {
        if (value == aspose::words::cloud::models::Border::LineStyle::NONE) return "None";
        if (value == aspose::words::cloud::models::Border::LineStyle::SINGLE) return "Single";
        if (value == aspose::words::cloud::models::Border::LineStyle::THICK) return "Thick";
        if (value == aspose::words::cloud::models::Border::LineStyle::DOUBLE) return "Double";
        if (value == aspose::words::cloud::models::Border::LineStyle::HAIRLINE) return "Hairline";
        if (value == aspose::words::cloud::models::Border::LineStyle::DOT) return "Dot";
        if (value == aspose::words::cloud::models::Border::LineStyle::DASH_LARGE_GAP) return "DashLargeGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::DOT_DASH) return "DotDash";
        if (value == aspose::words::cloud::models::Border::LineStyle::DOT_DOT_DASH) return "DotDotDash";
        if (value == aspose::words::cloud::models::Border::LineStyle::TRIPLE) return "Triple";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_SMALL_GAP) return "ThinThickSmallGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THICK_THIN_SMALL_GAP) return "ThickThinSmallGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_SMALL_GAP) return "ThinThickThinSmallGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_MEDIUM_GAP) return "ThinThickMediumGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THICK_THIN_MEDIUM_GAP) return "ThickThinMediumGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_MEDIUM_GAP) return "ThinThickThinMediumGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_LARGE_GAP) return "ThinThickLargeGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THICK_THIN_LARGE_GAP) return "ThickThinLargeGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_LARGE_GAP) return "ThinThickThinLargeGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::WAVE) return "Wave";
        if (value == aspose::words::cloud::models::Border::LineStyle::DOUBLE_WAVE) return "DoubleWave";
        if (value == aspose::words::cloud::models::Border::LineStyle::DASH_SMALL_GAP) return "DashSmallGap";
        if (value == aspose::words::cloud::models::Border::LineStyle::DASH_DOT_STROKER) return "DashDotStroker";
        if (value == aspose::words::cloud::models::Border::LineStyle::EMBOSS3_D) return "Emboss3D";
        if (value == aspose::words::cloud::models::Border::LineStyle::ENGRAVE3_D) return "Engrave3D";
        if (value == aspose::words::cloud::models::Border::LineStyle::OUTSET) return "Outset";
        if (value == aspose::words::cloud::models::Border::LineStyle::INSET) return "Inset";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Border::LineStyle borderLineStyleFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::Border::LineStyle::NONE;
        if (value == "Single") return aspose::words::cloud::models::Border::LineStyle::SINGLE;
        if (value == "Thick") return aspose::words::cloud::models::Border::LineStyle::THICK;
        if (value == "Double") return aspose::words::cloud::models::Border::LineStyle::DOUBLE;
        if (value == "Hairline") return aspose::words::cloud::models::Border::LineStyle::HAIRLINE;
        if (value == "Dot") return aspose::words::cloud::models::Border::LineStyle::DOT;
        if (value == "DashLargeGap") return aspose::words::cloud::models::Border::LineStyle::DASH_LARGE_GAP;
        if (value == "DotDash") return aspose::words::cloud::models::Border::LineStyle::DOT_DASH;
        if (value == "DotDotDash") return aspose::words::cloud::models::Border::LineStyle::DOT_DOT_DASH;
        if (value == "Triple") return aspose::words::cloud::models::Border::LineStyle::TRIPLE;
        if (value == "ThinThickSmallGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_SMALL_GAP;
        if (value == "ThickThinSmallGap") return aspose::words::cloud::models::Border::LineStyle::THICK_THIN_SMALL_GAP;
        if (value == "ThinThickThinSmallGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_SMALL_GAP;
        if (value == "ThinThickMediumGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_MEDIUM_GAP;
        if (value == "ThickThinMediumGap") return aspose::words::cloud::models::Border::LineStyle::THICK_THIN_MEDIUM_GAP;
        if (value == "ThinThickThinMediumGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_MEDIUM_GAP;
        if (value == "ThinThickLargeGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_LARGE_GAP;
        if (value == "ThickThinLargeGap") return aspose::words::cloud::models::Border::LineStyle::THICK_THIN_LARGE_GAP;
        if (value == "ThinThickThinLargeGap") return aspose::words::cloud::models::Border::LineStyle::THIN_THICK_THIN_LARGE_GAP;
        if (value == "Wave") return aspose::words::cloud::models::Border::LineStyle::WAVE;
        if (value == "DoubleWave") return aspose::words::cloud::models::Border::LineStyle::DOUBLE_WAVE;
        if (value == "DashSmallGap") return aspose::words::cloud::models::Border::LineStyle::DASH_SMALL_GAP;
        if (value == "DashDotStroker") return aspose::words::cloud::models::Border::LineStyle::DASH_DOT_STROKER;
        if (value == "Emboss3D") return aspose::words::cloud::models::Border::LineStyle::EMBOSS3_D;
        if (value == "Engrave3D") return aspose::words::cloud::models::Border::LineStyle::ENGRAVE3_D;
        if (value == "Outset") return aspose::words::cloud::models::Border::LineStyle::OUTSET;
        if (value == "Inset") return aspose::words::cloud::models::Border::LineStyle::INSET;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Border::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BorderType) {
            json["BorderType"] = borderBorderTypeToString(*m_BorderType);
        }
        if (m_Color) {
            m_Color->toJson(&json["Color"]);
        }
        if (m_DistanceFromText) {
            json["DistanceFromText"] = *m_DistanceFromText;
        }
        if (m_LineStyle) {
            json["LineStyle"] = borderLineStyleToString(*m_LineStyle);
        }
        if (m_LineWidth) {
            json["LineWidth"] = *m_LineWidth;
        }
        if (m_Shadow) {
            json["Shadow"] = *m_Shadow;
        }
    }

    void Border::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BorderType") && !json["BorderType"].is_null()) {
            m_BorderType = std::make_shared< aspose::words::cloud::models::Border::BorderType >(
                borderBorderTypeFromString(json["BorderType"].get< std::string >())
            );
        }
        if (json.contains("Color") && !json["Color"].is_null()) {
            m_Color = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_Color->fromJson(&json["Color"]);
        }
        if (json.contains("DistanceFromText") && !json["DistanceFromText"].is_null()) {
            m_DistanceFromText = std::make_shared< double >(
                json["DistanceFromText"].get< double >()
            );
        }
        if (json.contains("LineStyle") && !json["LineStyle"].is_null()) {
            m_LineStyle = std::make_shared< aspose::words::cloud::models::Border::LineStyle >(
                borderLineStyleFromString(json["LineStyle"].get< std::string >())
            );
        }
        if (json.contains("LineWidth") && !json["LineWidth"].is_null()) {
            m_LineWidth = std::make_shared< double >(
                json["LineWidth"].get< double >()
            );
        }
        if (json.contains("Shadow") && !json["Shadow"].is_null()) {
            m_Shadow = std::make_shared< bool >(
                json["Shadow"].get< bool >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Border::BorderType > Border::getBorderType() const
    {
        return m_BorderType;
    }

    void Border::setBorderType(std::shared_ptr< aspose::words::cloud::models::Border::BorderType > value)
    {
        m_BorderType = value;
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Border::getColor() const
    {
        return m_Color;
    }

    void Border::setColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_Color = value;
    }

    std::shared_ptr< double > Border::getDistanceFromText() const
    {
        return m_DistanceFromText;
    }

    void Border::setDistanceFromText(std::shared_ptr< double > value)
    {
        m_DistanceFromText = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Border::LineStyle > Border::getLineStyle() const
    {
        return m_LineStyle;
    }

    void Border::setLineStyle(std::shared_ptr< aspose::words::cloud::models::Border::LineStyle > value)
    {
        m_LineStyle = value;
    }

    std::shared_ptr< double > Border::getLineWidth() const
    {
        return m_LineWidth;
    }

    void Border::setLineWidth(std::shared_ptr< double > value)
    {
        m_LineWidth = value;
    }

    std::shared_ptr< bool > Border::getShadow() const
    {
        return m_Shadow;
    }

    void Border::setShadow(std::shared_ptr< bool > value)
    {
        m_Shadow = value;
    }


    /*
     * BorderResponse implementation
     */
    void BorderResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Border) {
            m_Border->toJson(&json["Border"]);
        }
    }

    void BorderResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Border") && !json["Border"].is_null()) {
            m_Border = std::make_shared< aspose::words::cloud::models::Border >();
            m_Border->fromJson(&json["Border"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Border > BorderResponse::getBorder() const
    {
        return m_Border;
    }

    void BorderResponse::setBorder(std::shared_ptr< aspose::words::cloud::models::Border > value)
    {
        m_Border = value;
    }


    /*
     * BordersCollection implementation
     */
    void BordersCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void BordersCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Border>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::Border >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Border>> > BordersCollection::getList() const
    {
        return m_List;
    }

    void BordersCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Border>> > value)
    {
        m_List = value;
    }


    /*
     * BordersResponse implementation
     */
    void BordersResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Borders) {
            m_Borders->toJson(&json["Borders"]);
        }
    }

    void BordersResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Borders") && !json["Borders"].is_null()) {
            m_Borders = std::make_shared< aspose::words::cloud::models::BordersCollection >();
            m_Borders->fromJson(&json["Borders"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::BordersCollection > BordersResponse::getBorders() const
    {
        return m_Borders;
    }

    void BordersResponse::setBorders(std::shared_ptr< aspose::words::cloud::models::BordersCollection > value)
    {
        m_Borders = value;
    }


    /*
     * ClassificationResponse implementation
     */
    void ClassificationResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BestClassName) {
            json["BestClassName"] = convertUtf16(*m_BestClassName);
        }
        if (m_BestClassProbability) {
            json["BestClassProbability"] = *m_BestClassProbability;
        }
        if (m_BestResults) {
            json["BestResults"] = ::nlohmann::json::array();
            for (auto& element : *m_BestResults) {
                element->toJson(&json["BestResults"].emplace_back());
            }
        }
    }

    void ClassificationResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BestClassName") && !json["BestClassName"].is_null()) {
            m_BestClassName = std::make_shared< std::wstring >(
                convertUtf8( json["BestClassName"].get< std::string >() )
            );
        }
        if (json.contains("BestClassProbability") && !json["BestClassProbability"].is_null()) {
            m_BestClassProbability = std::make_shared< double >(
                json["BestClassProbability"].get< double >()
            );
        }
        if (json.contains("BestResults") && !json["BestResults"].is_null()) {
            m_BestResults = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::ClassificationResult>> >();
            for (auto& element : json["BestResults"]) {
                m_BestResults->emplace_back(std::make_shared< aspose::words::cloud::models::ClassificationResult >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::wstring > ClassificationResponse::getBestClassName() const
    {
        return m_BestClassName;
    }

    void ClassificationResponse::setBestClassName(std::shared_ptr< std::wstring > value)
    {
        m_BestClassName = value;
    }

    std::shared_ptr< double > ClassificationResponse::getBestClassProbability() const
    {
        return m_BestClassProbability;
    }

    void ClassificationResponse::setBestClassProbability(std::shared_ptr< double > value)
    {
        m_BestClassProbability = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ClassificationResult>> > ClassificationResponse::getBestResults() const
    {
        return m_BestResults;
    }

    void ClassificationResponse::setBestResults(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ClassificationResult>> > value)
    {
        m_BestResults = value;
    }


    /*
     * ClassificationResult implementation
     */
    void ClassificationResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ClassName) {
            json["ClassName"] = convertUtf16(*m_ClassName);
        }
        if (m_ClassProbability) {
            json["ClassProbability"] = *m_ClassProbability;
        }
    }

    void ClassificationResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ClassName") && !json["ClassName"].is_null()) {
            m_ClassName = std::make_shared< std::wstring >(
                convertUtf8( json["ClassName"].get< std::string >() )
            );
        }
        if (json.contains("ClassProbability") && !json["ClassProbability"].is_null()) {
            m_ClassProbability = std::make_shared< double >(
                json["ClassProbability"].get< double >()
            );
        }
    }

    std::shared_ptr< std::wstring > ClassificationResult::getClassName() const
    {
        return m_ClassName;
    }

    void ClassificationResult::setClassName(std::shared_ptr< std::wstring > value)
    {
        m_ClassName = value;
    }

    std::shared_ptr< double > ClassificationResult::getClassProbability() const
    {
        return m_ClassProbability;
    }

    void ClassificationResult::setClassProbability(std::shared_ptr< double > value)
    {
        m_ClassProbability = value;
    }


    /*
     * Comment implementation
     */
    void Comment::toJson(void* jsonIfc) const
    {
        CommentLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Author) {
            json["Author"] = convertUtf16(*m_Author);
        }
        if (m_Content) {
            m_Content->toJson(&json["Content"]);
        }
        if (m_DateTime) {
            json["DateTime"] = convertUtf16(*m_DateTime);
        }
        if (m_Initial) {
            json["Initial"] = convertUtf16(*m_Initial);
        }
        if (m_RangeEnd) {
            m_RangeEnd->toJson(&json["RangeEnd"]);
        }
        if (m_RangeStart) {
            m_RangeStart->toJson(&json["RangeStart"]);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void Comment::fromJson(const void* jsonIfc)
    {
        CommentLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Author") && !json["Author"].is_null()) {
            m_Author = std::make_shared< std::wstring >(
                convertUtf8( json["Author"].get< std::string >() )
            );
        }
        if (json.contains("Content") && !json["Content"].is_null()) {
            m_Content = std::make_shared< aspose::words::cloud::models::StoryChildNodes >();
            m_Content->fromJson(&json["Content"]);
        }
        if (json.contains("DateTime") && !json["DateTime"].is_null()) {
            m_DateTime = std::make_shared< std::wstring >(
                convertUtf8( json["DateTime"].get< std::string >() )
            );
        }
        if (json.contains("Initial") && !json["Initial"].is_null()) {
            m_Initial = std::make_shared< std::wstring >(
                convertUtf8( json["Initial"].get< std::string >() )
            );
        }
        if (json.contains("RangeEnd") && !json["RangeEnd"].is_null()) {
            m_RangeEnd = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeEnd->fromJson(&json["RangeEnd"]);
        }
        if (json.contains("RangeStart") && !json["RangeStart"].is_null()) {
            m_RangeStart = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeStart->fromJson(&json["RangeStart"]);
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Comment::getAuthor() const
    {
        return m_Author;
    }

    void Comment::setAuthor(std::shared_ptr< std::wstring > value)
    {
        m_Author = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > Comment::getContent() const
    {
        return m_Content;
    }

    void Comment::setContent(std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > value)
    {
        m_Content = value;
    }

    std::shared_ptr< std::wstring > Comment::getDateTime() const
    {
        return m_DateTime;
    }

    void Comment::setDateTime(std::shared_ptr< std::wstring > value)
    {
        m_DateTime = value;
    }

    std::shared_ptr< std::wstring > Comment::getInitial() const
    {
        return m_Initial;
    }

    void Comment::setInitial(std::shared_ptr< std::wstring > value)
    {
        m_Initial = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > Comment::getRangeEnd() const
    {
        return m_RangeEnd;
    }

    void Comment::setRangeEnd(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeEnd = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > Comment::getRangeStart() const
    {
        return m_RangeStart;
    }

    void Comment::setRangeStart(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeStart = value;
    }

    std::shared_ptr< std::wstring > Comment::getText() const
    {
        return m_Text;
    }

    void Comment::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * CommentBase implementation
     */
    void CommentBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Author) {
            json["Author"] = convertUtf16(*m_Author);
        }
        if (m_DateTime) {
            json["DateTime"] = convertUtf16(*m_DateTime);
        }
        if (m_Initial) {
            json["Initial"] = convertUtf16(*m_Initial);
        }
        if (m_RangeEnd) {
            m_RangeEnd->toJson(&json["RangeEnd"]);
        }
        if (m_RangeStart) {
            m_RangeStart->toJson(&json["RangeStart"]);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void CommentBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Author") && !json["Author"].is_null()) {
            m_Author = std::make_shared< std::wstring >(
                convertUtf8( json["Author"].get< std::string >() )
            );
        }
        if (json.contains("DateTime") && !json["DateTime"].is_null()) {
            m_DateTime = std::make_shared< std::wstring >(
                convertUtf8( json["DateTime"].get< std::string >() )
            );
        }
        if (json.contains("Initial") && !json["Initial"].is_null()) {
            m_Initial = std::make_shared< std::wstring >(
                convertUtf8( json["Initial"].get< std::string >() )
            );
        }
        if (json.contains("RangeEnd") && !json["RangeEnd"].is_null()) {
            m_RangeEnd = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeEnd->fromJson(&json["RangeEnd"]);
        }
        if (json.contains("RangeStart") && !json["RangeStart"].is_null()) {
            m_RangeStart = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeStart->fromJson(&json["RangeStart"]);
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > CommentBase::getAuthor() const
    {
        return m_Author;
    }

    void CommentBase::setAuthor(std::shared_ptr< std::wstring > value)
    {
        m_Author = value;
    }

    std::shared_ptr< std::wstring > CommentBase::getDateTime() const
    {
        return m_DateTime;
    }

    void CommentBase::setDateTime(std::shared_ptr< std::wstring > value)
    {
        m_DateTime = value;
    }

    std::shared_ptr< std::wstring > CommentBase::getInitial() const
    {
        return m_Initial;
    }

    void CommentBase::setInitial(std::shared_ptr< std::wstring > value)
    {
        m_Initial = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > CommentBase::getRangeEnd() const
    {
        return m_RangeEnd;
    }

    void CommentBase::setRangeEnd(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeEnd = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > CommentBase::getRangeStart() const
    {
        return m_RangeStart;
    }

    void CommentBase::setRangeStart(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeStart = value;
    }

    std::shared_ptr< std::wstring > CommentBase::getText() const
    {
        return m_Text;
    }

    void CommentBase::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * CommentInsert implementation
     */
    void CommentInsert::toJson(void* jsonIfc) const
    {
        CommentBase::toJson(jsonIfc);
    }

    void CommentInsert::fromJson(const void* jsonIfc)
    {
        CommentBase::fromJson(jsonIfc);
    }




    /*
     * CommentLink implementation
     */
    void CommentLink::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
    }

    void CommentLink::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
    }




    /*
     * CommentResponse implementation
     */
    void CommentResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Comment) {
            m_Comment->toJson(&json["Comment"]);
        }
    }

    void CommentResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Comment") && !json["Comment"].is_null()) {
            m_Comment = std::make_shared< aspose::words::cloud::models::Comment >();
            m_Comment->fromJson(&json["Comment"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Comment > CommentResponse::getComment() const
    {
        return m_Comment;
    }

    void CommentResponse::setComment(std::shared_ptr< aspose::words::cloud::models::Comment > value)
    {
        m_Comment = value;
    }


    /*
     * CommentsCollection implementation
     */
    void CommentsCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CommentList) {
            json["CommentList"] = ::nlohmann::json::array();
            for (auto& element : *m_CommentList) {
                element->toJson(&json["CommentList"].emplace_back());
            }
        }
    }

    void CommentsCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CommentList") && !json["CommentList"].is_null()) {
            m_CommentList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Comment>> >();
            for (auto& element : json["CommentList"]) {
                m_CommentList->emplace_back(std::make_shared< aspose::words::cloud::models::Comment >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Comment>> > CommentsCollection::getCommentList() const
    {
        return m_CommentList;
    }

    void CommentsCollection::setCommentList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Comment>> > value)
    {
        m_CommentList = value;
    }


    /*
     * CommentsResponse implementation
     */
    void CommentsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Comments) {
            m_Comments->toJson(&json["Comments"]);
        }
    }

    void CommentsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Comments") && !json["Comments"].is_null()) {
            m_Comments = std::make_shared< aspose::words::cloud::models::CommentsCollection >();
            m_Comments->fromJson(&json["Comments"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::CommentsCollection > CommentsResponse::getComments() const
    {
        return m_Comments;
    }

    void CommentsResponse::setComments(std::shared_ptr< aspose::words::cloud::models::CommentsCollection > value)
    {
        m_Comments = value;
    }


    /*
     * CommentUpdate implementation
     */
    void CommentUpdate::toJson(void* jsonIfc) const
    {
        CommentBase::toJson(jsonIfc);
    }

    void CommentUpdate::fromJson(const void* jsonIfc)
    {
        CommentBase::fromJson(jsonIfc);
    }




    /*
     * CompareData implementation
     */
    void CompareData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Author) {
            json["Author"] = convertUtf16(*m_Author);
        }
        if (m_CompareOptions) {
            m_CompareOptions->toJson(&json["CompareOptions"]);
        }
        if (m_ComparingWithDocument) {
            json["ComparingWithDocument"] = convertUtf16(*m_ComparingWithDocument);
        }
        if (m_DateTime) {
            json["DateTime"] = convertUtf16(*m_DateTime);
        }
    }

    void CompareData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Author") && !json["Author"].is_null()) {
            m_Author = std::make_shared< std::wstring >(
                convertUtf8( json["Author"].get< std::string >() )
            );
        }
        if (json.contains("CompareOptions") && !json["CompareOptions"].is_null()) {
            m_CompareOptions = std::make_shared< aspose::words::cloud::models::CompareOptions >();
            m_CompareOptions->fromJson(&json["CompareOptions"]);
        }
        if (json.contains("ComparingWithDocument") && !json["ComparingWithDocument"].is_null()) {
            m_ComparingWithDocument = std::make_shared< std::wstring >(
                convertUtf8( json["ComparingWithDocument"].get< std::string >() )
            );
        }
        if (json.contains("DateTime") && !json["DateTime"].is_null()) {
            m_DateTime = std::make_shared< std::wstring >(
                convertUtf8( json["DateTime"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > CompareData::getAuthor() const
    {
        return m_Author;
    }

    void CompareData::setAuthor(std::shared_ptr< std::wstring > value)
    {
        m_Author = value;
    }

    std::shared_ptr< aspose::words::cloud::models::CompareOptions > CompareData::getCompareOptions() const
    {
        return m_CompareOptions;
    }

    void CompareData::setCompareOptions(std::shared_ptr< aspose::words::cloud::models::CompareOptions > value)
    {
        m_CompareOptions = value;
    }

    std::shared_ptr< std::wstring > CompareData::getComparingWithDocument() const
    {
        return m_ComparingWithDocument;
    }

    void CompareData::setComparingWithDocument(std::shared_ptr< std::wstring > value)
    {
        m_ComparingWithDocument = value;
    }

    std::shared_ptr< std::wstring > CompareData::getDateTime() const
    {
        return m_DateTime;
    }

    void CompareData::setDateTime(std::shared_ptr< std::wstring > value)
    {
        m_DateTime = value;
    }


    /*
     * CompareOptions implementation
     */
    inline std::string compareOptionsTargetToString(aspose::words::cloud::models::CompareOptions::Target value)
    {
        if (value == aspose::words::cloud::models::CompareOptions::Target::CURRENT) return "Current";
        if (value == aspose::words::cloud::models::CompareOptions::Target::NEW) return "New";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::CompareOptions::Target compareOptionsTargetFromString(const std::string& value)
    {
        if (value == "Current") return aspose::words::cloud::models::CompareOptions::Target::CURRENT;
        if (value == "New") return aspose::words::cloud::models::CompareOptions::Target::NEW;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void CompareOptions::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AcceptAllRevisionsBeforeComparison) {
            json["AcceptAllRevisionsBeforeComparison"] = *m_AcceptAllRevisionsBeforeComparison;
        }
        if (m_IgnoreCaseChanges) {
            json["IgnoreCaseChanges"] = *m_IgnoreCaseChanges;
        }
        if (m_IgnoreComments) {
            json["IgnoreComments"] = *m_IgnoreComments;
        }
        if (m_IgnoreFields) {
            json["IgnoreFields"] = *m_IgnoreFields;
        }
        if (m_IgnoreFootnotes) {
            json["IgnoreFootnotes"] = *m_IgnoreFootnotes;
        }
        if (m_IgnoreFormatting) {
            json["IgnoreFormatting"] = *m_IgnoreFormatting;
        }
        if (m_IgnoreHeadersAndFooters) {
            json["IgnoreHeadersAndFooters"] = *m_IgnoreHeadersAndFooters;
        }
        if (m_IgnoreTables) {
            json["IgnoreTables"] = *m_IgnoreTables;
        }
        if (m_IgnoreTextboxes) {
            json["IgnoreTextboxes"] = *m_IgnoreTextboxes;
        }
        if (m_Target) {
            json["Target"] = compareOptionsTargetToString(*m_Target);
        }
    }

    void CompareOptions::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AcceptAllRevisionsBeforeComparison") && !json["AcceptAllRevisionsBeforeComparison"].is_null()) {
            m_AcceptAllRevisionsBeforeComparison = std::make_shared< bool >(
                json["AcceptAllRevisionsBeforeComparison"].get< bool >()
            );
        }
        if (json.contains("IgnoreCaseChanges") && !json["IgnoreCaseChanges"].is_null()) {
            m_IgnoreCaseChanges = std::make_shared< bool >(
                json["IgnoreCaseChanges"].get< bool >()
            );
        }
        if (json.contains("IgnoreComments") && !json["IgnoreComments"].is_null()) {
            m_IgnoreComments = std::make_shared< bool >(
                json["IgnoreComments"].get< bool >()
            );
        }
        if (json.contains("IgnoreFields") && !json["IgnoreFields"].is_null()) {
            m_IgnoreFields = std::make_shared< bool >(
                json["IgnoreFields"].get< bool >()
            );
        }
        if (json.contains("IgnoreFootnotes") && !json["IgnoreFootnotes"].is_null()) {
            m_IgnoreFootnotes = std::make_shared< bool >(
                json["IgnoreFootnotes"].get< bool >()
            );
        }
        if (json.contains("IgnoreFormatting") && !json["IgnoreFormatting"].is_null()) {
            m_IgnoreFormatting = std::make_shared< bool >(
                json["IgnoreFormatting"].get< bool >()
            );
        }
        if (json.contains("IgnoreHeadersAndFooters") && !json["IgnoreHeadersAndFooters"].is_null()) {
            m_IgnoreHeadersAndFooters = std::make_shared< bool >(
                json["IgnoreHeadersAndFooters"].get< bool >()
            );
        }
        if (json.contains("IgnoreTables") && !json["IgnoreTables"].is_null()) {
            m_IgnoreTables = std::make_shared< bool >(
                json["IgnoreTables"].get< bool >()
            );
        }
        if (json.contains("IgnoreTextboxes") && !json["IgnoreTextboxes"].is_null()) {
            m_IgnoreTextboxes = std::make_shared< bool >(
                json["IgnoreTextboxes"].get< bool >()
            );
        }
        if (json.contains("Target") && !json["Target"].is_null()) {
            m_Target = std::make_shared< aspose::words::cloud::models::CompareOptions::Target >(
                compareOptionsTargetFromString(json["Target"].get< std::string >())
            );
        }
    }

    std::shared_ptr< bool > CompareOptions::getAcceptAllRevisionsBeforeComparison() const
    {
        return m_AcceptAllRevisionsBeforeComparison;
    }

    void CompareOptions::setAcceptAllRevisionsBeforeComparison(std::shared_ptr< bool > value)
    {
        m_AcceptAllRevisionsBeforeComparison = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreCaseChanges() const
    {
        return m_IgnoreCaseChanges;
    }

    void CompareOptions::setIgnoreCaseChanges(std::shared_ptr< bool > value)
    {
        m_IgnoreCaseChanges = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreComments() const
    {
        return m_IgnoreComments;
    }

    void CompareOptions::setIgnoreComments(std::shared_ptr< bool > value)
    {
        m_IgnoreComments = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreFields() const
    {
        return m_IgnoreFields;
    }

    void CompareOptions::setIgnoreFields(std::shared_ptr< bool > value)
    {
        m_IgnoreFields = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreFootnotes() const
    {
        return m_IgnoreFootnotes;
    }

    void CompareOptions::setIgnoreFootnotes(std::shared_ptr< bool > value)
    {
        m_IgnoreFootnotes = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreFormatting() const
    {
        return m_IgnoreFormatting;
    }

    void CompareOptions::setIgnoreFormatting(std::shared_ptr< bool > value)
    {
        m_IgnoreFormatting = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreHeadersAndFooters() const
    {
        return m_IgnoreHeadersAndFooters;
    }

    void CompareOptions::setIgnoreHeadersAndFooters(std::shared_ptr< bool > value)
    {
        m_IgnoreHeadersAndFooters = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreTables() const
    {
        return m_IgnoreTables;
    }

    void CompareOptions::setIgnoreTables(std::shared_ptr< bool > value)
    {
        m_IgnoreTables = value;
    }

    std::shared_ptr< bool > CompareOptions::getIgnoreTextboxes() const
    {
        return m_IgnoreTextboxes;
    }

    void CompareOptions::setIgnoreTextboxes(std::shared_ptr< bool > value)
    {
        m_IgnoreTextboxes = value;
    }

    std::shared_ptr< aspose::words::cloud::models::CompareOptions::Target > CompareOptions::getTarget() const
    {
        return m_Target;
    }

    void CompareOptions::setTarget(std::shared_ptr< aspose::words::cloud::models::CompareOptions::Target > value)
    {
        m_Target = value;
    }


    /*
     * CsvDataLoadOptions implementation
     */
    void CsvDataLoadOptions::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CommentChar) {
            json["CommentChar"] = convertUtf16(*m_CommentChar);
        }
        if (m_Delimiter) {
            json["Delimiter"] = convertUtf16(*m_Delimiter);
        }
        if (m_HasHeaders) {
            json["HasHeaders"] = *m_HasHeaders;
        }
        if (m_QuoteChar) {
            json["QuoteChar"] = convertUtf16(*m_QuoteChar);
        }
    }

    void CsvDataLoadOptions::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CommentChar") && !json["CommentChar"].is_null()) {
            m_CommentChar = std::make_shared< std::wstring >(
                convertUtf8( json["CommentChar"].get< std::string >() )
            );
        }
        if (json.contains("Delimiter") && !json["Delimiter"].is_null()) {
            m_Delimiter = std::make_shared< std::wstring >(
                convertUtf8( json["Delimiter"].get< std::string >() )
            );
        }
        if (json.contains("HasHeaders") && !json["HasHeaders"].is_null()) {
            m_HasHeaders = std::make_shared< bool >(
                json["HasHeaders"].get< bool >()
            );
        }
        if (json.contains("QuoteChar") && !json["QuoteChar"].is_null()) {
            m_QuoteChar = std::make_shared< std::wstring >(
                convertUtf8( json["QuoteChar"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > CsvDataLoadOptions::getCommentChar() const
    {
        return m_CommentChar;
    }

    void CsvDataLoadOptions::setCommentChar(std::shared_ptr< std::wstring > value)
    {
        m_CommentChar = value;
    }

    std::shared_ptr< std::wstring > CsvDataLoadOptions::getDelimiter() const
    {
        return m_Delimiter;
    }

    void CsvDataLoadOptions::setDelimiter(std::shared_ptr< std::wstring > value)
    {
        m_Delimiter = value;
    }

    std::shared_ptr< bool > CsvDataLoadOptions::getHasHeaders() const
    {
        return m_HasHeaders;
    }

    void CsvDataLoadOptions::setHasHeaders(std::shared_ptr< bool > value)
    {
        m_HasHeaders = value;
    }

    std::shared_ptr< std::wstring > CsvDataLoadOptions::getQuoteChar() const
    {
        return m_QuoteChar;
    }

    void CsvDataLoadOptions::setQuoteChar(std::shared_ptr< std::wstring > value)
    {
        m_QuoteChar = value;
    }


    /*
     * CustomXmlPart implementation
     */
    void CustomXmlPart::toJson(void* jsonIfc) const
    {
        CustomXmlPartLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Data) {
            json["Data"] = convertUtf16(*m_Data);
        }
        if (m_Id) {
            json["Id"] = convertUtf16(*m_Id);
        }
    }

    void CustomXmlPart::fromJson(const void* jsonIfc)
    {
        CustomXmlPartLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Data") && !json["Data"].is_null()) {
            m_Data = std::make_shared< std::wstring >(
                convertUtf8( json["Data"].get< std::string >() )
            );
        }
        if (json.contains("Id") && !json["Id"].is_null()) {
            m_Id = std::make_shared< std::wstring >(
                convertUtf8( json["Id"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > CustomXmlPart::getData() const
    {
        return m_Data;
    }

    void CustomXmlPart::setData(std::shared_ptr< std::wstring > value)
    {
        m_Data = value;
    }

    std::shared_ptr< std::wstring > CustomXmlPart::getId() const
    {
        return m_Id;
    }

    void CustomXmlPart::setId(std::shared_ptr< std::wstring > value)
    {
        m_Id = value;
    }


    /*
     * CustomXmlPartInsert implementation
     */
    void CustomXmlPartInsert::toJson(void* jsonIfc) const
    {
        CustomXmlPart::toJson(jsonIfc);
    }

    void CustomXmlPartInsert::fromJson(const void* jsonIfc)
    {
        CustomXmlPart::fromJson(jsonIfc);
    }




    /*
     * CustomXmlPartLink implementation
     */
    void CustomXmlPartLink::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
    }

    void CustomXmlPartLink::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
    }




    /*
     * CustomXmlPartResponse implementation
     */
    void CustomXmlPartResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CustomXmlPart) {
            m_CustomXmlPart->toJson(&json["CustomXmlPart"]);
        }
    }

    void CustomXmlPartResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CustomXmlPart") && !json["CustomXmlPart"].is_null()) {
            m_CustomXmlPart = std::make_shared< aspose::words::cloud::models::CustomXmlPart >();
            m_CustomXmlPart->fromJson(&json["CustomXmlPart"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::CustomXmlPart > CustomXmlPartResponse::getCustomXmlPart() const
    {
        return m_CustomXmlPart;
    }

    void CustomXmlPartResponse::setCustomXmlPart(std::shared_ptr< aspose::words::cloud::models::CustomXmlPart > value)
    {
        m_CustomXmlPart = value;
    }


    /*
     * CustomXmlPartsCollection implementation
     */
    void CustomXmlPartsCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CustomXmlPartsList) {
            json["CustomXmlPartsList"] = ::nlohmann::json::array();
            for (auto& element : *m_CustomXmlPartsList) {
                element->toJson(&json["CustomXmlPartsList"].emplace_back());
            }
        }
    }

    void CustomXmlPartsCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CustomXmlPartsList") && !json["CustomXmlPartsList"].is_null()) {
            m_CustomXmlPartsList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::CustomXmlPart>> >();
            for (auto& element : json["CustomXmlPartsList"]) {
                m_CustomXmlPartsList->emplace_back(std::make_shared< aspose::words::cloud::models::CustomXmlPart >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::CustomXmlPart>> > CustomXmlPartsCollection::getCustomXmlPartsList() const
    {
        return m_CustomXmlPartsList;
    }

    void CustomXmlPartsCollection::setCustomXmlPartsList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::CustomXmlPart>> > value)
    {
        m_CustomXmlPartsList = value;
    }


    /*
     * CustomXmlPartsResponse implementation
     */
    void CustomXmlPartsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CustomXmlParts) {
            m_CustomXmlParts->toJson(&json["CustomXmlParts"]);
        }
    }

    void CustomXmlPartsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CustomXmlParts") && !json["CustomXmlParts"].is_null()) {
            m_CustomXmlParts = std::make_shared< aspose::words::cloud::models::CustomXmlPartsCollection >();
            m_CustomXmlParts->fromJson(&json["CustomXmlParts"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::CustomXmlPartsCollection > CustomXmlPartsResponse::getCustomXmlParts() const
    {
        return m_CustomXmlParts;
    }

    void CustomXmlPartsResponse::setCustomXmlParts(std::shared_ptr< aspose::words::cloud::models::CustomXmlPartsCollection > value)
    {
        m_CustomXmlParts = value;
    }


    /*
     * CustomXmlPartUpdate implementation
     */
    void CustomXmlPartUpdate::toJson(void* jsonIfc) const
    {
        CustomXmlPart::toJson(jsonIfc);
    }

    void CustomXmlPartUpdate::fromJson(const void* jsonIfc)
    {
        CustomXmlPart::fromJson(jsonIfc);
    }




    /*
     * DocSaveOptionsData implementation
     */
    void DocSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AlwaysCompressMetafiles) {
            json["AlwaysCompressMetafiles"] = *m_AlwaysCompressMetafiles;
        }
        if (m_Password) {
            json["Password"] = convertUtf16(*m_Password);
        }
        if (m_SavePictureBullet) {
            json["SavePictureBullet"] = *m_SavePictureBullet;
        }
        if (m_SaveRoutingSlip) {
            json["SaveRoutingSlip"] = *m_SaveRoutingSlip;
        }
    }

    void DocSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AlwaysCompressMetafiles") && !json["AlwaysCompressMetafiles"].is_null()) {
            m_AlwaysCompressMetafiles = std::make_shared< bool >(
                json["AlwaysCompressMetafiles"].get< bool >()
            );
        }
        if (json.contains("Password") && !json["Password"].is_null()) {
            m_Password = std::make_shared< std::wstring >(
                convertUtf8( json["Password"].get< std::string >() )
            );
        }
        if (json.contains("SavePictureBullet") && !json["SavePictureBullet"].is_null()) {
            m_SavePictureBullet = std::make_shared< bool >(
                json["SavePictureBullet"].get< bool >()
            );
        }
        if (json.contains("SaveRoutingSlip") && !json["SaveRoutingSlip"].is_null()) {
            m_SaveRoutingSlip = std::make_shared< bool >(
                json["SaveRoutingSlip"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > DocSaveOptionsData::getAlwaysCompressMetafiles() const
    {
        return m_AlwaysCompressMetafiles;
    }

    void DocSaveOptionsData::setAlwaysCompressMetafiles(std::shared_ptr< bool > value)
    {
        m_AlwaysCompressMetafiles = value;
    }

    std::shared_ptr< std::wstring > DocSaveOptionsData::getPassword() const
    {
        return m_Password;
    }

    void DocSaveOptionsData::setPassword(std::shared_ptr< std::wstring > value)
    {
        m_Password = value;
    }

    std::shared_ptr< bool > DocSaveOptionsData::getSavePictureBullet() const
    {
        return m_SavePictureBullet;
    }

    void DocSaveOptionsData::setSavePictureBullet(std::shared_ptr< bool > value)
    {
        m_SavePictureBullet = value;
    }

    std::shared_ptr< bool > DocSaveOptionsData::getSaveRoutingSlip() const
    {
        return m_SaveRoutingSlip;
    }

    void DocSaveOptionsData::setSaveRoutingSlip(std::shared_ptr< bool > value)
    {
        m_SaveRoutingSlip = value;
    }


    /*
     * Document implementation
     */
    inline std::string documentSourceFormatToString(aspose::words::cloud::models::Document::SourceFormat value)
    {
        if (value == aspose::words::cloud::models::Document::SourceFormat::UNKNOWN) return "Unknown";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOC) return "Doc";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOT) return "Dot";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOC_PRE_WORD60) return "DocPreWord60";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOCX) return "Docx";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOCM) return "Docm";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOTX) return "Dotx";
        if (value == aspose::words::cloud::models::Document::SourceFormat::DOTM) return "Dotm";
        if (value == aspose::words::cloud::models::Document::SourceFormat::FLAT_OPC) return "FlatOpc";
        if (value == aspose::words::cloud::models::Document::SourceFormat::RTF) return "Rtf";
        if (value == aspose::words::cloud::models::Document::SourceFormat::WORD_ML) return "WordML";
        if (value == aspose::words::cloud::models::Document::SourceFormat::HTML) return "Html";
        if (value == aspose::words::cloud::models::Document::SourceFormat::MHTML) return "Mhtml";
        if (value == aspose::words::cloud::models::Document::SourceFormat::EPUB) return "Epub";
        if (value == aspose::words::cloud::models::Document::SourceFormat::TEXT) return "Text";
        if (value == aspose::words::cloud::models::Document::SourceFormat::ODT) return "Odt";
        if (value == aspose::words::cloud::models::Document::SourceFormat::OTT) return "Ott";
        if (value == aspose::words::cloud::models::Document::SourceFormat::PDF) return "Pdf";
        if (value == aspose::words::cloud::models::Document::SourceFormat::XPS) return "Xps";
        if (value == aspose::words::cloud::models::Document::SourceFormat::TIFF) return "Tiff";
        if (value == aspose::words::cloud::models::Document::SourceFormat::SVG) return "Svg";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Document::SourceFormat documentSourceFormatFromString(const std::string& value)
    {
        if (value == "Unknown") return aspose::words::cloud::models::Document::SourceFormat::UNKNOWN;
        if (value == "Doc") return aspose::words::cloud::models::Document::SourceFormat::DOC;
        if (value == "Dot") return aspose::words::cloud::models::Document::SourceFormat::DOT;
        if (value == "DocPreWord60") return aspose::words::cloud::models::Document::SourceFormat::DOC_PRE_WORD60;
        if (value == "Docx") return aspose::words::cloud::models::Document::SourceFormat::DOCX;
        if (value == "Docm") return aspose::words::cloud::models::Document::SourceFormat::DOCM;
        if (value == "Dotx") return aspose::words::cloud::models::Document::SourceFormat::DOTX;
        if (value == "Dotm") return aspose::words::cloud::models::Document::SourceFormat::DOTM;
        if (value == "FlatOpc") return aspose::words::cloud::models::Document::SourceFormat::FLAT_OPC;
        if (value == "Rtf") return aspose::words::cloud::models::Document::SourceFormat::RTF;
        if (value == "WordML") return aspose::words::cloud::models::Document::SourceFormat::WORD_ML;
        if (value == "Html") return aspose::words::cloud::models::Document::SourceFormat::HTML;
        if (value == "Mhtml") return aspose::words::cloud::models::Document::SourceFormat::MHTML;
        if (value == "Epub") return aspose::words::cloud::models::Document::SourceFormat::EPUB;
        if (value == "Text") return aspose::words::cloud::models::Document::SourceFormat::TEXT;
        if (value == "Odt") return aspose::words::cloud::models::Document::SourceFormat::ODT;
        if (value == "Ott") return aspose::words::cloud::models::Document::SourceFormat::OTT;
        if (value == "Pdf") return aspose::words::cloud::models::Document::SourceFormat::PDF;
        if (value == "Xps") return aspose::words::cloud::models::Document::SourceFormat::XPS;
        if (value == "Tiff") return aspose::words::cloud::models::Document::SourceFormat::TIFF;
        if (value == "Svg") return aspose::words::cloud::models::Document::SourceFormat::SVG;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Document::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentProperties) {
            m_DocumentProperties->toJson(&json["DocumentProperties"]);
        }
        if (m_FileName) {
            json["FileName"] = convertUtf16(*m_FileName);
        }
        if (m_IsEncrypted) {
            json["IsEncrypted"] = *m_IsEncrypted;
        }
        if (m_IsSigned) {
            json["IsSigned"] = *m_IsSigned;
        }
        if (m_Links) {
            json["Links"] = ::nlohmann::json::array();
            for (auto& element : *m_Links) {
                element->toJson(&json["Links"].emplace_back());
            }
        }
        if (m_SourceFormat) {
            json["SourceFormat"] = documentSourceFormatToString(*m_SourceFormat);
        }
    }

    void Document::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentProperties") && !json["DocumentProperties"].is_null()) {
            m_DocumentProperties = std::make_shared< aspose::words::cloud::models::DocumentProperties >();
            m_DocumentProperties->fromJson(&json["DocumentProperties"]);
        }
        if (json.contains("FileName") && !json["FileName"].is_null()) {
            m_FileName = std::make_shared< std::wstring >(
                convertUtf8( json["FileName"].get< std::string >() )
            );
        }
        if (json.contains("IsEncrypted") && !json["IsEncrypted"].is_null()) {
            m_IsEncrypted = std::make_shared< bool >(
                json["IsEncrypted"].get< bool >()
            );
        }
        if (json.contains("IsSigned") && !json["IsSigned"].is_null()) {
            m_IsSigned = std::make_shared< bool >(
                json["IsSigned"].get< bool >()
            );
        }
        if (json.contains("Links") && !json["Links"].is_null()) {
            m_Links = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Link>> >();
            for (auto& element : json["Links"]) {
                m_Links->emplace_back(std::make_shared< aspose::words::cloud::models::Link >())->fromJson(&element);
            }
        }
        if (json.contains("SourceFormat") && !json["SourceFormat"].is_null()) {
            m_SourceFormat = std::make_shared< aspose::words::cloud::models::Document::SourceFormat >(
                documentSourceFormatFromString(json["SourceFormat"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentProperties > Document::getDocumentProperties() const
    {
        return m_DocumentProperties;
    }

    void Document::setDocumentProperties(std::shared_ptr< aspose::words::cloud::models::DocumentProperties > value)
    {
        m_DocumentProperties = value;
    }

    std::shared_ptr< std::wstring > Document::getFileName() const
    {
        return m_FileName;
    }

    void Document::setFileName(std::shared_ptr< std::wstring > value)
    {
        m_FileName = value;
    }

    std::shared_ptr< bool > Document::getIsEncrypted() const
    {
        return m_IsEncrypted;
    }

    void Document::setIsEncrypted(std::shared_ptr< bool > value)
    {
        m_IsEncrypted = value;
    }

    std::shared_ptr< bool > Document::getIsSigned() const
    {
        return m_IsSigned;
    }

    void Document::setIsSigned(std::shared_ptr< bool > value)
    {
        m_IsSigned = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Link>> > Document::getLinks() const
    {
        return m_Links;
    }

    void Document::setLinks(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Link>> > value)
    {
        m_Links = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Document::SourceFormat > Document::getSourceFormat() const
    {
        return m_SourceFormat;
    }

    void Document::setSourceFormat(std::shared_ptr< aspose::words::cloud::models::Document::SourceFormat > value)
    {
        m_SourceFormat = value;
    }


    /*
     * DocumentEntry implementation
     */
    void DocumentEntry::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Href) {
            json["Href"] = convertUtf16(*m_Href);
        }
        if (m_ImportFormatMode) {
            json["ImportFormatMode"] = convertUtf16(*m_ImportFormatMode);
        }
    }

    void DocumentEntry::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Href") && !json["Href"].is_null()) {
            m_Href = std::make_shared< std::wstring >(
                convertUtf8( json["Href"].get< std::string >() )
            );
        }
        if (json.contains("ImportFormatMode") && !json["ImportFormatMode"].is_null()) {
            m_ImportFormatMode = std::make_shared< std::wstring >(
                convertUtf8( json["ImportFormatMode"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > DocumentEntry::getHref() const
    {
        return m_Href;
    }

    void DocumentEntry::setHref(std::shared_ptr< std::wstring > value)
    {
        m_Href = value;
    }

    std::shared_ptr< std::wstring > DocumentEntry::getImportFormatMode() const
    {
        return m_ImportFormatMode;
    }

    void DocumentEntry::setImportFormatMode(std::shared_ptr< std::wstring > value)
    {
        m_ImportFormatMode = value;
    }


    /*
     * DocumentEntryList implementation
     */
    void DocumentEntryList::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ApplyBaseDocumentHeadersAndFootersToAppendingDocuments) {
            json["ApplyBaseDocumentHeadersAndFootersToAppendingDocuments"] = *m_ApplyBaseDocumentHeadersAndFootersToAppendingDocuments;
        }
        if (m_DocumentEntries) {
            json["DocumentEntries"] = ::nlohmann::json::array();
            for (auto& element : *m_DocumentEntries) {
                element->toJson(&json["DocumentEntries"].emplace_back());
            }
        }
    }

    void DocumentEntryList::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ApplyBaseDocumentHeadersAndFootersToAppendingDocuments") && !json["ApplyBaseDocumentHeadersAndFootersToAppendingDocuments"].is_null()) {
            m_ApplyBaseDocumentHeadersAndFootersToAppendingDocuments = std::make_shared< bool >(
                json["ApplyBaseDocumentHeadersAndFootersToAppendingDocuments"].get< bool >()
            );
        }
        if (json.contains("DocumentEntries") && !json["DocumentEntries"].is_null()) {
            m_DocumentEntries = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentEntry>> >();
            for (auto& element : json["DocumentEntries"]) {
                m_DocumentEntries->emplace_back(std::make_shared< aspose::words::cloud::models::DocumentEntry >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< bool > DocumentEntryList::getApplyBaseDocumentHeadersAndFootersToAppendingDocuments() const
    {
        return m_ApplyBaseDocumentHeadersAndFootersToAppendingDocuments;
    }

    void DocumentEntryList::setApplyBaseDocumentHeadersAndFootersToAppendingDocuments(std::shared_ptr< bool > value)
    {
        m_ApplyBaseDocumentHeadersAndFootersToAppendingDocuments = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentEntry>> > DocumentEntryList::getDocumentEntries() const
    {
        return m_DocumentEntries;
    }

    void DocumentEntryList::setDocumentEntries(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentEntry>> > value)
    {
        m_DocumentEntries = value;
    }


    /*
     * DocumentPosition implementation
     */
    void DocumentPosition::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Node) {
            m_Node->toJson(&json["Node"]);
        }
        if (m_Offset) {
            json["Offset"] = *m_Offset;
        }
    }

    void DocumentPosition::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Node") && !json["Node"].is_null()) {
            m_Node = std::make_shared< aspose::words::cloud::models::NodeLink >();
            m_Node->fromJson(&json["Node"]);
        }
        if (json.contains("Offset") && !json["Offset"].is_null()) {
            m_Offset = std::make_shared< int32_t >(
                json["Offset"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::NodeLink > DocumentPosition::getNode() const
    {
        return m_Node;
    }

    void DocumentPosition::setNode(std::shared_ptr< aspose::words::cloud::models::NodeLink > value)
    {
        m_Node = value;
    }

    std::shared_ptr< int32_t > DocumentPosition::getOffset() const
    {
        return m_Offset;
    }

    void DocumentPosition::setOffset(std::shared_ptr< int32_t > value)
    {
        m_Offset = value;
    }


    /*
     * DocumentProperties implementation
     */
    void DocumentProperties::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void DocumentProperties::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentProperty>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::DocumentProperty >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentProperty>> > DocumentProperties::getList() const
    {
        return m_List;
    }

    void DocumentProperties::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::DocumentProperty>> > value)
    {
        m_List = value;
    }


    /*
     * DocumentPropertiesResponse implementation
     */
    void DocumentPropertiesResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentProperties) {
            m_DocumentProperties->toJson(&json["DocumentProperties"]);
        }
    }

    void DocumentPropertiesResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentProperties") && !json["DocumentProperties"].is_null()) {
            m_DocumentProperties = std::make_shared< aspose::words::cloud::models::DocumentProperties >();
            m_DocumentProperties->fromJson(&json["DocumentProperties"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentProperties > DocumentPropertiesResponse::getDocumentProperties() const
    {
        return m_DocumentProperties;
    }

    void DocumentPropertiesResponse::setDocumentProperties(std::shared_ptr< aspose::words::cloud::models::DocumentProperties > value)
    {
        m_DocumentProperties = value;
    }


    /*
     * DocumentProperty implementation
     */
    void DocumentProperty::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BuiltIn) {
            json["BuiltIn"] = *m_BuiltIn;
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_Value) {
            json["Value"] = convertUtf16(*m_Value);
        }
    }

    void DocumentProperty::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BuiltIn") && !json["BuiltIn"].is_null()) {
            m_BuiltIn = std::make_shared< bool >(
                json["BuiltIn"].get< bool >()
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("Value") && !json["Value"].is_null()) {
            m_Value = std::make_shared< std::wstring >(
                convertUtf8( json["Value"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< bool > DocumentProperty::getBuiltIn() const
    {
        return m_BuiltIn;
    }

    void DocumentProperty::setBuiltIn(std::shared_ptr< bool > value)
    {
        m_BuiltIn = value;
    }

    std::shared_ptr< std::wstring > DocumentProperty::getName() const
    {
        return m_Name;
    }

    void DocumentProperty::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > DocumentProperty::getValue() const
    {
        return m_Value;
    }

    void DocumentProperty::setValue(std::shared_ptr< std::wstring > value)
    {
        m_Value = value;
    }


    /*
     * DocumentPropertyBase implementation
     */
    void DocumentPropertyBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Value) {
            json["Value"] = convertUtf16(*m_Value);
        }
    }

    void DocumentPropertyBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Value") && !json["Value"].is_null()) {
            m_Value = std::make_shared< std::wstring >(
                convertUtf8( json["Value"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > DocumentPropertyBase::getValue() const
    {
        return m_Value;
    }

    void DocumentPropertyBase::setValue(std::shared_ptr< std::wstring > value)
    {
        m_Value = value;
    }


    /*
     * DocumentPropertyCreateOrUpdate implementation
     */
    void DocumentPropertyCreateOrUpdate::toJson(void* jsonIfc) const
    {
        DocumentPropertyBase::toJson(jsonIfc);
    }

    void DocumentPropertyCreateOrUpdate::fromJson(const void* jsonIfc)
    {
        DocumentPropertyBase::fromJson(jsonIfc);
    }




    /*
     * DocumentPropertyResponse implementation
     */
    void DocumentPropertyResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentProperty) {
            m_DocumentProperty->toJson(&json["DocumentProperty"]);
        }
    }

    void DocumentPropertyResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentProperty") && !json["DocumentProperty"].is_null()) {
            m_DocumentProperty = std::make_shared< aspose::words::cloud::models::DocumentProperty >();
            m_DocumentProperty->fromJson(&json["DocumentProperty"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentProperty > DocumentPropertyResponse::getDocumentProperty() const
    {
        return m_DocumentProperty;
    }

    void DocumentPropertyResponse::setDocumentProperty(std::shared_ptr< aspose::words::cloud::models::DocumentProperty > value)
    {
        m_DocumentProperty = value;
    }


    /*
     * DocumentResponse implementation
     */
    void DocumentResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Document) {
            m_Document->toJson(&json["Document"]);
        }
    }

    void DocumentResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Document") && !json["Document"].is_null()) {
            m_Document = std::make_shared< aspose::words::cloud::models::Document >();
            m_Document->fromJson(&json["Document"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Document > DocumentResponse::getDocument() const
    {
        return m_Document;
    }

    void DocumentResponse::setDocument(std::shared_ptr< aspose::words::cloud::models::Document > value)
    {
        m_Document = value;
    }


    /*
     * DocumentStatData implementation
     */
    void DocumentStatData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FootnotesStatData) {
            m_FootnotesStatData->toJson(&json["FootnotesStatData"]);
        }
        if (m_PageCount) {
            json["PageCount"] = *m_PageCount;
        }
        if (m_PageStatData) {
            json["PageStatData"] = ::nlohmann::json::array();
            for (auto& element : *m_PageStatData) {
                element->toJson(&json["PageStatData"].emplace_back());
            }
        }
        if (m_ParagraphCount) {
            json["ParagraphCount"] = *m_ParagraphCount;
        }
        if (m_WordCount) {
            json["WordCount"] = *m_WordCount;
        }
    }

    void DocumentStatData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FootnotesStatData") && !json["FootnotesStatData"].is_null()) {
            m_FootnotesStatData = std::make_shared< aspose::words::cloud::models::FootnotesStatData >();
            m_FootnotesStatData->fromJson(&json["FootnotesStatData"]);
        }
        if (json.contains("PageCount") && !json["PageCount"].is_null()) {
            m_PageCount = std::make_shared< int32_t >(
                json["PageCount"].get< int32_t >()
            );
        }
        if (json.contains("PageStatData") && !json["PageStatData"].is_null()) {
            m_PageStatData = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::PageStatData>> >();
            for (auto& element : json["PageStatData"]) {
                m_PageStatData->emplace_back(std::make_shared< aspose::words::cloud::models::PageStatData >())->fromJson(&element);
            }
        }
        if (json.contains("ParagraphCount") && !json["ParagraphCount"].is_null()) {
            m_ParagraphCount = std::make_shared< int32_t >(
                json["ParagraphCount"].get< int32_t >()
            );
        }
        if (json.contains("WordCount") && !json["WordCount"].is_null()) {
            m_WordCount = std::make_shared< int32_t >(
                json["WordCount"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FootnotesStatData > DocumentStatData::getFootnotesStatData() const
    {
        return m_FootnotesStatData;
    }

    void DocumentStatData::setFootnotesStatData(std::shared_ptr< aspose::words::cloud::models::FootnotesStatData > value)
    {
        m_FootnotesStatData = value;
    }

    std::shared_ptr< int32_t > DocumentStatData::getPageCount() const
    {
        return m_PageCount;
    }

    void DocumentStatData::setPageCount(std::shared_ptr< int32_t > value)
    {
        m_PageCount = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::PageStatData>> > DocumentStatData::getPageStatData() const
    {
        return m_PageStatData;
    }

    void DocumentStatData::setPageStatData(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::PageStatData>> > value)
    {
        m_PageStatData = value;
    }

    std::shared_ptr< int32_t > DocumentStatData::getParagraphCount() const
    {
        return m_ParagraphCount;
    }

    void DocumentStatData::setParagraphCount(std::shared_ptr< int32_t > value)
    {
        m_ParagraphCount = value;
    }

    std::shared_ptr< int32_t > DocumentStatData::getWordCount() const
    {
        return m_WordCount;
    }

    void DocumentStatData::setWordCount(std::shared_ptr< int32_t > value)
    {
        m_WordCount = value;
    }


    /*
     * DownsampleOptionsData implementation
     */
    void DownsampleOptionsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DownsampleImages) {
            json["DownsampleImages"] = *m_DownsampleImages;
        }
        if (m_Resolution) {
            json["Resolution"] = *m_Resolution;
        }
        if (m_ResolutionThreshold) {
            json["ResolutionThreshold"] = *m_ResolutionThreshold;
        }
    }

    void DownsampleOptionsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DownsampleImages") && !json["DownsampleImages"].is_null()) {
            m_DownsampleImages = std::make_shared< bool >(
                json["DownsampleImages"].get< bool >()
            );
        }
        if (json.contains("Resolution") && !json["Resolution"].is_null()) {
            m_Resolution = std::make_shared< int32_t >(
                json["Resolution"].get< int32_t >()
            );
        }
        if (json.contains("ResolutionThreshold") && !json["ResolutionThreshold"].is_null()) {
            m_ResolutionThreshold = std::make_shared< int32_t >(
                json["ResolutionThreshold"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< bool > DownsampleOptionsData::getDownsampleImages() const
    {
        return m_DownsampleImages;
    }

    void DownsampleOptionsData::setDownsampleImages(std::shared_ptr< bool > value)
    {
        m_DownsampleImages = value;
    }

    std::shared_ptr< int32_t > DownsampleOptionsData::getResolution() const
    {
        return m_Resolution;
    }

    void DownsampleOptionsData::setResolution(std::shared_ptr< int32_t > value)
    {
        m_Resolution = value;
    }

    std::shared_ptr< int32_t > DownsampleOptionsData::getResolutionThreshold() const
    {
        return m_ResolutionThreshold;
    }

    void DownsampleOptionsData::setResolutionThreshold(std::shared_ptr< int32_t > value)
    {
        m_ResolutionThreshold = value;
    }


    /*
     * DrawingObject implementation
     */
    inline std::string drawingObjectRelativeHorizontalPositionToString(aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::COLUMN) return "Column";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::LEFT_MARGIN) return "LeftMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::RIGHT_MARGIN) return "RightMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition drawingObjectRelativeHorizontalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::MARGIN;
        if (value == "Page") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::PAGE;
        if (value == "Column") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::COLUMN;
        if (value == "Default") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::DEFAULT;
        if (value == "Character") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::CHARACTER;
        if (value == "LeftMargin") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::LEFT_MARGIN;
        if (value == "RightMargin") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::RIGHT_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectRelativeVerticalPositionToString(aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TABLE_DEFAULT) return "TableDefault";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::PARAGRAPH) return "Paragraph";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TEXT_FRAME_DEFAULT) return "TextFrameDefault";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::LINE) return "Line";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TOP_MARGIN) return "TopMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::BOTTOM_MARGIN) return "BottomMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition drawingObjectRelativeVerticalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::MARGIN;
        if (value == "TableDefault") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TABLE_DEFAULT;
        if (value == "Page") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::PAGE;
        if (value == "Paragraph") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::PARAGRAPH;
        if (value == "TextFrameDefault") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TEXT_FRAME_DEFAULT;
        if (value == "Line") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::LINE;
        if (value == "TopMargin") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::TOP_MARGIN;
        if (value == "BottomMargin") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::BOTTOM_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectWrapTypeToString(aspose::words::cloud::models::DrawingObject::WrapType value)
    {
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::INLINE) return "Inline";
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::TOP_BOTTOM) return "TopBottom";
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::SQUARE) return "Square";
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::NONE) return "None";
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::TIGHT) return "Tight";
        if (value == aspose::words::cloud::models::DrawingObject::WrapType::THROUGH) return "Through";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObject::WrapType drawingObjectWrapTypeFromString(const std::string& value)
    {
        if (value == "Inline") return aspose::words::cloud::models::DrawingObject::WrapType::INLINE;
        if (value == "TopBottom") return aspose::words::cloud::models::DrawingObject::WrapType::TOP_BOTTOM;
        if (value == "Square") return aspose::words::cloud::models::DrawingObject::WrapType::SQUARE;
        if (value == "None") return aspose::words::cloud::models::DrawingObject::WrapType::NONE;
        if (value == "Tight") return aspose::words::cloud::models::DrawingObject::WrapType::TIGHT;
        if (value == "Through") return aspose::words::cloud::models::DrawingObject::WrapType::THROUGH;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void DrawingObject::toJson(void* jsonIfc) const
    {
        DrawingObjectLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Height) {
            json["Height"] = *m_Height;
        }
        if (m_ImageDataLink) {
            m_ImageDataLink->toJson(&json["ImageDataLink"]);
        }
        if (m_Left) {
            json["Left"] = *m_Left;
        }
        if (m_OleDataLink) {
            m_OleDataLink->toJson(&json["OleDataLink"]);
        }
        if (m_RelativeHorizontalPosition) {
            json["RelativeHorizontalPosition"] = drawingObjectRelativeHorizontalPositionToString(*m_RelativeHorizontalPosition);
        }
        if (m_RelativeVerticalPosition) {
            json["RelativeVerticalPosition"] = drawingObjectRelativeVerticalPositionToString(*m_RelativeVerticalPosition);
        }
        if (m_RenderLinks) {
            json["RenderLinks"] = ::nlohmann::json::array();
            for (auto& element : *m_RenderLinks) {
                element->toJson(&json["RenderLinks"].emplace_back());
            }
        }
        if (m_Top) {
            json["Top"] = *m_Top;
        }
        if (m_Width) {
            json["Width"] = *m_Width;
        }
        if (m_WrapType) {
            json["WrapType"] = drawingObjectWrapTypeToString(*m_WrapType);
        }
    }

    void DrawingObject::fromJson(const void* jsonIfc)
    {
        DrawingObjectLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Height") && !json["Height"].is_null()) {
            m_Height = std::make_shared< double >(
                json["Height"].get< double >()
            );
        }
        if (json.contains("ImageDataLink") && !json["ImageDataLink"].is_null()) {
            m_ImageDataLink = std::make_shared< aspose::words::cloud::models::WordsApiLink >();
            m_ImageDataLink->fromJson(&json["ImageDataLink"]);
        }
        if (json.contains("Left") && !json["Left"].is_null()) {
            m_Left = std::make_shared< double >(
                json["Left"].get< double >()
            );
        }
        if (json.contains("OleDataLink") && !json["OleDataLink"].is_null()) {
            m_OleDataLink = std::make_shared< aspose::words::cloud::models::WordsApiLink >();
            m_OleDataLink->fromJson(&json["OleDataLink"]);
        }
        if (json.contains("RelativeHorizontalPosition") && !json["RelativeHorizontalPosition"].is_null()) {
            m_RelativeHorizontalPosition = std::make_shared< aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition >(
                drawingObjectRelativeHorizontalPositionFromString(json["RelativeHorizontalPosition"].get< std::string >())
            );
        }
        if (json.contains("RelativeVerticalPosition") && !json["RelativeVerticalPosition"].is_null()) {
            m_RelativeVerticalPosition = std::make_shared< aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition >(
                drawingObjectRelativeVerticalPositionFromString(json["RelativeVerticalPosition"].get< std::string >())
            );
        }
        if (json.contains("RenderLinks") && !json["RenderLinks"].is_null()) {
            m_RenderLinks = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::WordsApiLink>> >();
            for (auto& element : json["RenderLinks"]) {
                m_RenderLinks->emplace_back(std::make_shared< aspose::words::cloud::models::WordsApiLink >())->fromJson(&element);
            }
        }
        if (json.contains("Top") && !json["Top"].is_null()) {
            m_Top = std::make_shared< double >(
                json["Top"].get< double >()
            );
        }
        if (json.contains("Width") && !json["Width"].is_null()) {
            m_Width = std::make_shared< double >(
                json["Width"].get< double >()
            );
        }
        if (json.contains("WrapType") && !json["WrapType"].is_null()) {
            m_WrapType = std::make_shared< aspose::words::cloud::models::DrawingObject::WrapType >(
                drawingObjectWrapTypeFromString(json["WrapType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< double > DrawingObject::getHeight() const
    {
        return m_Height;
    }

    void DrawingObject::setHeight(std::shared_ptr< double > value)
    {
        m_Height = value;
    }

    std::shared_ptr< aspose::words::cloud::models::WordsApiLink > DrawingObject::getImageDataLink() const
    {
        return m_ImageDataLink;
    }

    void DrawingObject::setImageDataLink(std::shared_ptr< aspose::words::cloud::models::WordsApiLink > value)
    {
        m_ImageDataLink = value;
    }

    std::shared_ptr< double > DrawingObject::getLeft() const
    {
        return m_Left;
    }

    void DrawingObject::setLeft(std::shared_ptr< double > value)
    {
        m_Left = value;
    }

    std::shared_ptr< aspose::words::cloud::models::WordsApiLink > DrawingObject::getOleDataLink() const
    {
        return m_OleDataLink;
    }

    void DrawingObject::setOleDataLink(std::shared_ptr< aspose::words::cloud::models::WordsApiLink > value)
    {
        m_OleDataLink = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition > DrawingObject::getRelativeHorizontalPosition() const
    {
        return m_RelativeHorizontalPosition;
    }

    void DrawingObject::setRelativeHorizontalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObject::RelativeHorizontalPosition > value)
    {
        m_RelativeHorizontalPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition > DrawingObject::getRelativeVerticalPosition() const
    {
        return m_RelativeVerticalPosition;
    }

    void DrawingObject::setRelativeVerticalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObject::RelativeVerticalPosition > value)
    {
        m_RelativeVerticalPosition = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::WordsApiLink>> > DrawingObject::getRenderLinks() const
    {
        return m_RenderLinks;
    }

    void DrawingObject::setRenderLinks(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::WordsApiLink>> > value)
    {
        m_RenderLinks = value;
    }

    std::shared_ptr< double > DrawingObject::getTop() const
    {
        return m_Top;
    }

    void DrawingObject::setTop(std::shared_ptr< double > value)
    {
        m_Top = value;
    }

    std::shared_ptr< double > DrawingObject::getWidth() const
    {
        return m_Width;
    }

    void DrawingObject::setWidth(std::shared_ptr< double > value)
    {
        m_Width = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObject::WrapType > DrawingObject::getWrapType() const
    {
        return m_WrapType;
    }

    void DrawingObject::setWrapType(std::shared_ptr< aspose::words::cloud::models::DrawingObject::WrapType > value)
    {
        m_WrapType = value;
    }


    /*
     * DrawingObjectCollection implementation
     */
    void DrawingObjectCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void DrawingObjectCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::LinkElement>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::LinkElement >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::LinkElement>> > DrawingObjectCollection::getList() const
    {
        return m_List;
    }

    void DrawingObjectCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::LinkElement>> > value)
    {
        m_List = value;
    }


    /*
     * DrawingObjectInsert implementation
     */
    inline std::string drawingObjectInsertRelativeHorizontalPositionToString(aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::COLUMN) return "Column";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::LEFT_MARGIN) return "LeftMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::RIGHT_MARGIN) return "RightMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition drawingObjectInsertRelativeHorizontalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::MARGIN;
        if (value == "Page") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::PAGE;
        if (value == "Column") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::COLUMN;
        if (value == "Default") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::DEFAULT;
        if (value == "Character") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::CHARACTER;
        if (value == "LeftMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::LEFT_MARGIN;
        if (value == "RightMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::RIGHT_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectInsertRelativeVerticalPositionToString(aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TABLE_DEFAULT) return "TableDefault";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::PARAGRAPH) return "Paragraph";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TEXT_FRAME_DEFAULT) return "TextFrameDefault";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::LINE) return "Line";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TOP_MARGIN) return "TopMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::BOTTOM_MARGIN) return "BottomMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition drawingObjectInsertRelativeVerticalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::MARGIN;
        if (value == "TableDefault") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TABLE_DEFAULT;
        if (value == "Page") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::PAGE;
        if (value == "Paragraph") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::PARAGRAPH;
        if (value == "TextFrameDefault") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TEXT_FRAME_DEFAULT;
        if (value == "Line") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::LINE;
        if (value == "TopMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::TOP_MARGIN;
        if (value == "BottomMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::BOTTOM_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectInsertWrapTypeToString(aspose::words::cloud::models::DrawingObjectInsert::WrapType value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::INLINE) return "Inline";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::TOP_BOTTOM) return "TopBottom";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::SQUARE) return "Square";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::NONE) return "None";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::TIGHT) return "Tight";
        if (value == aspose::words::cloud::models::DrawingObjectInsert::WrapType::THROUGH) return "Through";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectInsert::WrapType drawingObjectInsertWrapTypeFromString(const std::string& value)
    {
        if (value == "Inline") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::INLINE;
        if (value == "TopBottom") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::TOP_BOTTOM;
        if (value == "Square") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::SQUARE;
        if (value == "None") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::NONE;
        if (value == "Tight") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::TIGHT;
        if (value == "Through") return aspose::words::cloud::models::DrawingObjectInsert::WrapType::THROUGH;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void DrawingObjectInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Height) {
            json["Height"] = *m_Height;
        }
        if (m_Left) {
            json["Left"] = *m_Left;
        }
        if (m_Position) {
            m_Position->toJson(&json["Position"]);
        }
        if (m_RelativeHorizontalPosition) {
            json["RelativeHorizontalPosition"] = drawingObjectInsertRelativeHorizontalPositionToString(*m_RelativeHorizontalPosition);
        }
        if (m_RelativeVerticalPosition) {
            json["RelativeVerticalPosition"] = drawingObjectInsertRelativeVerticalPositionToString(*m_RelativeVerticalPosition);
        }
        if (m_Top) {
            json["Top"] = *m_Top;
        }
        if (m_Width) {
            json["Width"] = *m_Width;
        }
        if (m_WrapType) {
            json["WrapType"] = drawingObjectInsertWrapTypeToString(*m_WrapType);
        }
    }

    void DrawingObjectInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Height") && !json["Height"].is_null()) {
            m_Height = std::make_shared< double >(
                json["Height"].get< double >()
            );
        }
        if (json.contains("Left") && !json["Left"].is_null()) {
            m_Left = std::make_shared< double >(
                json["Left"].get< double >()
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_Position->fromJson(&json["Position"]);
        }
        if (json.contains("RelativeHorizontalPosition") && !json["RelativeHorizontalPosition"].is_null()) {
            m_RelativeHorizontalPosition = std::make_shared< aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition >(
                drawingObjectInsertRelativeHorizontalPositionFromString(json["RelativeHorizontalPosition"].get< std::string >())
            );
        }
        if (json.contains("RelativeVerticalPosition") && !json["RelativeVerticalPosition"].is_null()) {
            m_RelativeVerticalPosition = std::make_shared< aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition >(
                drawingObjectInsertRelativeVerticalPositionFromString(json["RelativeVerticalPosition"].get< std::string >())
            );
        }
        if (json.contains("Top") && !json["Top"].is_null()) {
            m_Top = std::make_shared< double >(
                json["Top"].get< double >()
            );
        }
        if (json.contains("Width") && !json["Width"].is_null()) {
            m_Width = std::make_shared< double >(
                json["Width"].get< double >()
            );
        }
        if (json.contains("WrapType") && !json["WrapType"].is_null()) {
            m_WrapType = std::make_shared< aspose::words::cloud::models::DrawingObjectInsert::WrapType >(
                drawingObjectInsertWrapTypeFromString(json["WrapType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< double > DrawingObjectInsert::getHeight() const
    {
        return m_Height;
    }

    void DrawingObjectInsert::setHeight(std::shared_ptr< double > value)
    {
        m_Height = value;
    }

    std::shared_ptr< double > DrawingObjectInsert::getLeft() const
    {
        return m_Left;
    }

    void DrawingObjectInsert::setLeft(std::shared_ptr< double > value)
    {
        m_Left = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > DrawingObjectInsert::getPosition() const
    {
        return m_Position;
    }

    void DrawingObjectInsert::setPosition(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_Position = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition > DrawingObjectInsert::getRelativeHorizontalPosition() const
    {
        return m_RelativeHorizontalPosition;
    }

    void DrawingObjectInsert::setRelativeHorizontalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::RelativeHorizontalPosition > value)
    {
        m_RelativeHorizontalPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition > DrawingObjectInsert::getRelativeVerticalPosition() const
    {
        return m_RelativeVerticalPosition;
    }

    void DrawingObjectInsert::setRelativeVerticalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::RelativeVerticalPosition > value)
    {
        m_RelativeVerticalPosition = value;
    }

    std::shared_ptr< double > DrawingObjectInsert::getTop() const
    {
        return m_Top;
    }

    void DrawingObjectInsert::setTop(std::shared_ptr< double > value)
    {
        m_Top = value;
    }

    std::shared_ptr< double > DrawingObjectInsert::getWidth() const
    {
        return m_Width;
    }

    void DrawingObjectInsert::setWidth(std::shared_ptr< double > value)
    {
        m_Width = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::WrapType > DrawingObjectInsert::getWrapType() const
    {
        return m_WrapType;
    }

    void DrawingObjectInsert::setWrapType(std::shared_ptr< aspose::words::cloud::models::DrawingObjectInsert::WrapType > value)
    {
        m_WrapType = value;
    }


    /*
     * DrawingObjectLink implementation
     */
    void DrawingObjectLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
    }

    void DrawingObjectLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
    }




    /*
     * DrawingObjectResponse implementation
     */
    void DrawingObjectResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DrawingObject) {
            m_DrawingObject->toJson(&json["DrawingObject"]);
        }
    }

    void DrawingObjectResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DrawingObject") && !json["DrawingObject"].is_null()) {
            m_DrawingObject = std::make_shared< aspose::words::cloud::models::DrawingObject >();
            m_DrawingObject->fromJson(&json["DrawingObject"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObject > DrawingObjectResponse::getDrawingObject() const
    {
        return m_DrawingObject;
    }

    void DrawingObjectResponse::setDrawingObject(std::shared_ptr< aspose::words::cloud::models::DrawingObject > value)
    {
        m_DrawingObject = value;
    }


    /*
     * DrawingObjectsResponse implementation
     */
    void DrawingObjectsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DrawingObjects) {
            m_DrawingObjects->toJson(&json["DrawingObjects"]);
        }
    }

    void DrawingObjectsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DrawingObjects") && !json["DrawingObjects"].is_null()) {
            m_DrawingObjects = std::make_shared< aspose::words::cloud::models::DrawingObjectCollection >();
            m_DrawingObjects->fromJson(&json["DrawingObjects"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectCollection > DrawingObjectsResponse::getDrawingObjects() const
    {
        return m_DrawingObjects;
    }

    void DrawingObjectsResponse::setDrawingObjects(std::shared_ptr< aspose::words::cloud::models::DrawingObjectCollection > value)
    {
        m_DrawingObjects = value;
    }


    /*
     * DrawingObjectUpdate implementation
     */
    inline std::string drawingObjectUpdateRelativeHorizontalPositionToString(aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::COLUMN) return "Column";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::LEFT_MARGIN) return "LeftMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::RIGHT_MARGIN) return "RightMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition drawingObjectUpdateRelativeHorizontalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::MARGIN;
        if (value == "Page") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::PAGE;
        if (value == "Column") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::COLUMN;
        if (value == "Default") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::DEFAULT;
        if (value == "Character") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::CHARACTER;
        if (value == "LeftMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::LEFT_MARGIN;
        if (value == "RightMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::RIGHT_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectUpdateRelativeVerticalPositionToString(aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::MARGIN) return "Margin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TABLE_DEFAULT) return "TableDefault";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::PAGE) return "Page";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::PARAGRAPH) return "Paragraph";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TEXT_FRAME_DEFAULT) return "TextFrameDefault";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::LINE) return "Line";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TOP_MARGIN) return "TopMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::BOTTOM_MARGIN) return "BottomMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::INSIDE_MARGIN) return "InsideMargin";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::OUTSIDE_MARGIN) return "OutsideMargin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition drawingObjectUpdateRelativeVerticalPositionFromString(const std::string& value)
    {
        if (value == "Margin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::MARGIN;
        if (value == "TableDefault") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TABLE_DEFAULT;
        if (value == "Page") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::PAGE;
        if (value == "Paragraph") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::PARAGRAPH;
        if (value == "TextFrameDefault") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TEXT_FRAME_DEFAULT;
        if (value == "Line") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::LINE;
        if (value == "TopMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::TOP_MARGIN;
        if (value == "BottomMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::BOTTOM_MARGIN;
        if (value == "InsideMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::INSIDE_MARGIN;
        if (value == "OutsideMargin") return aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition::OUTSIDE_MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string drawingObjectUpdateWrapTypeToString(aspose::words::cloud::models::DrawingObjectUpdate::WrapType value)
    {
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::INLINE) return "Inline";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::TOP_BOTTOM) return "TopBottom";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::SQUARE) return "Square";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::NONE) return "None";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::TIGHT) return "Tight";
        if (value == aspose::words::cloud::models::DrawingObjectUpdate::WrapType::THROUGH) return "Through";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::DrawingObjectUpdate::WrapType drawingObjectUpdateWrapTypeFromString(const std::string& value)
    {
        if (value == "Inline") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::INLINE;
        if (value == "TopBottom") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::TOP_BOTTOM;
        if (value == "Square") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::SQUARE;
        if (value == "None") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::NONE;
        if (value == "Tight") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::TIGHT;
        if (value == "Through") return aspose::words::cloud::models::DrawingObjectUpdate::WrapType::THROUGH;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void DrawingObjectUpdate::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Height) {
            json["Height"] = *m_Height;
        }
        if (m_Left) {
            json["Left"] = *m_Left;
        }
        if (m_RelativeHorizontalPosition) {
            json["RelativeHorizontalPosition"] = drawingObjectUpdateRelativeHorizontalPositionToString(*m_RelativeHorizontalPosition);
        }
        if (m_RelativeVerticalPosition) {
            json["RelativeVerticalPosition"] = drawingObjectUpdateRelativeVerticalPositionToString(*m_RelativeVerticalPosition);
        }
        if (m_Top) {
            json["Top"] = *m_Top;
        }
        if (m_Width) {
            json["Width"] = *m_Width;
        }
        if (m_WrapType) {
            json["WrapType"] = drawingObjectUpdateWrapTypeToString(*m_WrapType);
        }
    }

    void DrawingObjectUpdate::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Height") && !json["Height"].is_null()) {
            m_Height = std::make_shared< double >(
                json["Height"].get< double >()
            );
        }
        if (json.contains("Left") && !json["Left"].is_null()) {
            m_Left = std::make_shared< double >(
                json["Left"].get< double >()
            );
        }
        if (json.contains("RelativeHorizontalPosition") && !json["RelativeHorizontalPosition"].is_null()) {
            m_RelativeHorizontalPosition = std::make_shared< aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition >(
                drawingObjectUpdateRelativeHorizontalPositionFromString(json["RelativeHorizontalPosition"].get< std::string >())
            );
        }
        if (json.contains("RelativeVerticalPosition") && !json["RelativeVerticalPosition"].is_null()) {
            m_RelativeVerticalPosition = std::make_shared< aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition >(
                drawingObjectUpdateRelativeVerticalPositionFromString(json["RelativeVerticalPosition"].get< std::string >())
            );
        }
        if (json.contains("Top") && !json["Top"].is_null()) {
            m_Top = std::make_shared< double >(
                json["Top"].get< double >()
            );
        }
        if (json.contains("Width") && !json["Width"].is_null()) {
            m_Width = std::make_shared< double >(
                json["Width"].get< double >()
            );
        }
        if (json.contains("WrapType") && !json["WrapType"].is_null()) {
            m_WrapType = std::make_shared< aspose::words::cloud::models::DrawingObjectUpdate::WrapType >(
                drawingObjectUpdateWrapTypeFromString(json["WrapType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< double > DrawingObjectUpdate::getHeight() const
    {
        return m_Height;
    }

    void DrawingObjectUpdate::setHeight(std::shared_ptr< double > value)
    {
        m_Height = value;
    }

    std::shared_ptr< double > DrawingObjectUpdate::getLeft() const
    {
        return m_Left;
    }

    void DrawingObjectUpdate::setLeft(std::shared_ptr< double > value)
    {
        m_Left = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition > DrawingObjectUpdate::getRelativeHorizontalPosition() const
    {
        return m_RelativeHorizontalPosition;
    }

    void DrawingObjectUpdate::setRelativeHorizontalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::RelativeHorizontalPosition > value)
    {
        m_RelativeHorizontalPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition > DrawingObjectUpdate::getRelativeVerticalPosition() const
    {
        return m_RelativeVerticalPosition;
    }

    void DrawingObjectUpdate::setRelativeVerticalPosition(std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::RelativeVerticalPosition > value)
    {
        m_RelativeVerticalPosition = value;
    }

    std::shared_ptr< double > DrawingObjectUpdate::getTop() const
    {
        return m_Top;
    }

    void DrawingObjectUpdate::setTop(std::shared_ptr< double > value)
    {
        m_Top = value;
    }

    std::shared_ptr< double > DrawingObjectUpdate::getWidth() const
    {
        return m_Width;
    }

    void DrawingObjectUpdate::setWidth(std::shared_ptr< double > value)
    {
        m_Width = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::WrapType > DrawingObjectUpdate::getWrapType() const
    {
        return m_WrapType;
    }

    void DrawingObjectUpdate::setWrapType(std::shared_ptr< aspose::words::cloud::models::DrawingObjectUpdate::WrapType > value)
    {
        m_WrapType = value;
    }


    /*
     * EmfSaveOptionsData implementation
     */
    void EmfSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
    }

    void EmfSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
    }




    /*
     * EpubSaveOptionsData implementation
     */
    void EpubSaveOptionsData::toJson(void* jsonIfc) const
    {
        HtmlSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_EpubNavigationMapLevel) {
            json["EpubNavigationMapLevel"] = *m_EpubNavigationMapLevel;
        }
    }

    void EpubSaveOptionsData::fromJson(const void* jsonIfc)
    {
        HtmlSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("EpubNavigationMapLevel") && !json["EpubNavigationMapLevel"].is_null()) {
            m_EpubNavigationMapLevel = std::make_shared< int32_t >(
                json["EpubNavigationMapLevel"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > EpubSaveOptionsData::getEpubNavigationMapLevel() const
    {
        return m_EpubNavigationMapLevel;
    }

    void EpubSaveOptionsData::setEpubNavigationMapLevel(std::shared_ptr< int32_t > value)
    {
        m_EpubNavigationMapLevel = value;
    }


    /*
     * Error implementation
     */
    void Error::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Code) {
            json["Code"] = convertUtf16(*m_Code);
        }
        if (m_Description) {
            json["Description"] = convertUtf16(*m_Description);
        }
        if (m_InnerError) {
            m_InnerError->toJson(&json["InnerError"]);
        }
        if (m_Message) {
            json["Message"] = convertUtf16(*m_Message);
        }
    }

    void Error::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Code") && !json["Code"].is_null()) {
            m_Code = std::make_shared< std::wstring >(
                convertUtf8( json["Code"].get< std::string >() )
            );
        }
        if (json.contains("Description") && !json["Description"].is_null()) {
            m_Description = std::make_shared< std::wstring >(
                convertUtf8( json["Description"].get< std::string >() )
            );
        }
        if (json.contains("InnerError") && !json["InnerError"].is_null()) {
            m_InnerError = std::make_shared< aspose::words::cloud::models::ErrorDetails >();
            m_InnerError->fromJson(&json["InnerError"]);
        }
        if (json.contains("Message") && !json["Message"].is_null()) {
            m_Message = std::make_shared< std::wstring >(
                convertUtf8( json["Message"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Error::getCode() const
    {
        return m_Code;
    }

    void Error::setCode(std::shared_ptr< std::wstring > value)
    {
        m_Code = value;
    }

    std::shared_ptr< std::wstring > Error::getDescription() const
    {
        return m_Description;
    }

    void Error::setDescription(std::shared_ptr< std::wstring > value)
    {
        m_Description = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ErrorDetails > Error::getInnerError() const
    {
        return m_InnerError;
    }

    void Error::setInnerError(std::shared_ptr< aspose::words::cloud::models::ErrorDetails > value)
    {
        m_InnerError = value;
    }

    std::shared_ptr< std::wstring > Error::getMessage() const
    {
        return m_Message;
    }

    void Error::setMessage(std::shared_ptr< std::wstring > value)
    {
        m_Message = value;
    }


    /*
     * ErrorDetails implementation
     */
    void ErrorDetails::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ErrorDateTime) {
            json["ErrorDateTime"] = convertUtf16(*m_ErrorDateTime);
        }
        if (m_RequestId) {
            json["RequestId"] = convertUtf16(*m_RequestId);
        }
    }

    void ErrorDetails::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ErrorDateTime") && !json["ErrorDateTime"].is_null()) {
            m_ErrorDateTime = std::make_shared< std::wstring >(
                convertUtf8( json["ErrorDateTime"].get< std::string >() )
            );
        }
        if (json.contains("RequestId") && !json["RequestId"].is_null()) {
            m_RequestId = std::make_shared< std::wstring >(
                convertUtf8( json["RequestId"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ErrorDetails::getErrorDateTime() const
    {
        return m_ErrorDateTime;
    }

    void ErrorDetails::setErrorDateTime(std::shared_ptr< std::wstring > value)
    {
        m_ErrorDateTime = value;
    }

    std::shared_ptr< std::wstring > ErrorDetails::getRequestId() const
    {
        return m_RequestId;
    }

    void ErrorDetails::setRequestId(std::shared_ptr< std::wstring > value)
    {
        m_RequestId = value;
    }


    /*
     * Field implementation
     */
    void Field::toJson(void* jsonIfc) const
    {
        FieldLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_LocaleId) {
            json["LocaleId"] = convertUtf16(*m_LocaleId);
        }
        if (m_Result) {
            json["Result"] = convertUtf16(*m_Result);
        }
    }

    void Field::fromJson(const void* jsonIfc)
    {
        FieldLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("LocaleId") && !json["LocaleId"].is_null()) {
            m_LocaleId = std::make_shared< std::wstring >(
                convertUtf8( json["LocaleId"].get< std::string >() )
            );
        }
        if (json.contains("Result") && !json["Result"].is_null()) {
            m_Result = std::make_shared< std::wstring >(
                convertUtf8( json["Result"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Field::getLocaleId() const
    {
        return m_LocaleId;
    }

    void Field::setLocaleId(std::shared_ptr< std::wstring > value)
    {
        m_LocaleId = value;
    }

    std::shared_ptr< std::wstring > Field::getResult() const
    {
        return m_Result;
    }

    void Field::setResult(std::shared_ptr< std::wstring > value)
    {
        m_Result = value;
    }


    /*
     * FieldBase implementation
     */
    void FieldBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FieldCode) {
            json["FieldCode"] = convertUtf16(*m_FieldCode);
        }
        if (m_LocaleId) {
            json["LocaleId"] = convertUtf16(*m_LocaleId);
        }
    }

    void FieldBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FieldCode") && !json["FieldCode"].is_null()) {
            m_FieldCode = std::make_shared< std::wstring >(
                convertUtf8( json["FieldCode"].get< std::string >() )
            );
        }
        if (json.contains("LocaleId") && !json["LocaleId"].is_null()) {
            m_LocaleId = std::make_shared< std::wstring >(
                convertUtf8( json["LocaleId"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > FieldBase::getFieldCode() const
    {
        return m_FieldCode;
    }

    void FieldBase::setFieldCode(std::shared_ptr< std::wstring > value)
    {
        m_FieldCode = value;
    }

    std::shared_ptr< std::wstring > FieldBase::getLocaleId() const
    {
        return m_LocaleId;
    }

    void FieldBase::setLocaleId(std::shared_ptr< std::wstring > value)
    {
        m_LocaleId = value;
    }


    /*
     * FieldCollection implementation
     */
    void FieldCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void FieldCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Field>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::Field >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Field>> > FieldCollection::getList() const
    {
        return m_List;
    }

    void FieldCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Field>> > value)
    {
        m_List = value;
    }


    /*
     * FieldInsert implementation
     */
    void FieldInsert::toJson(void* jsonIfc) const
    {
        FieldBase::toJson(jsonIfc);
    }

    void FieldInsert::fromJson(const void* jsonIfc)
    {
        FieldBase::fromJson(jsonIfc);
    }




    /*
     * FieldLink implementation
     */
    void FieldLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FieldCode) {
            json["FieldCode"] = convertUtf16(*m_FieldCode);
        }
    }

    void FieldLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FieldCode") && !json["FieldCode"].is_null()) {
            m_FieldCode = std::make_shared< std::wstring >(
                convertUtf8( json["FieldCode"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > FieldLink::getFieldCode() const
    {
        return m_FieldCode;
    }

    void FieldLink::setFieldCode(std::shared_ptr< std::wstring > value)
    {
        m_FieldCode = value;
    }


    /*
     * FieldNames implementation
     */
    void FieldNames::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Names) {
            json["Names"] = ::nlohmann::json::array();
            for (auto& element : *m_Names) {
                json["Names"].push_back(convertUtf16(*element));
            }
        }
    }

    void FieldNames::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Names") && !json["Names"].is_null()) {
            m_Names = std::make_shared< std::vector<std::shared_ptr<std::wstring>> >();
            for (auto& element : json["Names"]) {
                m_Names->push_back(std::make_shared< std::wstring >(convertUtf8( element.get< std::string >() )));
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > FieldNames::getNames() const
    {
        return m_Names;
    }

    void FieldNames::setNames(std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > value)
    {
        m_Names = value;
    }


    /*
     * FieldNamesResponse implementation
     */
    void FieldNamesResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FieldNames) {
            m_FieldNames->toJson(&json["FieldNames"]);
        }
    }

    void FieldNamesResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FieldNames") && !json["FieldNames"].is_null()) {
            m_FieldNames = std::make_shared< aspose::words::cloud::models::FieldNames >();
            m_FieldNames->fromJson(&json["FieldNames"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FieldNames > FieldNamesResponse::getFieldNames() const
    {
        return m_FieldNames;
    }

    void FieldNamesResponse::setFieldNames(std::shared_ptr< aspose::words::cloud::models::FieldNames > value)
    {
        m_FieldNames = value;
    }


    /*
     * FieldResponse implementation
     */
    void FieldResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Field) {
            m_Field->toJson(&json["Field"]);
        }
    }

    void FieldResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Field") && !json["Field"].is_null()) {
            m_Field = std::make_shared< aspose::words::cloud::models::Field >();
            m_Field->fromJson(&json["Field"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Field > FieldResponse::getField() const
    {
        return m_Field;
    }

    void FieldResponse::setField(std::shared_ptr< aspose::words::cloud::models::Field > value)
    {
        m_Field = value;
    }


    /*
     * FieldsResponse implementation
     */
    void FieldsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Fields) {
            m_Fields->toJson(&json["Fields"]);
        }
    }

    void FieldsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Fields") && !json["Fields"].is_null()) {
            m_Fields = std::make_shared< aspose::words::cloud::models::FieldCollection >();
            m_Fields->fromJson(&json["Fields"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FieldCollection > FieldsResponse::getFields() const
    {
        return m_Fields;
    }

    void FieldsResponse::setFields(std::shared_ptr< aspose::words::cloud::models::FieldCollection > value)
    {
        m_Fields = value;
    }


    /*
     * FieldUpdate implementation
     */
    void FieldUpdate::toJson(void* jsonIfc) const
    {
        FieldBase::toJson(jsonIfc);
    }

    void FieldUpdate::fromJson(const void* jsonIfc)
    {
        FieldBase::fromJson(jsonIfc);
    }




    /*
     * FileLink implementation
     */
    void FileLink::toJson(void* jsonIfc) const
    {
        Link::toJson(jsonIfc);
    }

    void FileLink::fromJson(const void* jsonIfc)
    {
        Link::fromJson(jsonIfc);
    }




    /*
     * FilesList implementation
     */
    void FilesList::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Value) {
            json["Value"] = ::nlohmann::json::array();
            for (auto& element : *m_Value) {
                element->toJson(&json["Value"].emplace_back());
            }
        }
    }

    void FilesList::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Value") && !json["Value"].is_null()) {
            m_Value = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::StorageFile>> >();
            for (auto& element : json["Value"]) {
                m_Value->emplace_back(std::make_shared< aspose::words::cloud::models::StorageFile >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::StorageFile>> > FilesList::getValue() const
    {
        return m_Value;
    }

    void FilesList::setValue(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::StorageFile>> > value)
    {
        m_Value = value;
    }


    /*
     * FilesUploadResult implementation
     */
    void FilesUploadResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Errors) {
            json["Errors"] = ::nlohmann::json::array();
            for (auto& element : *m_Errors) {
                element->toJson(&json["Errors"].emplace_back());
            }
        }
        if (m_Uploaded) {
            json["Uploaded"] = ::nlohmann::json::array();
            for (auto& element : *m_Uploaded) {
                json["Uploaded"].push_back(convertUtf16(*element));
            }
        }
    }

    void FilesUploadResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Errors") && !json["Errors"].is_null()) {
            m_Errors = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Error>> >();
            for (auto& element : json["Errors"]) {
                m_Errors->emplace_back(std::make_shared< aspose::words::cloud::models::Error >())->fromJson(&element);
            }
        }
        if (json.contains("Uploaded") && !json["Uploaded"].is_null()) {
            m_Uploaded = std::make_shared< std::vector<std::shared_ptr<std::wstring>> >();
            for (auto& element : json["Uploaded"]) {
                m_Uploaded->push_back(std::make_shared< std::wstring >(convertUtf8( element.get< std::string >() )));
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Error>> > FilesUploadResult::getErrors() const
    {
        return m_Errors;
    }

    void FilesUploadResult::setErrors(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Error>> > value)
    {
        m_Errors = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > FilesUploadResult::getUploaded() const
    {
        return m_Uploaded;
    }

    void FilesUploadResult::setUploaded(std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > value)
    {
        m_Uploaded = value;
    }


    /*
     * FixedPageSaveOptionsData implementation
     */
    void FixedPageSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ColorMode) {
            json["ColorMode"] = convertUtf16(*m_ColorMode);
        }
        if (m_JpegQuality) {
            json["JpegQuality"] = *m_JpegQuality;
        }
        if (m_MetafileRenderingOptions) {
            m_MetafileRenderingOptions->toJson(&json["MetafileRenderingOptions"]);
        }
        if (m_NumeralFormat) {
            json["NumeralFormat"] = convertUtf16(*m_NumeralFormat);
        }
        if (m_OptimizeOutput) {
            json["OptimizeOutput"] = *m_OptimizeOutput;
        }
        if (m_PageCount) {
            json["PageCount"] = *m_PageCount;
        }
        if (m_PageIndex) {
            json["PageIndex"] = *m_PageIndex;
        }
    }

    void FixedPageSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ColorMode") && !json["ColorMode"].is_null()) {
            m_ColorMode = std::make_shared< std::wstring >(
                convertUtf8( json["ColorMode"].get< std::string >() )
            );
        }
        if (json.contains("JpegQuality") && !json["JpegQuality"].is_null()) {
            m_JpegQuality = std::make_shared< int32_t >(
                json["JpegQuality"].get< int32_t >()
            );
        }
        if (json.contains("MetafileRenderingOptions") && !json["MetafileRenderingOptions"].is_null()) {
            m_MetafileRenderingOptions = std::make_shared< aspose::words::cloud::models::MetafileRenderingOptionsData >();
            m_MetafileRenderingOptions->fromJson(&json["MetafileRenderingOptions"]);
        }
        if (json.contains("NumeralFormat") && !json["NumeralFormat"].is_null()) {
            m_NumeralFormat = std::make_shared< std::wstring >(
                convertUtf8( json["NumeralFormat"].get< std::string >() )
            );
        }
        if (json.contains("OptimizeOutput") && !json["OptimizeOutput"].is_null()) {
            m_OptimizeOutput = std::make_shared< bool >(
                json["OptimizeOutput"].get< bool >()
            );
        }
        if (json.contains("PageCount") && !json["PageCount"].is_null()) {
            m_PageCount = std::make_shared< int32_t >(
                json["PageCount"].get< int32_t >()
            );
        }
        if (json.contains("PageIndex") && !json["PageIndex"].is_null()) {
            m_PageIndex = std::make_shared< int32_t >(
                json["PageIndex"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< std::wstring > FixedPageSaveOptionsData::getColorMode() const
    {
        return m_ColorMode;
    }

    void FixedPageSaveOptionsData::setColorMode(std::shared_ptr< std::wstring > value)
    {
        m_ColorMode = value;
    }

    std::shared_ptr< int32_t > FixedPageSaveOptionsData::getJpegQuality() const
    {
        return m_JpegQuality;
    }

    void FixedPageSaveOptionsData::setJpegQuality(std::shared_ptr< int32_t > value)
    {
        m_JpegQuality = value;
    }

    std::shared_ptr< aspose::words::cloud::models::MetafileRenderingOptionsData > FixedPageSaveOptionsData::getMetafileRenderingOptions() const
    {
        return m_MetafileRenderingOptions;
    }

    void FixedPageSaveOptionsData::setMetafileRenderingOptions(std::shared_ptr< aspose::words::cloud::models::MetafileRenderingOptionsData > value)
    {
        m_MetafileRenderingOptions = value;
    }

    std::shared_ptr< std::wstring > FixedPageSaveOptionsData::getNumeralFormat() const
    {
        return m_NumeralFormat;
    }

    void FixedPageSaveOptionsData::setNumeralFormat(std::shared_ptr< std::wstring > value)
    {
        m_NumeralFormat = value;
    }

    std::shared_ptr< bool > FixedPageSaveOptionsData::getOptimizeOutput() const
    {
        return m_OptimizeOutput;
    }

    void FixedPageSaveOptionsData::setOptimizeOutput(std::shared_ptr< bool > value)
    {
        m_OptimizeOutput = value;
    }

    std::shared_ptr< int32_t > FixedPageSaveOptionsData::getPageCount() const
    {
        return m_PageCount;
    }

    void FixedPageSaveOptionsData::setPageCount(std::shared_ptr< int32_t > value)
    {
        m_PageCount = value;
    }

    std::shared_ptr< int32_t > FixedPageSaveOptionsData::getPageIndex() const
    {
        return m_PageIndex;
    }

    void FixedPageSaveOptionsData::setPageIndex(std::shared_ptr< int32_t > value)
    {
        m_PageIndex = value;
    }


    /*
     * Font implementation
     */
    inline std::string fontStyleIdentifierToString(aspose::words::cloud::models::Font::StyleIdentifier value)
    {
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING1) return "Heading1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING2) return "Heading2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING3) return "Heading3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING4) return "Heading4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING5) return "Heading5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING6) return "Heading6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING7) return "Heading7";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING8) return "Heading8";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADING9) return "Heading9";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX1) return "Index1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX2) return "Index2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX3) return "Index3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX4) return "Index4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX5) return "Index5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX6) return "Index6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX7) return "Index7";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX8) return "Index8";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX9) return "Index9";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC1) return "Toc1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC2) return "Toc2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC3) return "Toc3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC4) return "Toc4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC5) return "Toc5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC6) return "Toc6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC7) return "Toc7";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC8) return "Toc8";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC9) return "Toc9";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NORMAL_INDENT) return "NormalIndent";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::FOOTNOTE_TEXT) return "FootnoteText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_TEXT) return "CommentText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HEADER) return "Header";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::FOOTER) return "Footer";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INDEX_HEADING) return "IndexHeading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::CAPTION) return "Caption";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_OF_FIGURES) return "TableOfFigures";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::ENVELOPE_ADDRESS) return "EnvelopeAddress";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::ENVELOPE_RETURN) return "EnvelopeReturn";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::FOOTNOTE_REFERENCE) return "FootnoteReference";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_REFERENCE) return "CommentReference";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LINE_NUMBER) return "LineNumber";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PAGE_NUMBER) return "PageNumber";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::ENDNOTE_REFERENCE) return "EndnoteReference";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::ENDNOTE_TEXT) return "EndnoteText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_OF_AUTHORITIES) return "TableOfAuthorities";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MACRO) return "Macro";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOA_HEADING) return "ToaHeading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST) return "List";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET) return "ListBullet";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER) return "ListNumber";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST2) return "List2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST3) return "List3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST4) return "List4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST5) return "List5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET2) return "ListBullet2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET3) return "ListBullet3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET4) return "ListBullet4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET5) return "ListBullet5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER2) return "ListNumber2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER3) return "ListNumber3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER4) return "ListNumber4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER5) return "ListNumber5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TITLE) return "Title";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::CLOSING) return "Closing";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SIGNATURE) return "Signature";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DEFAULT_PARAGRAPH_FONT) return "DefaultParagraphFont";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT) return "BodyText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND) return "BodyTextInd";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE) return "ListContinue";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE2) return "ListContinue2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE3) return "ListContinue3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE4) return "ListContinue4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE5) return "ListContinue5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MESSAGE_HEADER) return "MessageHeader";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SUBTITLE) return "Subtitle";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SALUTATION) return "Salutation";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DATE) return "Date";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT1_I) return "BodyText1I";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT1_I2) return "BodyText1I2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NOTE_HEADING) return "NoteHeading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT2) return "BodyText2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT3) return "BodyText3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND2) return "BodyTextInd2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND3) return "BodyTextInd3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BLOCK_TEXT) return "BlockText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HYPERLINK) return "Hyperlink";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::FOLLOWED_HYPERLINK) return "FollowedHyperlink";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::STRONG) return "Strong";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::EMPHASIS) return "Emphasis";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DOCUMENT_MAP) return "DocumentMap";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TEXT) return "PlainText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::EMAIL_SIGNATURE) return "EmailSignature";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_TOP_OF_FORM) return "HtmlTopOfForm";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_BOTTOM_OF_FORM) return "HtmlBottomOfForm";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NORMAL_WEB) return "NormalWeb";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_ACRONYM) return "HtmlAcronym";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_ADDRESS) return "HtmlAddress";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_CITE) return "HtmlCite";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_CODE) return "HtmlCode";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_DEFINITION) return "HtmlDefinition";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_KEYBOARD) return "HtmlKeyboard";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_PREFORMATTED) return "HtmlPreformatted";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_SAMPLE) return "HtmlSample";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_TYPEWRITER) return "HtmlTypewriter";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::HTML_VARIABLE) return "HtmlVariable";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_NORMAL) return "TableNormal";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_SUBJECT) return "CommentSubject";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NO_LIST) return "NoList";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST1) return "OutlineList1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST2) return "OutlineList2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST3) return "OutlineList3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE1) return "TableSimple1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE2) return "TableSimple2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE3) return "TableSimple3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC1) return "TableClassic1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC2) return "TableClassic2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC3) return "TableClassic3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC4) return "TableClassic4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL1) return "TableColorful1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL2) return "TableColorful2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL3) return "TableColorful3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS1) return "TableColumns1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS2) return "TableColumns2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS3) return "TableColumns3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS4) return "TableColumns4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS5) return "TableColumns5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID1) return "TableGrid1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID2) return "TableGrid2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID3) return "TableGrid3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID4) return "TableGrid4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID5) return "TableGrid5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID6) return "TableGrid6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID7) return "TableGrid7";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID8) return "TableGrid8";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST1) return "TableList1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST2) return "TableList2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST3) return "TableList3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST4) return "TableList4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST5) return "TableList5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST6) return "TableList6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST7) return "TableList7";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST8) return "TableList8";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS1) return "Table3DEffects1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS2) return "Table3DEffects2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS3) return "Table3DEffects3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CONTEMPORARY) return "TableContemporary";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_ELEGANT) return "TableElegant";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_PROFESSIONAL) return "TableProfessional";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SUBTLE1) return "TableSubtle1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SUBTLE2) return "TableSubtle2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB1) return "TableWeb1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB2) return "TableWeb2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB3) return "TableWeb3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BALLOON_TEXT) return "BalloonText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID) return "TableGrid";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_THEME) return "TableTheme";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLACEHOLDER_TEXT) return "PlaceholderText";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NO_SPACING) return "NoSpacing";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING) return "LightShading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST) return "LightList";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID) return "LightGrid";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1) return "MediumShading1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2) return "MediumShading2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1) return "MediumList1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2) return "MediumList2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1) return "MediumGrid1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2) return "MediumGrid2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3) return "MediumGrid3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST) return "DarkList";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING) return "ColorfulShading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST) return "ColorfulList";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID) return "ColorfulGrid";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT1) return "LightShadingAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT1) return "LightListAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT1) return "LightGridAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT1) return "MediumShading1Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT1) return "MediumShading2Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT1) return "MediumList1Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::REVISION) return "Revision";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_PARAGRAPH) return "ListParagraph";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::QUOTE) return "Quote";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_QUOTE) return "IntenseQuote";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT1) return "MediumList2Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT1) return "MediumGrid1Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT1) return "MediumGrid2Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT1) return "MediumGrid3Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT1) return "DarkListAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT1) return "ColorfulShadingAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT1) return "ColorfulListAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT1) return "ColorfulGridAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT2) return "LightShadingAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT2) return "LightListAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT2) return "LightGridAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT2) return "MediumShading1Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT2) return "MediumShading2Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT2) return "MediumList1Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT2) return "MediumList2Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT2) return "MediumGrid1Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT2) return "MediumGrid2Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT2) return "MediumGrid3Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT2) return "DarkListAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT2) return "ColorfulShadingAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT2) return "ColorfulListAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT2) return "ColorfulGridAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT3) return "LightShadingAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT3) return "LightListAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT3) return "LightGridAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT3) return "MediumShading1Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT3) return "MediumShading2Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT3) return "MediumList1Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT3) return "MediumList2Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT3) return "MediumGrid1Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT3) return "MediumGrid2Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT3) return "MediumGrid3Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT3) return "DarkListAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT3) return "ColorfulShadingAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT3) return "ColorfulListAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT3) return "ColorfulGridAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT4) return "LightShadingAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT4) return "LightListAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT4) return "LightGridAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT4) return "MediumShading1Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT4) return "MediumShading2Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT4) return "MediumList1Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT4) return "MediumList2Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT4) return "MediumGrid1Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT4) return "MediumGrid2Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT4) return "MediumGrid3Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT4) return "DarkListAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT4) return "ColorfulShadingAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT4) return "ColorfulListAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT4) return "ColorfulGridAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT5) return "LightShadingAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT5) return "LightListAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT5) return "LightGridAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT5) return "MediumShading1Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT5) return "MediumShading2Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT5) return "MediumList1Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT5) return "MediumList2Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT5) return "MediumGrid1Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT5) return "MediumGrid2Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT5) return "MediumGrid3Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT5) return "DarkListAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT5) return "ColorfulShadingAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT5) return "ColorfulListAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT5) return "ColorfulGridAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT6) return "LightShadingAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT6) return "LightListAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT6) return "LightGridAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT6) return "MediumShading1Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT6) return "MediumShading2Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT6) return "MediumList1Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT6) return "MediumList2Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT6) return "MediumGrid1Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT6) return "MediumGrid2Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT6) return "MediumGrid3Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT6) return "DarkListAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT6) return "ColorfulShadingAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT6) return "ColorfulListAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT6) return "ColorfulGridAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SUBTLE_EMPHASIS) return "SubtleEmphasis";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_EMPHASIS) return "IntenseEmphasis";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SUBTLE_REFERENCE) return "SubtleReference";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_REFERENCE) return "IntenseReference";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BOOK_TITLE) return "BookTitle";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::BIBLIOGRAPHY) return "Bibliography";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TOC_HEADING) return "TocHeading";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE1) return "PlainTable1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE2) return "PlainTable2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE3) return "PlainTable3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE4) return "PlainTable4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE5) return "PlainTable5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID_LIGHT) return "TableGridLight";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT) return "GridTable1Light";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2) return "GridTable2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3) return "GridTable3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4) return "GridTable4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK) return "GridTable5Dark";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL) return "GridTable6Colorful";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL) return "GridTable7Colorful";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1) return "GridTable1LightAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT1) return "GridTable2Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT1) return "GridTable3Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT1) return "GridTable4Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1) return "GridTable5DarkAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1) return "GridTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1) return "GridTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2) return "GridTable1LightAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT2) return "GridTable2Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT2) return "GridTable3Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT2) return "GridTable4Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2) return "GridTable5DarkAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2) return "GridTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2) return "GridTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3) return "GridTable1LightAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT3) return "GridTable2Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT3) return "GridTable3Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT3) return "GridTable4Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3) return "GridTable5DarkAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3) return "GridTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3) return "GridTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4) return "GridTable1LightAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT4) return "GridTable2Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT4) return "GridTable3Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT4) return "GridTable4Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4) return "GridTable5DarkAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4) return "GridTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4) return "GridTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5) return "GridTable1LightAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT5) return "GridTable2Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT5) return "GridTable3Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT5) return "GridTable4Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5) return "GridTable5DarkAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5) return "GridTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5) return "GridTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6) return "GridTable1LightAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT6) return "GridTable2Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT6) return "GridTable3Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT6) return "GridTable4Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6) return "GridTable5DarkAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6) return "GridTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6) return "GridTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT) return "ListTable1Light";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2) return "ListTable2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3) return "ListTable3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4) return "ListTable4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK) return "ListTable5Dark";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL) return "ListTable6Colorful";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL) return "ListTable7Colorful";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1) return "ListTable1LightAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT1) return "ListTable2Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT1) return "ListTable3Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT1) return "ListTable4Accent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1) return "ListTable5DarkAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1) return "ListTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1) return "ListTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2) return "ListTable1LightAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT2) return "ListTable2Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT2) return "ListTable3Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT2) return "ListTable4Accent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2) return "ListTable5DarkAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2) return "ListTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2) return "ListTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3) return "ListTable1LightAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT3) return "ListTable2Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT3) return "ListTable3Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT3) return "ListTable4Accent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3) return "ListTable5DarkAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3) return "ListTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3) return "ListTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4) return "ListTable1LightAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT4) return "ListTable2Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT4) return "ListTable3Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT4) return "ListTable4Accent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4) return "ListTable5DarkAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4) return "ListTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4) return "ListTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5) return "ListTable1LightAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT5) return "ListTable2Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT5) return "ListTable3Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT5) return "ListTable4Accent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5) return "ListTable5DarkAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5) return "ListTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5) return "ListTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6) return "ListTable1LightAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT6) return "ListTable2Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT6) return "ListTable3Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT6) return "ListTable4Accent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6) return "ListTable5DarkAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6) return "ListTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6) return "ListTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::SMART_LINK) return "SmartLink";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::USER) return "User";
        if (value == aspose::words::cloud::models::Font::StyleIdentifier::NIL) return "Nil";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Font::StyleIdentifier fontStyleIdentifierFromString(const std::string& value)
    {
        if (value == "Normal") return aspose::words::cloud::models::Font::StyleIdentifier::NORMAL;
        if (value == "Heading1") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING1;
        if (value == "Heading2") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING2;
        if (value == "Heading3") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING3;
        if (value == "Heading4") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING4;
        if (value == "Heading5") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING5;
        if (value == "Heading6") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING6;
        if (value == "Heading7") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING7;
        if (value == "Heading8") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING8;
        if (value == "Heading9") return aspose::words::cloud::models::Font::StyleIdentifier::HEADING9;
        if (value == "Index1") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX1;
        if (value == "Index2") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX2;
        if (value == "Index3") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX3;
        if (value == "Index4") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX4;
        if (value == "Index5") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX5;
        if (value == "Index6") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX6;
        if (value == "Index7") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX7;
        if (value == "Index8") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX8;
        if (value == "Index9") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX9;
        if (value == "Toc1") return aspose::words::cloud::models::Font::StyleIdentifier::TOC1;
        if (value == "Toc2") return aspose::words::cloud::models::Font::StyleIdentifier::TOC2;
        if (value == "Toc3") return aspose::words::cloud::models::Font::StyleIdentifier::TOC3;
        if (value == "Toc4") return aspose::words::cloud::models::Font::StyleIdentifier::TOC4;
        if (value == "Toc5") return aspose::words::cloud::models::Font::StyleIdentifier::TOC5;
        if (value == "Toc6") return aspose::words::cloud::models::Font::StyleIdentifier::TOC6;
        if (value == "Toc7") return aspose::words::cloud::models::Font::StyleIdentifier::TOC7;
        if (value == "Toc8") return aspose::words::cloud::models::Font::StyleIdentifier::TOC8;
        if (value == "Toc9") return aspose::words::cloud::models::Font::StyleIdentifier::TOC9;
        if (value == "NormalIndent") return aspose::words::cloud::models::Font::StyleIdentifier::NORMAL_INDENT;
        if (value == "FootnoteText") return aspose::words::cloud::models::Font::StyleIdentifier::FOOTNOTE_TEXT;
        if (value == "CommentText") return aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_TEXT;
        if (value == "Header") return aspose::words::cloud::models::Font::StyleIdentifier::HEADER;
        if (value == "Footer") return aspose::words::cloud::models::Font::StyleIdentifier::FOOTER;
        if (value == "IndexHeading") return aspose::words::cloud::models::Font::StyleIdentifier::INDEX_HEADING;
        if (value == "Caption") return aspose::words::cloud::models::Font::StyleIdentifier::CAPTION;
        if (value == "TableOfFigures") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_OF_FIGURES;
        if (value == "EnvelopeAddress") return aspose::words::cloud::models::Font::StyleIdentifier::ENVELOPE_ADDRESS;
        if (value == "EnvelopeReturn") return aspose::words::cloud::models::Font::StyleIdentifier::ENVELOPE_RETURN;
        if (value == "FootnoteReference") return aspose::words::cloud::models::Font::StyleIdentifier::FOOTNOTE_REFERENCE;
        if (value == "CommentReference") return aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_REFERENCE;
        if (value == "LineNumber") return aspose::words::cloud::models::Font::StyleIdentifier::LINE_NUMBER;
        if (value == "PageNumber") return aspose::words::cloud::models::Font::StyleIdentifier::PAGE_NUMBER;
        if (value == "EndnoteReference") return aspose::words::cloud::models::Font::StyleIdentifier::ENDNOTE_REFERENCE;
        if (value == "EndnoteText") return aspose::words::cloud::models::Font::StyleIdentifier::ENDNOTE_TEXT;
        if (value == "TableOfAuthorities") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_OF_AUTHORITIES;
        if (value == "Macro") return aspose::words::cloud::models::Font::StyleIdentifier::MACRO;
        if (value == "ToaHeading") return aspose::words::cloud::models::Font::StyleIdentifier::TOA_HEADING;
        if (value == "List") return aspose::words::cloud::models::Font::StyleIdentifier::LIST;
        if (value == "ListBullet") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET;
        if (value == "ListNumber") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER;
        if (value == "List2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST2;
        if (value == "List3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST3;
        if (value == "List4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST4;
        if (value == "List5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST5;
        if (value == "ListBullet2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET2;
        if (value == "ListBullet3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET3;
        if (value == "ListBullet4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET4;
        if (value == "ListBullet5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_BULLET5;
        if (value == "ListNumber2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER2;
        if (value == "ListNumber3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER3;
        if (value == "ListNumber4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER4;
        if (value == "ListNumber5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_NUMBER5;
        if (value == "Title") return aspose::words::cloud::models::Font::StyleIdentifier::TITLE;
        if (value == "Closing") return aspose::words::cloud::models::Font::StyleIdentifier::CLOSING;
        if (value == "Signature") return aspose::words::cloud::models::Font::StyleIdentifier::SIGNATURE;
        if (value == "DefaultParagraphFont") return aspose::words::cloud::models::Font::StyleIdentifier::DEFAULT_PARAGRAPH_FONT;
        if (value == "BodyText") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT;
        if (value == "BodyTextInd") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND;
        if (value == "ListContinue") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE;
        if (value == "ListContinue2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE2;
        if (value == "ListContinue3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE3;
        if (value == "ListContinue4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE4;
        if (value == "ListContinue5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_CONTINUE5;
        if (value == "MessageHeader") return aspose::words::cloud::models::Font::StyleIdentifier::MESSAGE_HEADER;
        if (value == "Subtitle") return aspose::words::cloud::models::Font::StyleIdentifier::SUBTITLE;
        if (value == "Salutation") return aspose::words::cloud::models::Font::StyleIdentifier::SALUTATION;
        if (value == "Date") return aspose::words::cloud::models::Font::StyleIdentifier::DATE;
        if (value == "BodyText1I") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT1_I;
        if (value == "BodyText1I2") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT1_I2;
        if (value == "NoteHeading") return aspose::words::cloud::models::Font::StyleIdentifier::NOTE_HEADING;
        if (value == "BodyText2") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT2;
        if (value == "BodyText3") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT3;
        if (value == "BodyTextInd2") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND2;
        if (value == "BodyTextInd3") return aspose::words::cloud::models::Font::StyleIdentifier::BODY_TEXT_IND3;
        if (value == "BlockText") return aspose::words::cloud::models::Font::StyleIdentifier::BLOCK_TEXT;
        if (value == "Hyperlink") return aspose::words::cloud::models::Font::StyleIdentifier::HYPERLINK;
        if (value == "FollowedHyperlink") return aspose::words::cloud::models::Font::StyleIdentifier::FOLLOWED_HYPERLINK;
        if (value == "Strong") return aspose::words::cloud::models::Font::StyleIdentifier::STRONG;
        if (value == "Emphasis") return aspose::words::cloud::models::Font::StyleIdentifier::EMPHASIS;
        if (value == "DocumentMap") return aspose::words::cloud::models::Font::StyleIdentifier::DOCUMENT_MAP;
        if (value == "PlainText") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TEXT;
        if (value == "EmailSignature") return aspose::words::cloud::models::Font::StyleIdentifier::EMAIL_SIGNATURE;
        if (value == "HtmlTopOfForm") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_TOP_OF_FORM;
        if (value == "HtmlBottomOfForm") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_BOTTOM_OF_FORM;
        if (value == "NormalWeb") return aspose::words::cloud::models::Font::StyleIdentifier::NORMAL_WEB;
        if (value == "HtmlAcronym") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_ACRONYM;
        if (value == "HtmlAddress") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_ADDRESS;
        if (value == "HtmlCite") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_CITE;
        if (value == "HtmlCode") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_CODE;
        if (value == "HtmlDefinition") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_DEFINITION;
        if (value == "HtmlKeyboard") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_KEYBOARD;
        if (value == "HtmlPreformatted") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_PREFORMATTED;
        if (value == "HtmlSample") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_SAMPLE;
        if (value == "HtmlTypewriter") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_TYPEWRITER;
        if (value == "HtmlVariable") return aspose::words::cloud::models::Font::StyleIdentifier::HTML_VARIABLE;
        if (value == "TableNormal") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_NORMAL;
        if (value == "CommentSubject") return aspose::words::cloud::models::Font::StyleIdentifier::COMMENT_SUBJECT;
        if (value == "NoList") return aspose::words::cloud::models::Font::StyleIdentifier::NO_LIST;
        if (value == "OutlineList1") return aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST1;
        if (value == "OutlineList2") return aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST2;
        if (value == "OutlineList3") return aspose::words::cloud::models::Font::StyleIdentifier::OUTLINE_LIST3;
        if (value == "TableSimple1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE1;
        if (value == "TableSimple2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE2;
        if (value == "TableSimple3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SIMPLE3;
        if (value == "TableClassic1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC1;
        if (value == "TableClassic2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC2;
        if (value == "TableClassic3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC3;
        if (value == "TableClassic4") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CLASSIC4;
        if (value == "TableColorful1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL1;
        if (value == "TableColorful2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL2;
        if (value == "TableColorful3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLORFUL3;
        if (value == "TableColumns1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS1;
        if (value == "TableColumns2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS2;
        if (value == "TableColumns3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS3;
        if (value == "TableColumns4") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS4;
        if (value == "TableColumns5") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_COLUMNS5;
        if (value == "TableGrid1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID1;
        if (value == "TableGrid2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID2;
        if (value == "TableGrid3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID3;
        if (value == "TableGrid4") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID4;
        if (value == "TableGrid5") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID5;
        if (value == "TableGrid6") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID6;
        if (value == "TableGrid7") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID7;
        if (value == "TableGrid8") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID8;
        if (value == "TableList1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST1;
        if (value == "TableList2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST2;
        if (value == "TableList3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST3;
        if (value == "TableList4") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST4;
        if (value == "TableList5") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST5;
        if (value == "TableList6") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST6;
        if (value == "TableList7") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST7;
        if (value == "TableList8") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_LIST8;
        if (value == "Table3DEffects1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS1;
        if (value == "Table3DEffects2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS2;
        if (value == "Table3DEffects3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE3_D_EFFECTS3;
        if (value == "TableContemporary") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_CONTEMPORARY;
        if (value == "TableElegant") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_ELEGANT;
        if (value == "TableProfessional") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_PROFESSIONAL;
        if (value == "TableSubtle1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SUBTLE1;
        if (value == "TableSubtle2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_SUBTLE2;
        if (value == "TableWeb1") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB1;
        if (value == "TableWeb2") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB2;
        if (value == "TableWeb3") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_WEB3;
        if (value == "BalloonText") return aspose::words::cloud::models::Font::StyleIdentifier::BALLOON_TEXT;
        if (value == "TableGrid") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID;
        if (value == "TableTheme") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_THEME;
        if (value == "PlaceholderText") return aspose::words::cloud::models::Font::StyleIdentifier::PLACEHOLDER_TEXT;
        if (value == "NoSpacing") return aspose::words::cloud::models::Font::StyleIdentifier::NO_SPACING;
        if (value == "LightShading") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING;
        if (value == "LightList") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST;
        if (value == "LightGrid") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID;
        if (value == "MediumShading1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1;
        if (value == "MediumShading2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2;
        if (value == "MediumList1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1;
        if (value == "MediumList2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2;
        if (value == "MediumGrid1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1;
        if (value == "MediumGrid2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2;
        if (value == "MediumGrid3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3;
        if (value == "DarkList") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST;
        if (value == "ColorfulShading") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING;
        if (value == "ColorfulList") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST;
        if (value == "ColorfulGrid") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID;
        if (value == "LightShadingAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT1;
        if (value == "LightListAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT1;
        if (value == "LightGridAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT1;
        if (value == "MediumShading1Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT1;
        if (value == "MediumShading2Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT1;
        if (value == "MediumList1Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT1;
        if (value == "Revision") return aspose::words::cloud::models::Font::StyleIdentifier::REVISION;
        if (value == "ListParagraph") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_PARAGRAPH;
        if (value == "Quote") return aspose::words::cloud::models::Font::StyleIdentifier::QUOTE;
        if (value == "IntenseQuote") return aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_QUOTE;
        if (value == "MediumList2Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT1;
        if (value == "MediumGrid1Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT1;
        if (value == "MediumGrid2Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT1;
        if (value == "MediumGrid3Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT1;
        if (value == "DarkListAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT1;
        if (value == "ColorfulShadingAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT1;
        if (value == "ColorfulListAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT1;
        if (value == "ColorfulGridAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT1;
        if (value == "LightShadingAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT2;
        if (value == "LightListAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT2;
        if (value == "LightGridAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT2;
        if (value == "MediumShading1Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT2;
        if (value == "MediumShading2Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT2;
        if (value == "MediumList1Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT2;
        if (value == "MediumList2Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT2;
        if (value == "MediumGrid1Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT2;
        if (value == "MediumGrid2Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT2;
        if (value == "MediumGrid3Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT2;
        if (value == "DarkListAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT2;
        if (value == "ColorfulShadingAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT2;
        if (value == "ColorfulListAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT2;
        if (value == "ColorfulGridAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT2;
        if (value == "LightShadingAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT3;
        if (value == "LightListAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT3;
        if (value == "LightGridAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT3;
        if (value == "MediumShading1Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT3;
        if (value == "MediumShading2Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT3;
        if (value == "MediumList1Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT3;
        if (value == "MediumList2Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT3;
        if (value == "MediumGrid1Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT3;
        if (value == "MediumGrid2Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT3;
        if (value == "MediumGrid3Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT3;
        if (value == "DarkListAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT3;
        if (value == "ColorfulShadingAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT3;
        if (value == "ColorfulListAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT3;
        if (value == "ColorfulGridAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT3;
        if (value == "LightShadingAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT4;
        if (value == "LightListAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT4;
        if (value == "LightGridAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT4;
        if (value == "MediumShading1Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT4;
        if (value == "MediumShading2Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT4;
        if (value == "MediumList1Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT4;
        if (value == "MediumList2Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT4;
        if (value == "MediumGrid1Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT4;
        if (value == "MediumGrid2Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT4;
        if (value == "MediumGrid3Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT4;
        if (value == "DarkListAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT4;
        if (value == "ColorfulShadingAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT4;
        if (value == "ColorfulListAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT4;
        if (value == "ColorfulGridAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT4;
        if (value == "LightShadingAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT5;
        if (value == "LightListAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT5;
        if (value == "LightGridAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT5;
        if (value == "MediumShading1Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT5;
        if (value == "MediumShading2Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT5;
        if (value == "MediumList1Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT5;
        if (value == "MediumList2Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT5;
        if (value == "MediumGrid1Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT5;
        if (value == "MediumGrid2Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT5;
        if (value == "MediumGrid3Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT5;
        if (value == "DarkListAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT5;
        if (value == "ColorfulShadingAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT5;
        if (value == "ColorfulListAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT5;
        if (value == "ColorfulGridAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT5;
        if (value == "LightShadingAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_SHADING_ACCENT6;
        if (value == "LightListAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_LIST_ACCENT6;
        if (value == "LightGridAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIGHT_GRID_ACCENT6;
        if (value == "MediumShading1Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING1_ACCENT6;
        if (value == "MediumShading2Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_SHADING2_ACCENT6;
        if (value == "MediumList1Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST1_ACCENT6;
        if (value == "MediumList2Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_LIST2_ACCENT6;
        if (value == "MediumGrid1Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID1_ACCENT6;
        if (value == "MediumGrid2Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID2_ACCENT6;
        if (value == "MediumGrid3Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::MEDIUM_GRID3_ACCENT6;
        if (value == "DarkListAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::DARK_LIST_ACCENT6;
        if (value == "ColorfulShadingAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_SHADING_ACCENT6;
        if (value == "ColorfulListAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_LIST_ACCENT6;
        if (value == "ColorfulGridAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::COLORFUL_GRID_ACCENT6;
        if (value == "SubtleEmphasis") return aspose::words::cloud::models::Font::StyleIdentifier::SUBTLE_EMPHASIS;
        if (value == "IntenseEmphasis") return aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_EMPHASIS;
        if (value == "SubtleReference") return aspose::words::cloud::models::Font::StyleIdentifier::SUBTLE_REFERENCE;
        if (value == "IntenseReference") return aspose::words::cloud::models::Font::StyleIdentifier::INTENSE_REFERENCE;
        if (value == "BookTitle") return aspose::words::cloud::models::Font::StyleIdentifier::BOOK_TITLE;
        if (value == "Bibliography") return aspose::words::cloud::models::Font::StyleIdentifier::BIBLIOGRAPHY;
        if (value == "TocHeading") return aspose::words::cloud::models::Font::StyleIdentifier::TOC_HEADING;
        if (value == "PlainTable1") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE1;
        if (value == "PlainTable2") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE2;
        if (value == "PlainTable3") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE3;
        if (value == "PlainTable4") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE4;
        if (value == "PlainTable5") return aspose::words::cloud::models::Font::StyleIdentifier::PLAIN_TABLE5;
        if (value == "TableGridLight") return aspose::words::cloud::models::Font::StyleIdentifier::TABLE_GRID_LIGHT;
        if (value == "GridTable1Light") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT;
        if (value == "GridTable2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2;
        if (value == "GridTable3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3;
        if (value == "GridTable4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4;
        if (value == "GridTable5Dark") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK;
        if (value == "GridTable6Colorful") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL;
        if (value == "GridTable7Colorful") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL;
        if (value == "GridTable1LightAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1;
        if (value == "GridTable2Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT1;
        if (value == "GridTable3Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT1;
        if (value == "GridTable4Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT1;
        if (value == "GridTable5DarkAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1;
        if (value == "GridTable6ColorfulAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1;
        if (value == "GridTable7ColorfulAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1;
        if (value == "GridTable1LightAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2;
        if (value == "GridTable2Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT2;
        if (value == "GridTable3Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT2;
        if (value == "GridTable4Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT2;
        if (value == "GridTable5DarkAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2;
        if (value == "GridTable6ColorfulAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2;
        if (value == "GridTable7ColorfulAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2;
        if (value == "GridTable1LightAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3;
        if (value == "GridTable2Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT3;
        if (value == "GridTable3Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT3;
        if (value == "GridTable4Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT3;
        if (value == "GridTable5DarkAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3;
        if (value == "GridTable6ColorfulAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3;
        if (value == "GridTable7ColorfulAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3;
        if (value == "GridTable1LightAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4;
        if (value == "GridTable2Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT4;
        if (value == "GridTable3Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT4;
        if (value == "GridTable4Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT4;
        if (value == "GridTable5DarkAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4;
        if (value == "GridTable6ColorfulAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4;
        if (value == "GridTable7ColorfulAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4;
        if (value == "GridTable1LightAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5;
        if (value == "GridTable2Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT5;
        if (value == "GridTable3Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT5;
        if (value == "GridTable4Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT5;
        if (value == "GridTable5DarkAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5;
        if (value == "GridTable6ColorfulAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5;
        if (value == "GridTable7ColorfulAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5;
        if (value == "GridTable1LightAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6;
        if (value == "GridTable2Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE2_ACCENT6;
        if (value == "GridTable3Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE3_ACCENT6;
        if (value == "GridTable4Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE4_ACCENT6;
        if (value == "GridTable5DarkAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6;
        if (value == "GridTable6ColorfulAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6;
        if (value == "GridTable7ColorfulAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6;
        if (value == "ListTable1Light") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT;
        if (value == "ListTable2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2;
        if (value == "ListTable3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3;
        if (value == "ListTable4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4;
        if (value == "ListTable5Dark") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK;
        if (value == "ListTable6Colorful") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL;
        if (value == "ListTable7Colorful") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL;
        if (value == "ListTable1LightAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1;
        if (value == "ListTable2Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT1;
        if (value == "ListTable3Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT1;
        if (value == "ListTable4Accent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT1;
        if (value == "ListTable5DarkAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1;
        if (value == "ListTable6ColorfulAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1;
        if (value == "ListTable7ColorfulAccent1") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1;
        if (value == "ListTable1LightAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2;
        if (value == "ListTable2Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT2;
        if (value == "ListTable3Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT2;
        if (value == "ListTable4Accent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT2;
        if (value == "ListTable5DarkAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2;
        if (value == "ListTable6ColorfulAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2;
        if (value == "ListTable7ColorfulAccent2") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2;
        if (value == "ListTable1LightAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3;
        if (value == "ListTable2Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT3;
        if (value == "ListTable3Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT3;
        if (value == "ListTable4Accent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT3;
        if (value == "ListTable5DarkAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3;
        if (value == "ListTable6ColorfulAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3;
        if (value == "ListTable7ColorfulAccent3") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3;
        if (value == "ListTable1LightAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4;
        if (value == "ListTable2Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT4;
        if (value == "ListTable3Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT4;
        if (value == "ListTable4Accent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT4;
        if (value == "ListTable5DarkAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4;
        if (value == "ListTable6ColorfulAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4;
        if (value == "ListTable7ColorfulAccent4") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4;
        if (value == "ListTable1LightAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5;
        if (value == "ListTable2Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT5;
        if (value == "ListTable3Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT5;
        if (value == "ListTable4Accent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT5;
        if (value == "ListTable5DarkAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5;
        if (value == "ListTable6ColorfulAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5;
        if (value == "ListTable7ColorfulAccent5") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5;
        if (value == "ListTable1LightAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6;
        if (value == "ListTable2Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE2_ACCENT6;
        if (value == "ListTable3Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE3_ACCENT6;
        if (value == "ListTable4Accent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE4_ACCENT6;
        if (value == "ListTable5DarkAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6;
        if (value == "ListTable6ColorfulAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6;
        if (value == "ListTable7ColorfulAccent6") return aspose::words::cloud::models::Font::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6;
        if (value == "SmartLink") return aspose::words::cloud::models::Font::StyleIdentifier::SMART_LINK;
        if (value == "User") return aspose::words::cloud::models::Font::StyleIdentifier::USER;
        if (value == "Nil") return aspose::words::cloud::models::Font::StyleIdentifier::NIL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string fontTextEffectToString(aspose::words::cloud::models::Font::TextEffect value)
    {
        if (value == aspose::words::cloud::models::Font::TextEffect::NONE) return "None";
        if (value == aspose::words::cloud::models::Font::TextEffect::LAS_VEGAS_LIGHTS) return "LasVegasLights";
        if (value == aspose::words::cloud::models::Font::TextEffect::BLINKING_BACKGROUND) return "BlinkingBackground";
        if (value == aspose::words::cloud::models::Font::TextEffect::SPARKLE_TEXT) return "SparkleText";
        if (value == aspose::words::cloud::models::Font::TextEffect::MARCHING_BLACK_ANTS) return "MarchingBlackAnts";
        if (value == aspose::words::cloud::models::Font::TextEffect::MARCHING_RED_ANTS) return "MarchingRedAnts";
        if (value == aspose::words::cloud::models::Font::TextEffect::SHIMMER) return "Shimmer";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Font::TextEffect fontTextEffectFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::Font::TextEffect::NONE;
        if (value == "LasVegasLights") return aspose::words::cloud::models::Font::TextEffect::LAS_VEGAS_LIGHTS;
        if (value == "BlinkingBackground") return aspose::words::cloud::models::Font::TextEffect::BLINKING_BACKGROUND;
        if (value == "SparkleText") return aspose::words::cloud::models::Font::TextEffect::SPARKLE_TEXT;
        if (value == "MarchingBlackAnts") return aspose::words::cloud::models::Font::TextEffect::MARCHING_BLACK_ANTS;
        if (value == "MarchingRedAnts") return aspose::words::cloud::models::Font::TextEffect::MARCHING_RED_ANTS;
        if (value == "Shimmer") return aspose::words::cloud::models::Font::TextEffect::SHIMMER;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string fontUnderlineToString(aspose::words::cloud::models::Font::Underline value)
    {
        if (value == aspose::words::cloud::models::Font::Underline::NONE) return "None";
        if (value == aspose::words::cloud::models::Font::Underline::SINGLE) return "Single";
        if (value == aspose::words::cloud::models::Font::Underline::WORDS) return "Words";
        if (value == aspose::words::cloud::models::Font::Underline::DOUBLE) return "Double";
        if (value == aspose::words::cloud::models::Font::Underline::DOTTED) return "Dotted";
        if (value == aspose::words::cloud::models::Font::Underline::THICK) return "Thick";
        if (value == aspose::words::cloud::models::Font::Underline::DASH) return "Dash";
        if (value == aspose::words::cloud::models::Font::Underline::DOT_DASH) return "DotDash";
        if (value == aspose::words::cloud::models::Font::Underline::DOT_DOT_DASH) return "DotDotDash";
        if (value == aspose::words::cloud::models::Font::Underline::WAVY) return "Wavy";
        if (value == aspose::words::cloud::models::Font::Underline::DOTTED_HEAVY) return "DottedHeavy";
        if (value == aspose::words::cloud::models::Font::Underline::DASH_HEAVY) return "DashHeavy";
        if (value == aspose::words::cloud::models::Font::Underline::DOT_DASH_HEAVY) return "DotDashHeavy";
        if (value == aspose::words::cloud::models::Font::Underline::DOT_DOT_DASH_HEAVY) return "DotDotDashHeavy";
        if (value == aspose::words::cloud::models::Font::Underline::WAVY_HEAVY) return "WavyHeavy";
        if (value == aspose::words::cloud::models::Font::Underline::DASH_LONG) return "DashLong";
        if (value == aspose::words::cloud::models::Font::Underline::WAVY_DOUBLE) return "WavyDouble";
        if (value == aspose::words::cloud::models::Font::Underline::DASH_LONG_HEAVY) return "DashLongHeavy";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Font::Underline fontUnderlineFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::Font::Underline::NONE;
        if (value == "Single") return aspose::words::cloud::models::Font::Underline::SINGLE;
        if (value == "Words") return aspose::words::cloud::models::Font::Underline::WORDS;
        if (value == "Double") return aspose::words::cloud::models::Font::Underline::DOUBLE;
        if (value == "Dotted") return aspose::words::cloud::models::Font::Underline::DOTTED;
        if (value == "Thick") return aspose::words::cloud::models::Font::Underline::THICK;
        if (value == "Dash") return aspose::words::cloud::models::Font::Underline::DASH;
        if (value == "DotDash") return aspose::words::cloud::models::Font::Underline::DOT_DASH;
        if (value == "DotDotDash") return aspose::words::cloud::models::Font::Underline::DOT_DOT_DASH;
        if (value == "Wavy") return aspose::words::cloud::models::Font::Underline::WAVY;
        if (value == "DottedHeavy") return aspose::words::cloud::models::Font::Underline::DOTTED_HEAVY;
        if (value == "DashHeavy") return aspose::words::cloud::models::Font::Underline::DASH_HEAVY;
        if (value == "DotDashHeavy") return aspose::words::cloud::models::Font::Underline::DOT_DASH_HEAVY;
        if (value == "DotDotDashHeavy") return aspose::words::cloud::models::Font::Underline::DOT_DOT_DASH_HEAVY;
        if (value == "WavyHeavy") return aspose::words::cloud::models::Font::Underline::WAVY_HEAVY;
        if (value == "DashLong") return aspose::words::cloud::models::Font::Underline::DASH_LONG;
        if (value == "WavyDouble") return aspose::words::cloud::models::Font::Underline::WAVY_DOUBLE;
        if (value == "DashLongHeavy") return aspose::words::cloud::models::Font::Underline::DASH_LONG_HEAVY;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Font::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AllCaps) {
            json["AllCaps"] = *m_AllCaps;
        }
        if (m_Bidi) {
            json["Bidi"] = *m_Bidi;
        }
        if (m_Bold) {
            json["Bold"] = *m_Bold;
        }
        if (m_BoldBi) {
            json["BoldBi"] = *m_BoldBi;
        }
        if (m_Border) {
            m_Border->toJson(&json["Border"]);
        }
        if (m_Color) {
            m_Color->toJson(&json["Color"]);
        }
        if (m_ComplexScript) {
            json["ComplexScript"] = *m_ComplexScript;
        }
        if (m_DoubleStrikeThrough) {
            json["DoubleStrikeThrough"] = *m_DoubleStrikeThrough;
        }
        if (m_Emboss) {
            json["Emboss"] = *m_Emboss;
        }
        if (m_Engrave) {
            json["Engrave"] = *m_Engrave;
        }
        if (m_Hidden) {
            json["Hidden"] = *m_Hidden;
        }
        if (m_HighlightColor) {
            m_HighlightColor->toJson(&json["HighlightColor"]);
        }
        if (m_Italic) {
            json["Italic"] = *m_Italic;
        }
        if (m_ItalicBi) {
            json["ItalicBi"] = *m_ItalicBi;
        }
        if (m_Kerning) {
            json["Kerning"] = *m_Kerning;
        }
        if (m_LocaleId) {
            json["LocaleId"] = *m_LocaleId;
        }
        if (m_LocaleIdBi) {
            json["LocaleIdBi"] = *m_LocaleIdBi;
        }
        if (m_LocaleIdFarEast) {
            json["LocaleIdFarEast"] = *m_LocaleIdFarEast;
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_NameAscii) {
            json["NameAscii"] = convertUtf16(*m_NameAscii);
        }
        if (m_NameBi) {
            json["NameBi"] = convertUtf16(*m_NameBi);
        }
        if (m_NameFarEast) {
            json["NameFarEast"] = convertUtf16(*m_NameFarEast);
        }
        if (m_NameOther) {
            json["NameOther"] = convertUtf16(*m_NameOther);
        }
        if (m_NoProofing) {
            json["NoProofing"] = *m_NoProofing;
        }
        if (m_Outline) {
            json["Outline"] = *m_Outline;
        }
        if (m_Position) {
            json["Position"] = *m_Position;
        }
        if (m_Scaling) {
            json["Scaling"] = *m_Scaling;
        }
        if (m_Shadow) {
            json["Shadow"] = *m_Shadow;
        }
        if (m_Size) {
            json["Size"] = *m_Size;
        }
        if (m_SizeBi) {
            json["SizeBi"] = *m_SizeBi;
        }
        if (m_SmallCaps) {
            json["SmallCaps"] = *m_SmallCaps;
        }
        if (m_Spacing) {
            json["Spacing"] = *m_Spacing;
        }
        if (m_StrikeThrough) {
            json["StrikeThrough"] = *m_StrikeThrough;
        }
        if (m_StyleIdentifier) {
            json["StyleIdentifier"] = fontStyleIdentifierToString(*m_StyleIdentifier);
        }
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
        if (m_Subscript) {
            json["Subscript"] = *m_Subscript;
        }
        if (m_Superscript) {
            json["Superscript"] = *m_Superscript;
        }
        if (m_TextEffect) {
            json["TextEffect"] = fontTextEffectToString(*m_TextEffect);
        }
        if (m_Underline) {
            json["Underline"] = fontUnderlineToString(*m_Underline);
        }
        if (m_UnderlineColor) {
            m_UnderlineColor->toJson(&json["UnderlineColor"]);
        }
    }

    void Font::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AllCaps") && !json["AllCaps"].is_null()) {
            m_AllCaps = std::make_shared< bool >(
                json["AllCaps"].get< bool >()
            );
        }
        if (json.contains("Bidi") && !json["Bidi"].is_null()) {
            m_Bidi = std::make_shared< bool >(
                json["Bidi"].get< bool >()
            );
        }
        if (json.contains("Bold") && !json["Bold"].is_null()) {
            m_Bold = std::make_shared< bool >(
                json["Bold"].get< bool >()
            );
        }
        if (json.contains("BoldBi") && !json["BoldBi"].is_null()) {
            m_BoldBi = std::make_shared< bool >(
                json["BoldBi"].get< bool >()
            );
        }
        if (json.contains("Border") && !json["Border"].is_null()) {
            m_Border = std::make_shared< aspose::words::cloud::models::Border >();
            m_Border->fromJson(&json["Border"]);
        }
        if (json.contains("Color") && !json["Color"].is_null()) {
            m_Color = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_Color->fromJson(&json["Color"]);
        }
        if (json.contains("ComplexScript") && !json["ComplexScript"].is_null()) {
            m_ComplexScript = std::make_shared< bool >(
                json["ComplexScript"].get< bool >()
            );
        }
        if (json.contains("DoubleStrikeThrough") && !json["DoubleStrikeThrough"].is_null()) {
            m_DoubleStrikeThrough = std::make_shared< bool >(
                json["DoubleStrikeThrough"].get< bool >()
            );
        }
        if (json.contains("Emboss") && !json["Emboss"].is_null()) {
            m_Emboss = std::make_shared< bool >(
                json["Emboss"].get< bool >()
            );
        }
        if (json.contains("Engrave") && !json["Engrave"].is_null()) {
            m_Engrave = std::make_shared< bool >(
                json["Engrave"].get< bool >()
            );
        }
        if (json.contains("Hidden") && !json["Hidden"].is_null()) {
            m_Hidden = std::make_shared< bool >(
                json["Hidden"].get< bool >()
            );
        }
        if (json.contains("HighlightColor") && !json["HighlightColor"].is_null()) {
            m_HighlightColor = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_HighlightColor->fromJson(&json["HighlightColor"]);
        }
        if (json.contains("Italic") && !json["Italic"].is_null()) {
            m_Italic = std::make_shared< bool >(
                json["Italic"].get< bool >()
            );
        }
        if (json.contains("ItalicBi") && !json["ItalicBi"].is_null()) {
            m_ItalicBi = std::make_shared< bool >(
                json["ItalicBi"].get< bool >()
            );
        }
        if (json.contains("Kerning") && !json["Kerning"].is_null()) {
            m_Kerning = std::make_shared< double >(
                json["Kerning"].get< double >()
            );
        }
        if (json.contains("LocaleId") && !json["LocaleId"].is_null()) {
            m_LocaleId = std::make_shared< int32_t >(
                json["LocaleId"].get< int32_t >()
            );
        }
        if (json.contains("LocaleIdBi") && !json["LocaleIdBi"].is_null()) {
            m_LocaleIdBi = std::make_shared< int32_t >(
                json["LocaleIdBi"].get< int32_t >()
            );
        }
        if (json.contains("LocaleIdFarEast") && !json["LocaleIdFarEast"].is_null()) {
            m_LocaleIdFarEast = std::make_shared< int32_t >(
                json["LocaleIdFarEast"].get< int32_t >()
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("NameAscii") && !json["NameAscii"].is_null()) {
            m_NameAscii = std::make_shared< std::wstring >(
                convertUtf8( json["NameAscii"].get< std::string >() )
            );
        }
        if (json.contains("NameBi") && !json["NameBi"].is_null()) {
            m_NameBi = std::make_shared< std::wstring >(
                convertUtf8( json["NameBi"].get< std::string >() )
            );
        }
        if (json.contains("NameFarEast") && !json["NameFarEast"].is_null()) {
            m_NameFarEast = std::make_shared< std::wstring >(
                convertUtf8( json["NameFarEast"].get< std::string >() )
            );
        }
        if (json.contains("NameOther") && !json["NameOther"].is_null()) {
            m_NameOther = std::make_shared< std::wstring >(
                convertUtf8( json["NameOther"].get< std::string >() )
            );
        }
        if (json.contains("NoProofing") && !json["NoProofing"].is_null()) {
            m_NoProofing = std::make_shared< bool >(
                json["NoProofing"].get< bool >()
            );
        }
        if (json.contains("Outline") && !json["Outline"].is_null()) {
            m_Outline = std::make_shared< bool >(
                json["Outline"].get< bool >()
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< double >(
                json["Position"].get< double >()
            );
        }
        if (json.contains("Scaling") && !json["Scaling"].is_null()) {
            m_Scaling = std::make_shared< int32_t >(
                json["Scaling"].get< int32_t >()
            );
        }
        if (json.contains("Shadow") && !json["Shadow"].is_null()) {
            m_Shadow = std::make_shared< bool >(
                json["Shadow"].get< bool >()
            );
        }
        if (json.contains("Size") && !json["Size"].is_null()) {
            m_Size = std::make_shared< double >(
                json["Size"].get< double >()
            );
        }
        if (json.contains("SizeBi") && !json["SizeBi"].is_null()) {
            m_SizeBi = std::make_shared< double >(
                json["SizeBi"].get< double >()
            );
        }
        if (json.contains("SmallCaps") && !json["SmallCaps"].is_null()) {
            m_SmallCaps = std::make_shared< bool >(
                json["SmallCaps"].get< bool >()
            );
        }
        if (json.contains("Spacing") && !json["Spacing"].is_null()) {
            m_Spacing = std::make_shared< double >(
                json["Spacing"].get< double >()
            );
        }
        if (json.contains("StrikeThrough") && !json["StrikeThrough"].is_null()) {
            m_StrikeThrough = std::make_shared< bool >(
                json["StrikeThrough"].get< bool >()
            );
        }
        if (json.contains("StyleIdentifier") && !json["StyleIdentifier"].is_null()) {
            m_StyleIdentifier = std::make_shared< aspose::words::cloud::models::Font::StyleIdentifier >(
                fontStyleIdentifierFromString(json["StyleIdentifier"].get< std::string >())
            );
        }
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
        if (json.contains("Subscript") && !json["Subscript"].is_null()) {
            m_Subscript = std::make_shared< bool >(
                json["Subscript"].get< bool >()
            );
        }
        if (json.contains("Superscript") && !json["Superscript"].is_null()) {
            m_Superscript = std::make_shared< bool >(
                json["Superscript"].get< bool >()
            );
        }
        if (json.contains("TextEffect") && !json["TextEffect"].is_null()) {
            m_TextEffect = std::make_shared< aspose::words::cloud::models::Font::TextEffect >(
                fontTextEffectFromString(json["TextEffect"].get< std::string >())
            );
        }
        if (json.contains("Underline") && !json["Underline"].is_null()) {
            m_Underline = std::make_shared< aspose::words::cloud::models::Font::Underline >(
                fontUnderlineFromString(json["Underline"].get< std::string >())
            );
        }
        if (json.contains("UnderlineColor") && !json["UnderlineColor"].is_null()) {
            m_UnderlineColor = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_UnderlineColor->fromJson(&json["UnderlineColor"]);
        }
    }

    std::shared_ptr< bool > Font::getAllCaps() const
    {
        return m_AllCaps;
    }

    void Font::setAllCaps(std::shared_ptr< bool > value)
    {
        m_AllCaps = value;
    }

    std::shared_ptr< bool > Font::getBidi() const
    {
        return m_Bidi;
    }

    void Font::setBidi(std::shared_ptr< bool > value)
    {
        m_Bidi = value;
    }

    std::shared_ptr< bool > Font::getBold() const
    {
        return m_Bold;
    }

    void Font::setBold(std::shared_ptr< bool > value)
    {
        m_Bold = value;
    }

    std::shared_ptr< bool > Font::getBoldBi() const
    {
        return m_BoldBi;
    }

    void Font::setBoldBi(std::shared_ptr< bool > value)
    {
        m_BoldBi = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Border > Font::getBorder() const
    {
        return m_Border;
    }

    void Font::setBorder(std::shared_ptr< aspose::words::cloud::models::Border > value)
    {
        m_Border = value;
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Font::getColor() const
    {
        return m_Color;
    }

    void Font::setColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_Color = value;
    }

    std::shared_ptr< bool > Font::getComplexScript() const
    {
        return m_ComplexScript;
    }

    void Font::setComplexScript(std::shared_ptr< bool > value)
    {
        m_ComplexScript = value;
    }

    std::shared_ptr< bool > Font::getDoubleStrikeThrough() const
    {
        return m_DoubleStrikeThrough;
    }

    void Font::setDoubleStrikeThrough(std::shared_ptr< bool > value)
    {
        m_DoubleStrikeThrough = value;
    }

    std::shared_ptr< bool > Font::getEmboss() const
    {
        return m_Emboss;
    }

    void Font::setEmboss(std::shared_ptr< bool > value)
    {
        m_Emboss = value;
    }

    std::shared_ptr< bool > Font::getEngrave() const
    {
        return m_Engrave;
    }

    void Font::setEngrave(std::shared_ptr< bool > value)
    {
        m_Engrave = value;
    }

    std::shared_ptr< bool > Font::getHidden() const
    {
        return m_Hidden;
    }

    void Font::setHidden(std::shared_ptr< bool > value)
    {
        m_Hidden = value;
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Font::getHighlightColor() const
    {
        return m_HighlightColor;
    }

    void Font::setHighlightColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_HighlightColor = value;
    }

    std::shared_ptr< bool > Font::getItalic() const
    {
        return m_Italic;
    }

    void Font::setItalic(std::shared_ptr< bool > value)
    {
        m_Italic = value;
    }

    std::shared_ptr< bool > Font::getItalicBi() const
    {
        return m_ItalicBi;
    }

    void Font::setItalicBi(std::shared_ptr< bool > value)
    {
        m_ItalicBi = value;
    }

    std::shared_ptr< double > Font::getKerning() const
    {
        return m_Kerning;
    }

    void Font::setKerning(std::shared_ptr< double > value)
    {
        m_Kerning = value;
    }

    std::shared_ptr< int32_t > Font::getLocaleId() const
    {
        return m_LocaleId;
    }

    void Font::setLocaleId(std::shared_ptr< int32_t > value)
    {
        m_LocaleId = value;
    }

    std::shared_ptr< int32_t > Font::getLocaleIdBi() const
    {
        return m_LocaleIdBi;
    }

    void Font::setLocaleIdBi(std::shared_ptr< int32_t > value)
    {
        m_LocaleIdBi = value;
    }

    std::shared_ptr< int32_t > Font::getLocaleIdFarEast() const
    {
        return m_LocaleIdFarEast;
    }

    void Font::setLocaleIdFarEast(std::shared_ptr< int32_t > value)
    {
        m_LocaleIdFarEast = value;
    }

    std::shared_ptr< std::wstring > Font::getName() const
    {
        return m_Name;
    }

    void Font::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > Font::getNameAscii() const
    {
        return m_NameAscii;
    }

    void Font::setNameAscii(std::shared_ptr< std::wstring > value)
    {
        m_NameAscii = value;
    }

    std::shared_ptr< std::wstring > Font::getNameBi() const
    {
        return m_NameBi;
    }

    void Font::setNameBi(std::shared_ptr< std::wstring > value)
    {
        m_NameBi = value;
    }

    std::shared_ptr< std::wstring > Font::getNameFarEast() const
    {
        return m_NameFarEast;
    }

    void Font::setNameFarEast(std::shared_ptr< std::wstring > value)
    {
        m_NameFarEast = value;
    }

    std::shared_ptr< std::wstring > Font::getNameOther() const
    {
        return m_NameOther;
    }

    void Font::setNameOther(std::shared_ptr< std::wstring > value)
    {
        m_NameOther = value;
    }

    std::shared_ptr< bool > Font::getNoProofing() const
    {
        return m_NoProofing;
    }

    void Font::setNoProofing(std::shared_ptr< bool > value)
    {
        m_NoProofing = value;
    }

    std::shared_ptr< bool > Font::getOutline() const
    {
        return m_Outline;
    }

    void Font::setOutline(std::shared_ptr< bool > value)
    {
        m_Outline = value;
    }

    std::shared_ptr< double > Font::getPosition() const
    {
        return m_Position;
    }

    void Font::setPosition(std::shared_ptr< double > value)
    {
        m_Position = value;
    }

    std::shared_ptr< int32_t > Font::getScaling() const
    {
        return m_Scaling;
    }

    void Font::setScaling(std::shared_ptr< int32_t > value)
    {
        m_Scaling = value;
    }

    std::shared_ptr< bool > Font::getShadow() const
    {
        return m_Shadow;
    }

    void Font::setShadow(std::shared_ptr< bool > value)
    {
        m_Shadow = value;
    }

    std::shared_ptr< double > Font::getSize() const
    {
        return m_Size;
    }

    void Font::setSize(std::shared_ptr< double > value)
    {
        m_Size = value;
    }

    std::shared_ptr< double > Font::getSizeBi() const
    {
        return m_SizeBi;
    }

    void Font::setSizeBi(std::shared_ptr< double > value)
    {
        m_SizeBi = value;
    }

    std::shared_ptr< bool > Font::getSmallCaps() const
    {
        return m_SmallCaps;
    }

    void Font::setSmallCaps(std::shared_ptr< bool > value)
    {
        m_SmallCaps = value;
    }

    std::shared_ptr< double > Font::getSpacing() const
    {
        return m_Spacing;
    }

    void Font::setSpacing(std::shared_ptr< double > value)
    {
        m_Spacing = value;
    }

    std::shared_ptr< bool > Font::getStrikeThrough() const
    {
        return m_StrikeThrough;
    }

    void Font::setStrikeThrough(std::shared_ptr< bool > value)
    {
        m_StrikeThrough = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Font::StyleIdentifier > Font::getStyleIdentifier() const
    {
        return m_StyleIdentifier;
    }

    void Font::setStyleIdentifier(std::shared_ptr< aspose::words::cloud::models::Font::StyleIdentifier > value)
    {
        m_StyleIdentifier = value;
    }

    std::shared_ptr< std::wstring > Font::getStyleName() const
    {
        return m_StyleName;
    }

    void Font::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }

    std::shared_ptr< bool > Font::getSubscript() const
    {
        return m_Subscript;
    }

    void Font::setSubscript(std::shared_ptr< bool > value)
    {
        m_Subscript = value;
    }

    std::shared_ptr< bool > Font::getSuperscript() const
    {
        return m_Superscript;
    }

    void Font::setSuperscript(std::shared_ptr< bool > value)
    {
        m_Superscript = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Font::TextEffect > Font::getTextEffect() const
    {
        return m_TextEffect;
    }

    void Font::setTextEffect(std::shared_ptr< aspose::words::cloud::models::Font::TextEffect > value)
    {
        m_TextEffect = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Font::Underline > Font::getUnderline() const
    {
        return m_Underline;
    }

    void Font::setUnderline(std::shared_ptr< aspose::words::cloud::models::Font::Underline > value)
    {
        m_Underline = value;
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Font::getUnderlineColor() const
    {
        return m_UnderlineColor;
    }

    void Font::setUnderlineColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_UnderlineColor = value;
    }


    /*
     * FontDto implementation
     */
    void FontDto::toJson(void* jsonIfc) const
    {
    }

    void FontDto::fromJson(const void* jsonIfc)
    {
    }




    /*
     * FontInfo implementation
     */
    void FontInfo::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FilePath) {
            json["FilePath"] = convertUtf16(*m_FilePath);
        }
        if (m_FontFamilyName) {
            json["FontFamilyName"] = convertUtf16(*m_FontFamilyName);
        }
        if (m_FullFontName) {
            json["FullFontName"] = convertUtf16(*m_FullFontName);
        }
        if (m_Version) {
            json["Version"] = convertUtf16(*m_Version);
        }
    }

    void FontInfo::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FilePath") && !json["FilePath"].is_null()) {
            m_FilePath = std::make_shared< std::wstring >(
                convertUtf8( json["FilePath"].get< std::string >() )
            );
        }
        if (json.contains("FontFamilyName") && !json["FontFamilyName"].is_null()) {
            m_FontFamilyName = std::make_shared< std::wstring >(
                convertUtf8( json["FontFamilyName"].get< std::string >() )
            );
        }
        if (json.contains("FullFontName") && !json["FullFontName"].is_null()) {
            m_FullFontName = std::make_shared< std::wstring >(
                convertUtf8( json["FullFontName"].get< std::string >() )
            );
        }
        if (json.contains("Version") && !json["Version"].is_null()) {
            m_Version = std::make_shared< std::wstring >(
                convertUtf8( json["Version"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > FontInfo::getFilePath() const
    {
        return m_FilePath;
    }

    void FontInfo::setFilePath(std::shared_ptr< std::wstring > value)
    {
        m_FilePath = value;
    }

    std::shared_ptr< std::wstring > FontInfo::getFontFamilyName() const
    {
        return m_FontFamilyName;
    }

    void FontInfo::setFontFamilyName(std::shared_ptr< std::wstring > value)
    {
        m_FontFamilyName = value;
    }

    std::shared_ptr< std::wstring > FontInfo::getFullFontName() const
    {
        return m_FullFontName;
    }

    void FontInfo::setFullFontName(std::shared_ptr< std::wstring > value)
    {
        m_FullFontName = value;
    }

    std::shared_ptr< std::wstring > FontInfo::getVersion() const
    {
        return m_Version;
    }

    void FontInfo::setVersion(std::shared_ptr< std::wstring > value)
    {
        m_Version = value;
    }


    /*
     * FontResponse implementation
     */
    void FontResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Font) {
            m_Font->toJson(&json["Font"]);
        }
    }

    void FontResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Font") && !json["Font"].is_null()) {
            m_Font = std::make_shared< aspose::words::cloud::models::Font >();
            m_Font->fromJson(&json["Font"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Font > FontResponse::getFont() const
    {
        return m_Font;
    }

    void FontResponse::setFont(std::shared_ptr< aspose::words::cloud::models::Font > value)
    {
        m_Font = value;
    }


    /*
     * Footnote implementation
     */
    inline std::string footnoteFootnoteTypeToString(aspose::words::cloud::models::Footnote::FootnoteType value)
    {
        if (value == aspose::words::cloud::models::Footnote::FootnoteType::FOOTNOTE) return "Footnote";
        if (value == aspose::words::cloud::models::Footnote::FootnoteType::ENDNOTE) return "Endnote";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Footnote::FootnoteType footnoteFootnoteTypeFromString(const std::string& value)
    {
        if (value == "Footnote") return aspose::words::cloud::models::Footnote::FootnoteType::FOOTNOTE;
        if (value == "Endnote") return aspose::words::cloud::models::Footnote::FootnoteType::ENDNOTE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Footnote::toJson(void* jsonIfc) const
    {
        FootnoteLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Content) {
            m_Content->toJson(&json["Content"]);
        }
        if (m_FootnoteType) {
            json["FootnoteType"] = footnoteFootnoteTypeToString(*m_FootnoteType);
        }
        if (m_Position) {
            m_Position->toJson(&json["Position"]);
        }
        if (m_ReferenceMark) {
            json["ReferenceMark"] = convertUtf16(*m_ReferenceMark);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void Footnote::fromJson(const void* jsonIfc)
    {
        FootnoteLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Content") && !json["Content"].is_null()) {
            m_Content = std::make_shared< aspose::words::cloud::models::StoryChildNodes >();
            m_Content->fromJson(&json["Content"]);
        }
        if (json.contains("FootnoteType") && !json["FootnoteType"].is_null()) {
            m_FootnoteType = std::make_shared< aspose::words::cloud::models::Footnote::FootnoteType >(
                footnoteFootnoteTypeFromString(json["FootnoteType"].get< std::string >())
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_Position->fromJson(&json["Position"]);
        }
        if (json.contains("ReferenceMark") && !json["ReferenceMark"].is_null()) {
            m_ReferenceMark = std::make_shared< std::wstring >(
                convertUtf8( json["ReferenceMark"].get< std::string >() )
            );
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > Footnote::getContent() const
    {
        return m_Content;
    }

    void Footnote::setContent(std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > value)
    {
        m_Content = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Footnote::FootnoteType > Footnote::getFootnoteType() const
    {
        return m_FootnoteType;
    }

    void Footnote::setFootnoteType(std::shared_ptr< aspose::words::cloud::models::Footnote::FootnoteType > value)
    {
        m_FootnoteType = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > Footnote::getPosition() const
    {
        return m_Position;
    }

    void Footnote::setPosition(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_Position = value;
    }

    std::shared_ptr< std::wstring > Footnote::getReferenceMark() const
    {
        return m_ReferenceMark;
    }

    void Footnote::setReferenceMark(std::shared_ptr< std::wstring > value)
    {
        m_ReferenceMark = value;
    }

    std::shared_ptr< std::wstring > Footnote::getText() const
    {
        return m_Text;
    }

    void Footnote::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * FootnoteBase implementation
     */
    inline std::string footnoteBaseFootnoteTypeToString(aspose::words::cloud::models::FootnoteBase::FootnoteType value)
    {
        if (value == aspose::words::cloud::models::FootnoteBase::FootnoteType::FOOTNOTE) return "Footnote";
        if (value == aspose::words::cloud::models::FootnoteBase::FootnoteType::ENDNOTE) return "Endnote";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::FootnoteBase::FootnoteType footnoteBaseFootnoteTypeFromString(const std::string& value)
    {
        if (value == "Footnote") return aspose::words::cloud::models::FootnoteBase::FootnoteType::FOOTNOTE;
        if (value == "Endnote") return aspose::words::cloud::models::FootnoteBase::FootnoteType::ENDNOTE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void FootnoteBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FootnoteType) {
            json["FootnoteType"] = footnoteBaseFootnoteTypeToString(*m_FootnoteType);
        }
        if (m_Position) {
            m_Position->toJson(&json["Position"]);
        }
        if (m_ReferenceMark) {
            json["ReferenceMark"] = convertUtf16(*m_ReferenceMark);
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void FootnoteBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FootnoteType") && !json["FootnoteType"].is_null()) {
            m_FootnoteType = std::make_shared< aspose::words::cloud::models::FootnoteBase::FootnoteType >(
                footnoteBaseFootnoteTypeFromString(json["FootnoteType"].get< std::string >())
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_Position->fromJson(&json["Position"]);
        }
        if (json.contains("ReferenceMark") && !json["ReferenceMark"].is_null()) {
            m_ReferenceMark = std::make_shared< std::wstring >(
                convertUtf8( json["ReferenceMark"].get< std::string >() )
            );
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FootnoteBase::FootnoteType > FootnoteBase::getFootnoteType() const
    {
        return m_FootnoteType;
    }

    void FootnoteBase::setFootnoteType(std::shared_ptr< aspose::words::cloud::models::FootnoteBase::FootnoteType > value)
    {
        m_FootnoteType = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > FootnoteBase::getPosition() const
    {
        return m_Position;
    }

    void FootnoteBase::setPosition(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_Position = value;
    }

    std::shared_ptr< std::wstring > FootnoteBase::getReferenceMark() const
    {
        return m_ReferenceMark;
    }

    void FootnoteBase::setReferenceMark(std::shared_ptr< std::wstring > value)
    {
        m_ReferenceMark = value;
    }

    std::shared_ptr< std::wstring > FootnoteBase::getText() const
    {
        return m_Text;
    }

    void FootnoteBase::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * FootnoteCollection implementation
     */
    void FootnoteCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void FootnoteCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Footnote>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::Footnote >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Footnote>> > FootnoteCollection::getList() const
    {
        return m_List;
    }

    void FootnoteCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Footnote>> > value)
    {
        m_List = value;
    }


    /*
     * FootnoteInsert implementation
     */
    void FootnoteInsert::toJson(void* jsonIfc) const
    {
        FootnoteBase::toJson(jsonIfc);
    }

    void FootnoteInsert::fromJson(const void* jsonIfc)
    {
        FootnoteBase::fromJson(jsonIfc);
    }




    /*
     * FootnoteLink implementation
     */
    void FootnoteLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
    }

    void FootnoteLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
    }




    /*
     * FootnoteResponse implementation
     */
    void FootnoteResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Footnote) {
            m_Footnote->toJson(&json["Footnote"]);
        }
    }

    void FootnoteResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Footnote") && !json["Footnote"].is_null()) {
            m_Footnote = std::make_shared< aspose::words::cloud::models::Footnote >();
            m_Footnote->fromJson(&json["Footnote"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Footnote > FootnoteResponse::getFootnote() const
    {
        return m_Footnote;
    }

    void FootnoteResponse::setFootnote(std::shared_ptr< aspose::words::cloud::models::Footnote > value)
    {
        m_Footnote = value;
    }


    /*
     * FootnotesResponse implementation
     */
    void FootnotesResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Footnotes) {
            m_Footnotes->toJson(&json["Footnotes"]);
        }
    }

    void FootnotesResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Footnotes") && !json["Footnotes"].is_null()) {
            m_Footnotes = std::make_shared< aspose::words::cloud::models::FootnoteCollection >();
            m_Footnotes->fromJson(&json["Footnotes"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FootnoteCollection > FootnotesResponse::getFootnotes() const
    {
        return m_Footnotes;
    }

    void FootnotesResponse::setFootnotes(std::shared_ptr< aspose::words::cloud::models::FootnoteCollection > value)
    {
        m_Footnotes = value;
    }


    /*
     * FootnotesStatData implementation
     */
    void FootnotesStatData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ParagraphCount) {
            json["ParagraphCount"] = *m_ParagraphCount;
        }
        if (m_WordCount) {
            json["WordCount"] = *m_WordCount;
        }
    }

    void FootnotesStatData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ParagraphCount") && !json["ParagraphCount"].is_null()) {
            m_ParagraphCount = std::make_shared< int32_t >(
                json["ParagraphCount"].get< int32_t >()
            );
        }
        if (json.contains("WordCount") && !json["WordCount"].is_null()) {
            m_WordCount = std::make_shared< int32_t >(
                json["WordCount"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > FootnotesStatData::getParagraphCount() const
    {
        return m_ParagraphCount;
    }

    void FootnotesStatData::setParagraphCount(std::shared_ptr< int32_t > value)
    {
        m_ParagraphCount = value;
    }

    std::shared_ptr< int32_t > FootnotesStatData::getWordCount() const
    {
        return m_WordCount;
    }

    void FootnotesStatData::setWordCount(std::shared_ptr< int32_t > value)
    {
        m_WordCount = value;
    }


    /*
     * FootnoteUpdate implementation
     */
    void FootnoteUpdate::toJson(void* jsonIfc) const
    {
        FootnoteBase::toJson(jsonIfc);
    }

    void FootnoteUpdate::fromJson(const void* jsonIfc)
    {
        FootnoteBase::fromJson(jsonIfc);
    }




    /*
     * FormField implementation
     */
    void FormField::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CalculateOnExit) {
            json["CalculateOnExit"] = *m_CalculateOnExit;
        }
        if (m_Enabled) {
            json["Enabled"] = *m_Enabled;
        }
        if (m_EntryMacro) {
            json["EntryMacro"] = convertUtf16(*m_EntryMacro);
        }
        if (m_ExitMacro) {
            json["ExitMacro"] = convertUtf16(*m_ExitMacro);
        }
        if (m_HelpText) {
            json["HelpText"] = convertUtf16(*m_HelpText);
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_OwnHelp) {
            json["OwnHelp"] = *m_OwnHelp;
        }
        if (m_OwnStatus) {
            json["OwnStatus"] = *m_OwnStatus;
        }
        if (m_StatusText) {
            json["StatusText"] = convertUtf16(*m_StatusText);
        }
    }

    void FormField::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CalculateOnExit") && !json["CalculateOnExit"].is_null()) {
            m_CalculateOnExit = std::make_shared< bool >(
                json["CalculateOnExit"].get< bool >()
            );
        }
        if (json.contains("Enabled") && !json["Enabled"].is_null()) {
            m_Enabled = std::make_shared< bool >(
                json["Enabled"].get< bool >()
            );
        }
        if (json.contains("EntryMacro") && !json["EntryMacro"].is_null()) {
            m_EntryMacro = std::make_shared< std::wstring >(
                convertUtf8( json["EntryMacro"].get< std::string >() )
            );
        }
        if (json.contains("ExitMacro") && !json["ExitMacro"].is_null()) {
            m_ExitMacro = std::make_shared< std::wstring >(
                convertUtf8( json["ExitMacro"].get< std::string >() )
            );
        }
        if (json.contains("HelpText") && !json["HelpText"].is_null()) {
            m_HelpText = std::make_shared< std::wstring >(
                convertUtf8( json["HelpText"].get< std::string >() )
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("OwnHelp") && !json["OwnHelp"].is_null()) {
            m_OwnHelp = std::make_shared< bool >(
                json["OwnHelp"].get< bool >()
            );
        }
        if (json.contains("OwnStatus") && !json["OwnStatus"].is_null()) {
            m_OwnStatus = std::make_shared< bool >(
                json["OwnStatus"].get< bool >()
            );
        }
        if (json.contains("StatusText") && !json["StatusText"].is_null()) {
            m_StatusText = std::make_shared< std::wstring >(
                convertUtf8( json["StatusText"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< bool > FormField::getCalculateOnExit() const
    {
        return m_CalculateOnExit;
    }

    void FormField::setCalculateOnExit(std::shared_ptr< bool > value)
    {
        m_CalculateOnExit = value;
    }

    std::shared_ptr< bool > FormField::getEnabled() const
    {
        return m_Enabled;
    }

    void FormField::setEnabled(std::shared_ptr< bool > value)
    {
        m_Enabled = value;
    }

    std::shared_ptr< std::wstring > FormField::getEntryMacro() const
    {
        return m_EntryMacro;
    }

    void FormField::setEntryMacro(std::shared_ptr< std::wstring > value)
    {
        m_EntryMacro = value;
    }

    std::shared_ptr< std::wstring > FormField::getExitMacro() const
    {
        return m_ExitMacro;
    }

    void FormField::setExitMacro(std::shared_ptr< std::wstring > value)
    {
        m_ExitMacro = value;
    }

    std::shared_ptr< std::wstring > FormField::getHelpText() const
    {
        return m_HelpText;
    }

    void FormField::setHelpText(std::shared_ptr< std::wstring > value)
    {
        m_HelpText = value;
    }

    std::shared_ptr< std::wstring > FormField::getName() const
    {
        return m_Name;
    }

    void FormField::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< bool > FormField::getOwnHelp() const
    {
        return m_OwnHelp;
    }

    void FormField::setOwnHelp(std::shared_ptr< bool > value)
    {
        m_OwnHelp = value;
    }

    std::shared_ptr< bool > FormField::getOwnStatus() const
    {
        return m_OwnStatus;
    }

    void FormField::setOwnStatus(std::shared_ptr< bool > value)
    {
        m_OwnStatus = value;
    }

    std::shared_ptr< std::wstring > FormField::getStatusText() const
    {
        return m_StatusText;
    }

    void FormField::setStatusText(std::shared_ptr< std::wstring > value)
    {
        m_StatusText = value;
    }


    /*
     * FormFieldCheckbox implementation
     */
    void FormFieldCheckbox::toJson(void* jsonIfc) const
    {
        FormField::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CheckBoxSize) {
            json["CheckBoxSize"] = *m_CheckBoxSize;
        }
        if (m_Checked) {
            json["Checked"] = *m_Checked;
        }
        if (m_IsCheckBoxExactSize) {
            json["IsCheckBoxExactSize"] = *m_IsCheckBoxExactSize;
        }
    }

    void FormFieldCheckbox::fromJson(const void* jsonIfc)
    {
        FormField::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CheckBoxSize") && !json["CheckBoxSize"].is_null()) {
            m_CheckBoxSize = std::make_shared< double >(
                json["CheckBoxSize"].get< double >()
            );
        }
        if (json.contains("Checked") && !json["Checked"].is_null()) {
            m_Checked = std::make_shared< bool >(
                json["Checked"].get< bool >()
            );
        }
        if (json.contains("IsCheckBoxExactSize") && !json["IsCheckBoxExactSize"].is_null()) {
            m_IsCheckBoxExactSize = std::make_shared< bool >(
                json["IsCheckBoxExactSize"].get< bool >()
            );
        }
    }

    std::shared_ptr< double > FormFieldCheckbox::getCheckBoxSize() const
    {
        return m_CheckBoxSize;
    }

    void FormFieldCheckbox::setCheckBoxSize(std::shared_ptr< double > value)
    {
        m_CheckBoxSize = value;
    }

    std::shared_ptr< bool > FormFieldCheckbox::getChecked() const
    {
        return m_Checked;
    }

    void FormFieldCheckbox::setChecked(std::shared_ptr< bool > value)
    {
        m_Checked = value;
    }

    std::shared_ptr< bool > FormFieldCheckbox::getIsCheckBoxExactSize() const
    {
        return m_IsCheckBoxExactSize;
    }

    void FormFieldCheckbox::setIsCheckBoxExactSize(std::shared_ptr< bool > value)
    {
        m_IsCheckBoxExactSize = value;
    }


    /*
     * FormFieldCollection implementation
     */
    void FormFieldCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void FormFieldCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FormField>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::FormField >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FormField>> > FormFieldCollection::getList() const
    {
        return m_List;
    }

    void FormFieldCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FormField>> > value)
    {
        m_List = value;
    }


    /*
     * FormFieldDropDown implementation
     */
    void FormFieldDropDown::toJson(void* jsonIfc) const
    {
        FormField::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DropDownItems) {
            json["DropDownItems"] = ::nlohmann::json::array();
            for (auto& element : *m_DropDownItems) {
                json["DropDownItems"].push_back(convertUtf16(*element));
            }
        }
        if (m_DropDownSelectedIndex) {
            json["DropDownSelectedIndex"] = *m_DropDownSelectedIndex;
        }
    }

    void FormFieldDropDown::fromJson(const void* jsonIfc)
    {
        FormField::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DropDownItems") && !json["DropDownItems"].is_null()) {
            m_DropDownItems = std::make_shared< std::vector<std::shared_ptr<std::wstring>> >();
            for (auto& element : json["DropDownItems"]) {
                m_DropDownItems->push_back(std::make_shared< std::wstring >(convertUtf8( element.get< std::string >() )));
            }
        }
        if (json.contains("DropDownSelectedIndex") && !json["DropDownSelectedIndex"].is_null()) {
            m_DropDownSelectedIndex = std::make_shared< int32_t >(
                json["DropDownSelectedIndex"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > FormFieldDropDown::getDropDownItems() const
    {
        return m_DropDownItems;
    }

    void FormFieldDropDown::setDropDownItems(std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > value)
    {
        m_DropDownItems = value;
    }

    std::shared_ptr< int32_t > FormFieldDropDown::getDropDownSelectedIndex() const
    {
        return m_DropDownSelectedIndex;
    }

    void FormFieldDropDown::setDropDownSelectedIndex(std::shared_ptr< int32_t > value)
    {
        m_DropDownSelectedIndex = value;
    }


    /*
     * FormFieldResponse implementation
     */
    void FormFieldResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FormField) {
            m_FormField->toJson(&json["FormField"]);
        }
    }

    void FormFieldResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FormField") && !json["FormField"].is_null()) {
            m_FormField = std::make_shared< aspose::words::cloud::models::FormField >();
            m_FormField->fromJson(&json["FormField"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FormField > FormFieldResponse::getFormField() const
    {
        return m_FormField;
    }

    void FormFieldResponse::setFormField(std::shared_ptr< aspose::words::cloud::models::FormField > value)
    {
        m_FormField = value;
    }


    /*
     * FormFieldsResponse implementation
     */
    void FormFieldsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FormFields) {
            m_FormFields->toJson(&json["FormFields"]);
        }
    }

    void FormFieldsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FormFields") && !json["FormFields"].is_null()) {
            m_FormFields = std::make_shared< aspose::words::cloud::models::FormFieldCollection >();
            m_FormFields->fromJson(&json["FormFields"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FormFieldCollection > FormFieldsResponse::getFormFields() const
    {
        return m_FormFields;
    }

    void FormFieldsResponse::setFormFields(std::shared_ptr< aspose::words::cloud::models::FormFieldCollection > value)
    {
        m_FormFields = value;
    }


    /*
     * FormFieldTextInput implementation
     */
    inline std::string formFieldTextInputTextInputTypeToString(aspose::words::cloud::models::FormFieldTextInput::TextInputType value)
    {
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::REGULAR) return "Regular";
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::NUMBER) return "Number";
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::DATE) return "Date";
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::CURRENT_DATE) return "CurrentDate";
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::CURRENT_TIME) return "CurrentTime";
        if (value == aspose::words::cloud::models::FormFieldTextInput::TextInputType::CALCULATED) return "Calculated";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::FormFieldTextInput::TextInputType formFieldTextInputTextInputTypeFromString(const std::string& value)
    {
        if (value == "Regular") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::REGULAR;
        if (value == "Number") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::NUMBER;
        if (value == "Date") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::DATE;
        if (value == "CurrentDate") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::CURRENT_DATE;
        if (value == "CurrentTime") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::CURRENT_TIME;
        if (value == "Calculated") return aspose::words::cloud::models::FormFieldTextInput::TextInputType::CALCULATED;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void FormFieldTextInput::toJson(void* jsonIfc) const
    {
        FormField::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_MaxLength) {
            json["MaxLength"] = *m_MaxLength;
        }
        if (m_TextInputDefault) {
            json["TextInputDefault"] = convertUtf16(*m_TextInputDefault);
        }
        if (m_TextInputFormat) {
            json["TextInputFormat"] = convertUtf16(*m_TextInputFormat);
        }
        if (m_TextInputType) {
            json["TextInputType"] = formFieldTextInputTextInputTypeToString(*m_TextInputType);
        }
    }

    void FormFieldTextInput::fromJson(const void* jsonIfc)
    {
        FormField::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("MaxLength") && !json["MaxLength"].is_null()) {
            m_MaxLength = std::make_shared< int32_t >(
                json["MaxLength"].get< int32_t >()
            );
        }
        if (json.contains("TextInputDefault") && !json["TextInputDefault"].is_null()) {
            m_TextInputDefault = std::make_shared< std::wstring >(
                convertUtf8( json["TextInputDefault"].get< std::string >() )
            );
        }
        if (json.contains("TextInputFormat") && !json["TextInputFormat"].is_null()) {
            m_TextInputFormat = std::make_shared< std::wstring >(
                convertUtf8( json["TextInputFormat"].get< std::string >() )
            );
        }
        if (json.contains("TextInputType") && !json["TextInputType"].is_null()) {
            m_TextInputType = std::make_shared< aspose::words::cloud::models::FormFieldTextInput::TextInputType >(
                formFieldTextInputTextInputTypeFromString(json["TextInputType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< int32_t > FormFieldTextInput::getMaxLength() const
    {
        return m_MaxLength;
    }

    void FormFieldTextInput::setMaxLength(std::shared_ptr< int32_t > value)
    {
        m_MaxLength = value;
    }

    std::shared_ptr< std::wstring > FormFieldTextInput::getTextInputDefault() const
    {
        return m_TextInputDefault;
    }

    void FormFieldTextInput::setTextInputDefault(std::shared_ptr< std::wstring > value)
    {
        m_TextInputDefault = value;
    }

    std::shared_ptr< std::wstring > FormFieldTextInput::getTextInputFormat() const
    {
        return m_TextInputFormat;
    }

    void FormFieldTextInput::setTextInputFormat(std::shared_ptr< std::wstring > value)
    {
        m_TextInputFormat = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FormFieldTextInput::TextInputType > FormFieldTextInput::getTextInputType() const
    {
        return m_TextInputType;
    }

    void FormFieldTextInput::setTextInputType(std::shared_ptr< aspose::words::cloud::models::FormFieldTextInput::TextInputType > value)
    {
        m_TextInputType = value;
    }


    /*
     * GifSaveOptionsData implementation
     */
    void GifSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
    }

    void GifSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
    }




    /*
     * GraphicsQualityOptionsData implementation
     */
    inline std::string graphicsQualityOptionsDataCompositingModeToString(aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode value)
    {
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode::SOURCE_OVER) return "SourceOver";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode::SOURCE_COPY) return "SourceCopy";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode graphicsQualityOptionsDataCompositingModeFromString(const std::string& value)
    {
        if (value == "SourceOver") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode::SOURCE_OVER;
        if (value == "SourceCopy") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode::SOURCE_COPY;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string graphicsQualityOptionsDataCompositingQualityToString(aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality value)
    {
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::HIGH_SPEED) return "HighSpeed";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::HIGH_QUALITY) return "HighQuality";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::GAMMA_CORRECTED) return "GammaCorrected";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::ASSUME_LINEAR) return "AssumeLinear";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::INVALID) return "Invalid";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality graphicsQualityOptionsDataCompositingQualityFromString(const std::string& value)
    {
        if (value == "Default") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::DEFAULT;
        if (value == "HighSpeed") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::HIGH_SPEED;
        if (value == "HighQuality") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::HIGH_QUALITY;
        if (value == "GammaCorrected") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::GAMMA_CORRECTED;
        if (value == "AssumeLinear") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::ASSUME_LINEAR;
        if (value == "Invalid") return aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality::INVALID;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string graphicsQualityOptionsDataInterpolationModeToString(aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode value)
    {
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::LOW) return "Low";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH) return "High";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::BILINEAR) return "Bilinear";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::BICUBIC) return "Bicubic";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::NEAREST_NEIGHBOR) return "NearestNeighbor";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH_QUALITY_BILINEAR) return "HighQualityBilinear";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH_QUALITY_BICUBIC) return "HighQualityBicubic";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::INVALID) return "Invalid";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode graphicsQualityOptionsDataInterpolationModeFromString(const std::string& value)
    {
        if (value == "Default") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::DEFAULT;
        if (value == "Low") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::LOW;
        if (value == "High") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH;
        if (value == "Bilinear") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::BILINEAR;
        if (value == "Bicubic") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::BICUBIC;
        if (value == "NearestNeighbor") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::NEAREST_NEIGHBOR;
        if (value == "HighQualityBilinear") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH_QUALITY_BILINEAR;
        if (value == "HighQualityBicubic") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::HIGH_QUALITY_BICUBIC;
        if (value == "Invalid") return aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode::INVALID;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string graphicsQualityOptionsDataSmoothingModeToString(aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode value)
    {
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::HIGH_SPEED) return "HighSpeed";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::HIGH_QUALITY) return "HighQuality";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::NONE) return "None";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::ANTI_ALIAS) return "AntiAlias";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::INVALID) return "Invalid";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode graphicsQualityOptionsDataSmoothingModeFromString(const std::string& value)
    {
        if (value == "Default") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::DEFAULT;
        if (value == "HighSpeed") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::HIGH_SPEED;
        if (value == "HighQuality") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::HIGH_QUALITY;
        if (value == "None") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::NONE;
        if (value == "AntiAlias") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::ANTI_ALIAS;
        if (value == "Invalid") return aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode::INVALID;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string graphicsQualityOptionsDataTextRenderingHintToString(aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint value)
    {
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SYSTEM_DEFAULT) return "SystemDefault";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SINGLE_BIT_PER_PIXEL_GRID_FIT) return "SingleBitPerPixelGridFit";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SINGLE_BIT_PER_PIXEL) return "SingleBitPerPixel";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::ANTI_ALIAS_GRID_FIT) return "AntiAliasGridFit";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::ANTI_ALIAS) return "AntiAlias";
        if (value == aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::CLEAR_TYPE_GRID_FIT) return "ClearTypeGridFit";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint graphicsQualityOptionsDataTextRenderingHintFromString(const std::string& value)
    {
        if (value == "SystemDefault") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SYSTEM_DEFAULT;
        if (value == "SingleBitPerPixelGridFit") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SINGLE_BIT_PER_PIXEL_GRID_FIT;
        if (value == "SingleBitPerPixel") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::SINGLE_BIT_PER_PIXEL;
        if (value == "AntiAliasGridFit") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::ANTI_ALIAS_GRID_FIT;
        if (value == "AntiAlias") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::ANTI_ALIAS;
        if (value == "ClearTypeGridFit") return aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint::CLEAR_TYPE_GRID_FIT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void GraphicsQualityOptionsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CompositingMode) {
            json["CompositingMode"] = graphicsQualityOptionsDataCompositingModeToString(*m_CompositingMode);
        }
        if (m_CompositingQuality) {
            json["CompositingQuality"] = graphicsQualityOptionsDataCompositingQualityToString(*m_CompositingQuality);
        }
        if (m_InterpolationMode) {
            json["InterpolationMode"] = graphicsQualityOptionsDataInterpolationModeToString(*m_InterpolationMode);
        }
        if (m_SmoothingMode) {
            json["SmoothingMode"] = graphicsQualityOptionsDataSmoothingModeToString(*m_SmoothingMode);
        }
        if (m_StringFormat) {
            m_StringFormat->toJson(&json["StringFormat"]);
        }
        if (m_TextRenderingHint) {
            json["TextRenderingHint"] = graphicsQualityOptionsDataTextRenderingHintToString(*m_TextRenderingHint);
        }
    }

    void GraphicsQualityOptionsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CompositingMode") && !json["CompositingMode"].is_null()) {
            m_CompositingMode = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode >(
                graphicsQualityOptionsDataCompositingModeFromString(json["CompositingMode"].get< std::string >())
            );
        }
        if (json.contains("CompositingQuality") && !json["CompositingQuality"].is_null()) {
            m_CompositingQuality = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality >(
                graphicsQualityOptionsDataCompositingQualityFromString(json["CompositingQuality"].get< std::string >())
            );
        }
        if (json.contains("InterpolationMode") && !json["InterpolationMode"].is_null()) {
            m_InterpolationMode = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode >(
                graphicsQualityOptionsDataInterpolationModeFromString(json["InterpolationMode"].get< std::string >())
            );
        }
        if (json.contains("SmoothingMode") && !json["SmoothingMode"].is_null()) {
            m_SmoothingMode = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode >(
                graphicsQualityOptionsDataSmoothingModeFromString(json["SmoothingMode"].get< std::string >())
            );
        }
        if (json.contains("StringFormat") && !json["StringFormat"].is_null()) {
            m_StringFormat = std::make_shared< aspose::words::cloud::models::StringFormatData >();
            m_StringFormat->fromJson(&json["StringFormat"]);
        }
        if (json.contains("TextRenderingHint") && !json["TextRenderingHint"].is_null()) {
            m_TextRenderingHint = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint >(
                graphicsQualityOptionsDataTextRenderingHintFromString(json["TextRenderingHint"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode > GraphicsQualityOptionsData::getCompositingMode() const
    {
        return m_CompositingMode;
    }

    void GraphicsQualityOptionsData::setCompositingMode(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingMode > value)
    {
        m_CompositingMode = value;
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality > GraphicsQualityOptionsData::getCompositingQuality() const
    {
        return m_CompositingQuality;
    }

    void GraphicsQualityOptionsData::setCompositingQuality(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::CompositingQuality > value)
    {
        m_CompositingQuality = value;
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode > GraphicsQualityOptionsData::getInterpolationMode() const
    {
        return m_InterpolationMode;
    }

    void GraphicsQualityOptionsData::setInterpolationMode(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::InterpolationMode > value)
    {
        m_InterpolationMode = value;
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode > GraphicsQualityOptionsData::getSmoothingMode() const
    {
        return m_SmoothingMode;
    }

    void GraphicsQualityOptionsData::setSmoothingMode(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::SmoothingMode > value)
    {
        m_SmoothingMode = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData > GraphicsQualityOptionsData::getStringFormat() const
    {
        return m_StringFormat;
    }

    void GraphicsQualityOptionsData::setStringFormat(std::shared_ptr< aspose::words::cloud::models::StringFormatData > value)
    {
        m_StringFormat = value;
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint > GraphicsQualityOptionsData::getTextRenderingHint() const
    {
        return m_TextRenderingHint;
    }

    void GraphicsQualityOptionsData::setTextRenderingHint(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData::TextRenderingHint > value)
    {
        m_TextRenderingHint = value;
    }


    /*
     * HeaderFooter implementation
     */
    void HeaderFooter::toJson(void* jsonIfc) const
    {
        HeaderFooterLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ChildNodes) {
            json["ChildNodes"] = ::nlohmann::json::array();
            for (auto& element : *m_ChildNodes) {
                element->toJson(&json["ChildNodes"].emplace_back());
            }
        }
        if (m_DrawingObjects) {
            m_DrawingObjects->toJson(&json["DrawingObjects"]);
        }
        if (m_Paragraphs) {
            m_Paragraphs->toJson(&json["Paragraphs"]);
        }
    }

    void HeaderFooter::fromJson(const void* jsonIfc)
    {
        HeaderFooterLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ChildNodes") && !json["ChildNodes"].is_null()) {
            m_ChildNodes = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> >();
            for (auto& element : json["ChildNodes"]) {
                m_ChildNodes->emplace_back(std::make_shared< aspose::words::cloud::models::NodeLink >())->fromJson(&element);
            }
        }
        if (json.contains("DrawingObjects") && !json["DrawingObjects"].is_null()) {
            m_DrawingObjects = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_DrawingObjects->fromJson(&json["DrawingObjects"]);
        }
        if (json.contains("Paragraphs") && !json["Paragraphs"].is_null()) {
            m_Paragraphs = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_Paragraphs->fromJson(&json["Paragraphs"]);
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > HeaderFooter::getChildNodes() const
    {
        return m_ChildNodes;
    }

    void HeaderFooter::setChildNodes(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > value)
    {
        m_ChildNodes = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > HeaderFooter::getDrawingObjects() const
    {
        return m_DrawingObjects;
    }

    void HeaderFooter::setDrawingObjects(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_DrawingObjects = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > HeaderFooter::getParagraphs() const
    {
        return m_Paragraphs;
    }

    void HeaderFooter::setParagraphs(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_Paragraphs = value;
    }


    /*
     * HeaderFooterLink implementation
     */
    inline std::string headerFooterLinkTypeToString(aspose::words::cloud::models::HeaderFooterLink::Type value)
    {
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_EVEN) return "HeaderEven";
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_PRIMARY) return "HeaderPrimary";
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_EVEN) return "FooterEven";
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_PRIMARY) return "FooterPrimary";
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_FIRST) return "HeaderFirst";
        if (value == aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_FIRST) return "FooterFirst";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::HeaderFooterLink::Type headerFooterLinkTypeFromString(const std::string& value)
    {
        if (value == "HeaderEven") return aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_EVEN;
        if (value == "HeaderPrimary") return aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_PRIMARY;
        if (value == "FooterEven") return aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_EVEN;
        if (value == "FooterPrimary") return aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_PRIMARY;
        if (value == "HeaderFirst") return aspose::words::cloud::models::HeaderFooterLink::Type::HEADER_FIRST;
        if (value == "FooterFirst") return aspose::words::cloud::models::HeaderFooterLink::Type::FOOTER_FIRST;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void HeaderFooterLink::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Type) {
            json["Type"] = headerFooterLinkTypeToString(*m_Type);
        }
    }

    void HeaderFooterLink::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Type") && !json["Type"].is_null()) {
            m_Type = std::make_shared< aspose::words::cloud::models::HeaderFooterLink::Type >(
                headerFooterLinkTypeFromString(json["Type"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::HeaderFooterLink::Type > HeaderFooterLink::getType() const
    {
        return m_Type;
    }

    void HeaderFooterLink::setType(std::shared_ptr< aspose::words::cloud::models::HeaderFooterLink::Type > value)
    {
        m_Type = value;
    }


    /*
     * HeaderFooterLinkCollection implementation
     */
    void HeaderFooterLinkCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void HeaderFooterLinkCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::HeaderFooterLink>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::HeaderFooterLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::HeaderFooterLink>> > HeaderFooterLinkCollection::getList() const
    {
        return m_List;
    }

    void HeaderFooterLinkCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::HeaderFooterLink>> > value)
    {
        m_List = value;
    }


    /*
     * HeaderFooterResponse implementation
     */
    void HeaderFooterResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_HeaderFooter) {
            m_HeaderFooter->toJson(&json["HeaderFooter"]);
        }
    }

    void HeaderFooterResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("HeaderFooter") && !json["HeaderFooter"].is_null()) {
            m_HeaderFooter = std::make_shared< aspose::words::cloud::models::HeaderFooter >();
            m_HeaderFooter->fromJson(&json["HeaderFooter"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::HeaderFooter > HeaderFooterResponse::getHeaderFooter() const
    {
        return m_HeaderFooter;
    }

    void HeaderFooterResponse::setHeaderFooter(std::shared_ptr< aspose::words::cloud::models::HeaderFooter > value)
    {
        m_HeaderFooter = value;
    }


    /*
     * HeaderFootersResponse implementation
     */
    void HeaderFootersResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_HeaderFooters) {
            m_HeaderFooters->toJson(&json["HeaderFooters"]);
        }
    }

    void HeaderFootersResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("HeaderFooters") && !json["HeaderFooters"].is_null()) {
            m_HeaderFooters = std::make_shared< aspose::words::cloud::models::HeaderFooterLinkCollection >();
            m_HeaderFooters->fromJson(&json["HeaderFooters"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::HeaderFooterLinkCollection > HeaderFootersResponse::getHeaderFooters() const
    {
        return m_HeaderFooters;
    }

    void HeaderFootersResponse::setHeaderFooters(std::shared_ptr< aspose::words::cloud::models::HeaderFooterLinkCollection > value)
    {
        m_HeaderFooters = value;
    }


    /*
     * HtmlFixedSaveOptionsData implementation
     */
    void HtmlFixedSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CssClassNamesPrefix) {
            json["CssClassNamesPrefix"] = convertUtf16(*m_CssClassNamesPrefix);
        }
        if (m_Encoding) {
            json["Encoding"] = convertUtf16(*m_Encoding);
        }
        if (m_ExportEmbeddedCss) {
            json["ExportEmbeddedCss"] = *m_ExportEmbeddedCss;
        }
        if (m_ExportEmbeddedFonts) {
            json["ExportEmbeddedFonts"] = *m_ExportEmbeddedFonts;
        }
        if (m_ExportEmbeddedImages) {
            json["ExportEmbeddedImages"] = *m_ExportEmbeddedImages;
        }
        if (m_ExportFormFields) {
            json["ExportFormFields"] = *m_ExportFormFields;
        }
        if (m_FontFormat) {
            json["FontFormat"] = convertUtf16(*m_FontFormat);
        }
        if (m_PageHorizontalAlignment) {
            json["PageHorizontalAlignment"] = convertUtf16(*m_PageHorizontalAlignment);
        }
        if (m_PageMargins) {
            json["PageMargins"] = *m_PageMargins;
        }
        if (m_ResourcesFolder) {
            json["ResourcesFolder"] = convertUtf16(*m_ResourcesFolder);
        }
        if (m_ResourcesFolderAlias) {
            json["ResourcesFolderAlias"] = convertUtf16(*m_ResourcesFolderAlias);
        }
        if (m_SaveFontFaceCssSeparately) {
            json["SaveFontFaceCssSeparately"] = *m_SaveFontFaceCssSeparately;
        }
        if (m_ShowPageBorder) {
            json["ShowPageBorder"] = *m_ShowPageBorder;
        }
        if (m_UseTargetMachineFonts) {
            json["UseTargetMachineFonts"] = *m_UseTargetMachineFonts;
        }
    }

    void HtmlFixedSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CssClassNamesPrefix") && !json["CssClassNamesPrefix"].is_null()) {
            m_CssClassNamesPrefix = std::make_shared< std::wstring >(
                convertUtf8( json["CssClassNamesPrefix"].get< std::string >() )
            );
        }
        if (json.contains("Encoding") && !json["Encoding"].is_null()) {
            m_Encoding = std::make_shared< std::wstring >(
                convertUtf8( json["Encoding"].get< std::string >() )
            );
        }
        if (json.contains("ExportEmbeddedCss") && !json["ExportEmbeddedCss"].is_null()) {
            m_ExportEmbeddedCss = std::make_shared< bool >(
                json["ExportEmbeddedCss"].get< bool >()
            );
        }
        if (json.contains("ExportEmbeddedFonts") && !json["ExportEmbeddedFonts"].is_null()) {
            m_ExportEmbeddedFonts = std::make_shared< bool >(
                json["ExportEmbeddedFonts"].get< bool >()
            );
        }
        if (json.contains("ExportEmbeddedImages") && !json["ExportEmbeddedImages"].is_null()) {
            m_ExportEmbeddedImages = std::make_shared< bool >(
                json["ExportEmbeddedImages"].get< bool >()
            );
        }
        if (json.contains("ExportFormFields") && !json["ExportFormFields"].is_null()) {
            m_ExportFormFields = std::make_shared< bool >(
                json["ExportFormFields"].get< bool >()
            );
        }
        if (json.contains("FontFormat") && !json["FontFormat"].is_null()) {
            m_FontFormat = std::make_shared< std::wstring >(
                convertUtf8( json["FontFormat"].get< std::string >() )
            );
        }
        if (json.contains("PageHorizontalAlignment") && !json["PageHorizontalAlignment"].is_null()) {
            m_PageHorizontalAlignment = std::make_shared< std::wstring >(
                convertUtf8( json["PageHorizontalAlignment"].get< std::string >() )
            );
        }
        if (json.contains("PageMargins") && !json["PageMargins"].is_null()) {
            m_PageMargins = std::make_shared< double >(
                json["PageMargins"].get< double >()
            );
        }
        if (json.contains("ResourcesFolder") && !json["ResourcesFolder"].is_null()) {
            m_ResourcesFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolder"].get< std::string >() )
            );
        }
        if (json.contains("ResourcesFolderAlias") && !json["ResourcesFolderAlias"].is_null()) {
            m_ResourcesFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolderAlias"].get< std::string >() )
            );
        }
        if (json.contains("SaveFontFaceCssSeparately") && !json["SaveFontFaceCssSeparately"].is_null()) {
            m_SaveFontFaceCssSeparately = std::make_shared< bool >(
                json["SaveFontFaceCssSeparately"].get< bool >()
            );
        }
        if (json.contains("ShowPageBorder") && !json["ShowPageBorder"].is_null()) {
            m_ShowPageBorder = std::make_shared< bool >(
                json["ShowPageBorder"].get< bool >()
            );
        }
        if (json.contains("UseTargetMachineFonts") && !json["UseTargetMachineFonts"].is_null()) {
            m_UseTargetMachineFonts = std::make_shared< bool >(
                json["UseTargetMachineFonts"].get< bool >()
            );
        }
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getCssClassNamesPrefix() const
    {
        return m_CssClassNamesPrefix;
    }

    void HtmlFixedSaveOptionsData::setCssClassNamesPrefix(std::shared_ptr< std::wstring > value)
    {
        m_CssClassNamesPrefix = value;
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getEncoding() const
    {
        return m_Encoding;
    }

    void HtmlFixedSaveOptionsData::setEncoding(std::shared_ptr< std::wstring > value)
    {
        m_Encoding = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getExportEmbeddedCss() const
    {
        return m_ExportEmbeddedCss;
    }

    void HtmlFixedSaveOptionsData::setExportEmbeddedCss(std::shared_ptr< bool > value)
    {
        m_ExportEmbeddedCss = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getExportEmbeddedFonts() const
    {
        return m_ExportEmbeddedFonts;
    }

    void HtmlFixedSaveOptionsData::setExportEmbeddedFonts(std::shared_ptr< bool > value)
    {
        m_ExportEmbeddedFonts = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getExportEmbeddedImages() const
    {
        return m_ExportEmbeddedImages;
    }

    void HtmlFixedSaveOptionsData::setExportEmbeddedImages(std::shared_ptr< bool > value)
    {
        m_ExportEmbeddedImages = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getExportFormFields() const
    {
        return m_ExportFormFields;
    }

    void HtmlFixedSaveOptionsData::setExportFormFields(std::shared_ptr< bool > value)
    {
        m_ExportFormFields = value;
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getFontFormat() const
    {
        return m_FontFormat;
    }

    void HtmlFixedSaveOptionsData::setFontFormat(std::shared_ptr< std::wstring > value)
    {
        m_FontFormat = value;
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getPageHorizontalAlignment() const
    {
        return m_PageHorizontalAlignment;
    }

    void HtmlFixedSaveOptionsData::setPageHorizontalAlignment(std::shared_ptr< std::wstring > value)
    {
        m_PageHorizontalAlignment = value;
    }

    std::shared_ptr< double > HtmlFixedSaveOptionsData::getPageMargins() const
    {
        return m_PageMargins;
    }

    void HtmlFixedSaveOptionsData::setPageMargins(std::shared_ptr< double > value)
    {
        m_PageMargins = value;
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getResourcesFolder() const
    {
        return m_ResourcesFolder;
    }

    void HtmlFixedSaveOptionsData::setResourcesFolder(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolder = value;
    }

    std::shared_ptr< std::wstring > HtmlFixedSaveOptionsData::getResourcesFolderAlias() const
    {
        return m_ResourcesFolderAlias;
    }

    void HtmlFixedSaveOptionsData::setResourcesFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolderAlias = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getSaveFontFaceCssSeparately() const
    {
        return m_SaveFontFaceCssSeparately;
    }

    void HtmlFixedSaveOptionsData::setSaveFontFaceCssSeparately(std::shared_ptr< bool > value)
    {
        m_SaveFontFaceCssSeparately = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getShowPageBorder() const
    {
        return m_ShowPageBorder;
    }

    void HtmlFixedSaveOptionsData::setShowPageBorder(std::shared_ptr< bool > value)
    {
        m_ShowPageBorder = value;
    }

    std::shared_ptr< bool > HtmlFixedSaveOptionsData::getUseTargetMachineFonts() const
    {
        return m_UseTargetMachineFonts;
    }

    void HtmlFixedSaveOptionsData::setUseTargetMachineFonts(std::shared_ptr< bool > value)
    {
        m_UseTargetMachineFonts = value;
    }


    /*
     * HtmlSaveOptionsData implementation
     */
    inline std::string htmlSaveOptionsDataHtmlVersionToString(aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion value)
    {
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion::XHTML) return "Xhtml";
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion::HTML5) return "Html5";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion htmlSaveOptionsDataHtmlVersionFromString(const std::string& value)
    {
        if (value == "Xhtml") return aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion::XHTML;
        if (value == "Html5") return aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion::HTML5;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string htmlSaveOptionsDataMetafileFormatToString(aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat value)
    {
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::PNG) return "Png";
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::SVG) return "Svg";
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::EMF_OR_WMF) return "EmfOrWmf";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat htmlSaveOptionsDataMetafileFormatFromString(const std::string& value)
    {
        if (value == "Png") return aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::PNG;
        if (value == "Svg") return aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::SVG;
        if (value == "EmfOrWmf") return aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat::EMF_OR_WMF;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string htmlSaveOptionsDataOfficeMathOutputModeToString(aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode value)
    {
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::IMAGE) return "Image";
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::MATH_ML) return "MathML";
        if (value == aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::TEXT) return "Text";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode htmlSaveOptionsDataOfficeMathOutputModeFromString(const std::string& value)
    {
        if (value == "Image") return aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::IMAGE;
        if (value == "MathML") return aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::MATH_ML;
        if (value == "Text") return aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode::TEXT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void HtmlSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AllowNegativeIndent) {
            json["AllowNegativeIndent"] = *m_AllowNegativeIndent;
        }
        if (m_CssClassNamePrefix) {
            json["CssClassNamePrefix"] = convertUtf16(*m_CssClassNamePrefix);
        }
        if (m_CssStyleSheetFileName) {
            json["CssStyleSheetFileName"] = convertUtf16(*m_CssStyleSheetFileName);
        }
        if (m_CssStyleSheetType) {
            json["CssStyleSheetType"] = convertUtf16(*m_CssStyleSheetType);
        }
        if (m_DocumentSplitCriteria) {
            json["DocumentSplitCriteria"] = convertUtf16(*m_DocumentSplitCriteria);
        }
        if (m_DocumentSplitHeadingLevel) {
            json["DocumentSplitHeadingLevel"] = *m_DocumentSplitHeadingLevel;
        }
        if (m_Encoding) {
            json["Encoding"] = convertUtf16(*m_Encoding);
        }
        if (m_ExportDocumentProperties) {
            json["ExportDocumentProperties"] = *m_ExportDocumentProperties;
        }
        if (m_ExportDropDownFormFieldAsText) {
            json["ExportDropDownFormFieldAsText"] = *m_ExportDropDownFormFieldAsText;
        }
        if (m_ExportFontResources) {
            json["ExportFontResources"] = *m_ExportFontResources;
        }
        if (m_ExportFontsAsBase64) {
            json["ExportFontsAsBase64"] = *m_ExportFontsAsBase64;
        }
        if (m_ExportHeadersFootersMode) {
            json["ExportHeadersFootersMode"] = convertUtf16(*m_ExportHeadersFootersMode);
        }
        if (m_ExportImagesAsBase64) {
            json["ExportImagesAsBase64"] = *m_ExportImagesAsBase64;
        }
        if (m_ExportLanguageInformation) {
            json["ExportLanguageInformation"] = *m_ExportLanguageInformation;
        }
        if (m_ExportListLabels) {
            json["ExportListLabels"] = convertUtf16(*m_ExportListLabels);
        }
        if (m_ExportOriginalUrlForLinkedImages) {
            json["ExportOriginalUrlForLinkedImages"] = *m_ExportOriginalUrlForLinkedImages;
        }
        if (m_ExportPageMargins) {
            json["ExportPageMargins"] = *m_ExportPageMargins;
        }
        if (m_ExportPageSetup) {
            json["ExportPageSetup"] = *m_ExportPageSetup;
        }
        if (m_ExportRelativeFontSize) {
            json["ExportRelativeFontSize"] = *m_ExportRelativeFontSize;
        }
        if (m_ExportRoundtripInformation) {
            json["ExportRoundtripInformation"] = *m_ExportRoundtripInformation;
        }
        if (m_ExportTextBoxAsSvg) {
            json["ExportTextBoxAsSvg"] = *m_ExportTextBoxAsSvg;
        }
        if (m_ExportTextInputFormFieldAsText) {
            json["ExportTextInputFormFieldAsText"] = *m_ExportTextInputFormFieldAsText;
        }
        if (m_ExportTocPageNumbers) {
            json["ExportTocPageNumbers"] = *m_ExportTocPageNumbers;
        }
        if (m_ExportXhtmlTransitional) {
            json["ExportXhtmlTransitional"] = *m_ExportXhtmlTransitional;
        }
        if (m_FontResourcesSubsettingSizeThreshold) {
            json["FontResourcesSubsettingSizeThreshold"] = *m_FontResourcesSubsettingSizeThreshold;
        }
        if (m_FontsFolder) {
            json["FontsFolder"] = convertUtf16(*m_FontsFolder);
        }
        if (m_FontsFolderAlias) {
            json["FontsFolderAlias"] = convertUtf16(*m_FontsFolderAlias);
        }
        if (m_HtmlVersion) {
            json["HtmlVersion"] = htmlSaveOptionsDataHtmlVersionToString(*m_HtmlVersion);
        }
        if (m_ImageResolution) {
            json["ImageResolution"] = *m_ImageResolution;
        }
        if (m_ImagesFolder) {
            json["ImagesFolder"] = convertUtf16(*m_ImagesFolder);
        }
        if (m_ImagesFolderAlias) {
            json["ImagesFolderAlias"] = convertUtf16(*m_ImagesFolderAlias);
        }
        if (m_MetafileFormat) {
            json["MetafileFormat"] = htmlSaveOptionsDataMetafileFormatToString(*m_MetafileFormat);
        }
        if (m_OfficeMathOutputMode) {
            json["OfficeMathOutputMode"] = htmlSaveOptionsDataOfficeMathOutputModeToString(*m_OfficeMathOutputMode);
        }
        if (m_PrettyFormat) {
            json["PrettyFormat"] = *m_PrettyFormat;
        }
        if (m_ResolveFontNames) {
            json["ResolveFontNames"] = *m_ResolveFontNames;
        }
        if (m_ResourceFolder) {
            json["ResourceFolder"] = convertUtf16(*m_ResourceFolder);
        }
        if (m_ResourceFolderAlias) {
            json["ResourceFolderAlias"] = convertUtf16(*m_ResourceFolderAlias);
        }
        if (m_ScaleImageToShapeSize) {
            json["ScaleImageToShapeSize"] = *m_ScaleImageToShapeSize;
        }
        if (m_TableWidthOutputMode) {
            json["TableWidthOutputMode"] = convertUtf16(*m_TableWidthOutputMode);
        }
    }

    void HtmlSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AllowNegativeIndent") && !json["AllowNegativeIndent"].is_null()) {
            m_AllowNegativeIndent = std::make_shared< bool >(
                json["AllowNegativeIndent"].get< bool >()
            );
        }
        if (json.contains("CssClassNamePrefix") && !json["CssClassNamePrefix"].is_null()) {
            m_CssClassNamePrefix = std::make_shared< std::wstring >(
                convertUtf8( json["CssClassNamePrefix"].get< std::string >() )
            );
        }
        if (json.contains("CssStyleSheetFileName") && !json["CssStyleSheetFileName"].is_null()) {
            m_CssStyleSheetFileName = std::make_shared< std::wstring >(
                convertUtf8( json["CssStyleSheetFileName"].get< std::string >() )
            );
        }
        if (json.contains("CssStyleSheetType") && !json["CssStyleSheetType"].is_null()) {
            m_CssStyleSheetType = std::make_shared< std::wstring >(
                convertUtf8( json["CssStyleSheetType"].get< std::string >() )
            );
        }
        if (json.contains("DocumentSplitCriteria") && !json["DocumentSplitCriteria"].is_null()) {
            m_DocumentSplitCriteria = std::make_shared< std::wstring >(
                convertUtf8( json["DocumentSplitCriteria"].get< std::string >() )
            );
        }
        if (json.contains("DocumentSplitHeadingLevel") && !json["DocumentSplitHeadingLevel"].is_null()) {
            m_DocumentSplitHeadingLevel = std::make_shared< int32_t >(
                json["DocumentSplitHeadingLevel"].get< int32_t >()
            );
        }
        if (json.contains("Encoding") && !json["Encoding"].is_null()) {
            m_Encoding = std::make_shared< std::wstring >(
                convertUtf8( json["Encoding"].get< std::string >() )
            );
        }
        if (json.contains("ExportDocumentProperties") && !json["ExportDocumentProperties"].is_null()) {
            m_ExportDocumentProperties = std::make_shared< bool >(
                json["ExportDocumentProperties"].get< bool >()
            );
        }
        if (json.contains("ExportDropDownFormFieldAsText") && !json["ExportDropDownFormFieldAsText"].is_null()) {
            m_ExportDropDownFormFieldAsText = std::make_shared< bool >(
                json["ExportDropDownFormFieldAsText"].get< bool >()
            );
        }
        if (json.contains("ExportFontResources") && !json["ExportFontResources"].is_null()) {
            m_ExportFontResources = std::make_shared< bool >(
                json["ExportFontResources"].get< bool >()
            );
        }
        if (json.contains("ExportFontsAsBase64") && !json["ExportFontsAsBase64"].is_null()) {
            m_ExportFontsAsBase64 = std::make_shared< bool >(
                json["ExportFontsAsBase64"].get< bool >()
            );
        }
        if (json.contains("ExportHeadersFootersMode") && !json["ExportHeadersFootersMode"].is_null()) {
            m_ExportHeadersFootersMode = std::make_shared< std::wstring >(
                convertUtf8( json["ExportHeadersFootersMode"].get< std::string >() )
            );
        }
        if (json.contains("ExportImagesAsBase64") && !json["ExportImagesAsBase64"].is_null()) {
            m_ExportImagesAsBase64 = std::make_shared< bool >(
                json["ExportImagesAsBase64"].get< bool >()
            );
        }
        if (json.contains("ExportLanguageInformation") && !json["ExportLanguageInformation"].is_null()) {
            m_ExportLanguageInformation = std::make_shared< bool >(
                json["ExportLanguageInformation"].get< bool >()
            );
        }
        if (json.contains("ExportListLabels") && !json["ExportListLabels"].is_null()) {
            m_ExportListLabels = std::make_shared< std::wstring >(
                convertUtf8( json["ExportListLabels"].get< std::string >() )
            );
        }
        if (json.contains("ExportOriginalUrlForLinkedImages") && !json["ExportOriginalUrlForLinkedImages"].is_null()) {
            m_ExportOriginalUrlForLinkedImages = std::make_shared< bool >(
                json["ExportOriginalUrlForLinkedImages"].get< bool >()
            );
        }
        if (json.contains("ExportPageMargins") && !json["ExportPageMargins"].is_null()) {
            m_ExportPageMargins = std::make_shared< bool >(
                json["ExportPageMargins"].get< bool >()
            );
        }
        if (json.contains("ExportPageSetup") && !json["ExportPageSetup"].is_null()) {
            m_ExportPageSetup = std::make_shared< bool >(
                json["ExportPageSetup"].get< bool >()
            );
        }
        if (json.contains("ExportRelativeFontSize") && !json["ExportRelativeFontSize"].is_null()) {
            m_ExportRelativeFontSize = std::make_shared< bool >(
                json["ExportRelativeFontSize"].get< bool >()
            );
        }
        if (json.contains("ExportRoundtripInformation") && !json["ExportRoundtripInformation"].is_null()) {
            m_ExportRoundtripInformation = std::make_shared< bool >(
                json["ExportRoundtripInformation"].get< bool >()
            );
        }
        if (json.contains("ExportTextBoxAsSvg") && !json["ExportTextBoxAsSvg"].is_null()) {
            m_ExportTextBoxAsSvg = std::make_shared< bool >(
                json["ExportTextBoxAsSvg"].get< bool >()
            );
        }
        if (json.contains("ExportTextInputFormFieldAsText") && !json["ExportTextInputFormFieldAsText"].is_null()) {
            m_ExportTextInputFormFieldAsText = std::make_shared< bool >(
                json["ExportTextInputFormFieldAsText"].get< bool >()
            );
        }
        if (json.contains("ExportTocPageNumbers") && !json["ExportTocPageNumbers"].is_null()) {
            m_ExportTocPageNumbers = std::make_shared< bool >(
                json["ExportTocPageNumbers"].get< bool >()
            );
        }
        if (json.contains("ExportXhtmlTransitional") && !json["ExportXhtmlTransitional"].is_null()) {
            m_ExportXhtmlTransitional = std::make_shared< bool >(
                json["ExportXhtmlTransitional"].get< bool >()
            );
        }
        if (json.contains("FontResourcesSubsettingSizeThreshold") && !json["FontResourcesSubsettingSizeThreshold"].is_null()) {
            m_FontResourcesSubsettingSizeThreshold = std::make_shared< int32_t >(
                json["FontResourcesSubsettingSizeThreshold"].get< int32_t >()
            );
        }
        if (json.contains("FontsFolder") && !json["FontsFolder"].is_null()) {
            m_FontsFolder = std::make_shared< std::wstring >(
                convertUtf8( json["FontsFolder"].get< std::string >() )
            );
        }
        if (json.contains("FontsFolderAlias") && !json["FontsFolderAlias"].is_null()) {
            m_FontsFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["FontsFolderAlias"].get< std::string >() )
            );
        }
        if (json.contains("HtmlVersion") && !json["HtmlVersion"].is_null()) {
            m_HtmlVersion = std::make_shared< aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion >(
                htmlSaveOptionsDataHtmlVersionFromString(json["HtmlVersion"].get< std::string >())
            );
        }
        if (json.contains("ImageResolution") && !json["ImageResolution"].is_null()) {
            m_ImageResolution = std::make_shared< int32_t >(
                json["ImageResolution"].get< int32_t >()
            );
        }
        if (json.contains("ImagesFolder") && !json["ImagesFolder"].is_null()) {
            m_ImagesFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ImagesFolder"].get< std::string >() )
            );
        }
        if (json.contains("ImagesFolderAlias") && !json["ImagesFolderAlias"].is_null()) {
            m_ImagesFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ImagesFolderAlias"].get< std::string >() )
            );
        }
        if (json.contains("MetafileFormat") && !json["MetafileFormat"].is_null()) {
            m_MetafileFormat = std::make_shared< aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat >(
                htmlSaveOptionsDataMetafileFormatFromString(json["MetafileFormat"].get< std::string >())
            );
        }
        if (json.contains("OfficeMathOutputMode") && !json["OfficeMathOutputMode"].is_null()) {
            m_OfficeMathOutputMode = std::make_shared< aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode >(
                htmlSaveOptionsDataOfficeMathOutputModeFromString(json["OfficeMathOutputMode"].get< std::string >())
            );
        }
        if (json.contains("PrettyFormat") && !json["PrettyFormat"].is_null()) {
            m_PrettyFormat = std::make_shared< bool >(
                json["PrettyFormat"].get< bool >()
            );
        }
        if (json.contains("ResolveFontNames") && !json["ResolveFontNames"].is_null()) {
            m_ResolveFontNames = std::make_shared< bool >(
                json["ResolveFontNames"].get< bool >()
            );
        }
        if (json.contains("ResourceFolder") && !json["ResourceFolder"].is_null()) {
            m_ResourceFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ResourceFolder"].get< std::string >() )
            );
        }
        if (json.contains("ResourceFolderAlias") && !json["ResourceFolderAlias"].is_null()) {
            m_ResourceFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ResourceFolderAlias"].get< std::string >() )
            );
        }
        if (json.contains("ScaleImageToShapeSize") && !json["ScaleImageToShapeSize"].is_null()) {
            m_ScaleImageToShapeSize = std::make_shared< bool >(
                json["ScaleImageToShapeSize"].get< bool >()
            );
        }
        if (json.contains("TableWidthOutputMode") && !json["TableWidthOutputMode"].is_null()) {
            m_TableWidthOutputMode = std::make_shared< std::wstring >(
                convertUtf8( json["TableWidthOutputMode"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getAllowNegativeIndent() const
    {
        return m_AllowNegativeIndent;
    }

    void HtmlSaveOptionsData::setAllowNegativeIndent(std::shared_ptr< bool > value)
    {
        m_AllowNegativeIndent = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getCssClassNamePrefix() const
    {
        return m_CssClassNamePrefix;
    }

    void HtmlSaveOptionsData::setCssClassNamePrefix(std::shared_ptr< std::wstring > value)
    {
        m_CssClassNamePrefix = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getCssStyleSheetFileName() const
    {
        return m_CssStyleSheetFileName;
    }

    void HtmlSaveOptionsData::setCssStyleSheetFileName(std::shared_ptr< std::wstring > value)
    {
        m_CssStyleSheetFileName = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getCssStyleSheetType() const
    {
        return m_CssStyleSheetType;
    }

    void HtmlSaveOptionsData::setCssStyleSheetType(std::shared_ptr< std::wstring > value)
    {
        m_CssStyleSheetType = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getDocumentSplitCriteria() const
    {
        return m_DocumentSplitCriteria;
    }

    void HtmlSaveOptionsData::setDocumentSplitCriteria(std::shared_ptr< std::wstring > value)
    {
        m_DocumentSplitCriteria = value;
    }

    std::shared_ptr< int32_t > HtmlSaveOptionsData::getDocumentSplitHeadingLevel() const
    {
        return m_DocumentSplitHeadingLevel;
    }

    void HtmlSaveOptionsData::setDocumentSplitHeadingLevel(std::shared_ptr< int32_t > value)
    {
        m_DocumentSplitHeadingLevel = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getEncoding() const
    {
        return m_Encoding;
    }

    void HtmlSaveOptionsData::setEncoding(std::shared_ptr< std::wstring > value)
    {
        m_Encoding = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportDocumentProperties() const
    {
        return m_ExportDocumentProperties;
    }

    void HtmlSaveOptionsData::setExportDocumentProperties(std::shared_ptr< bool > value)
    {
        m_ExportDocumentProperties = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportDropDownFormFieldAsText() const
    {
        return m_ExportDropDownFormFieldAsText;
    }

    void HtmlSaveOptionsData::setExportDropDownFormFieldAsText(std::shared_ptr< bool > value)
    {
        m_ExportDropDownFormFieldAsText = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportFontResources() const
    {
        return m_ExportFontResources;
    }

    void HtmlSaveOptionsData::setExportFontResources(std::shared_ptr< bool > value)
    {
        m_ExportFontResources = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportFontsAsBase64() const
    {
        return m_ExportFontsAsBase64;
    }

    void HtmlSaveOptionsData::setExportFontsAsBase64(std::shared_ptr< bool > value)
    {
        m_ExportFontsAsBase64 = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getExportHeadersFootersMode() const
    {
        return m_ExportHeadersFootersMode;
    }

    void HtmlSaveOptionsData::setExportHeadersFootersMode(std::shared_ptr< std::wstring > value)
    {
        m_ExportHeadersFootersMode = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportImagesAsBase64() const
    {
        return m_ExportImagesAsBase64;
    }

    void HtmlSaveOptionsData::setExportImagesAsBase64(std::shared_ptr< bool > value)
    {
        m_ExportImagesAsBase64 = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportLanguageInformation() const
    {
        return m_ExportLanguageInformation;
    }

    void HtmlSaveOptionsData::setExportLanguageInformation(std::shared_ptr< bool > value)
    {
        m_ExportLanguageInformation = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getExportListLabels() const
    {
        return m_ExportListLabels;
    }

    void HtmlSaveOptionsData::setExportListLabels(std::shared_ptr< std::wstring > value)
    {
        m_ExportListLabels = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportOriginalUrlForLinkedImages() const
    {
        return m_ExportOriginalUrlForLinkedImages;
    }

    void HtmlSaveOptionsData::setExportOriginalUrlForLinkedImages(std::shared_ptr< bool > value)
    {
        m_ExportOriginalUrlForLinkedImages = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportPageMargins() const
    {
        return m_ExportPageMargins;
    }

    void HtmlSaveOptionsData::setExportPageMargins(std::shared_ptr< bool > value)
    {
        m_ExportPageMargins = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportPageSetup() const
    {
        return m_ExportPageSetup;
    }

    void HtmlSaveOptionsData::setExportPageSetup(std::shared_ptr< bool > value)
    {
        m_ExportPageSetup = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportRelativeFontSize() const
    {
        return m_ExportRelativeFontSize;
    }

    void HtmlSaveOptionsData::setExportRelativeFontSize(std::shared_ptr< bool > value)
    {
        m_ExportRelativeFontSize = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportRoundtripInformation() const
    {
        return m_ExportRoundtripInformation;
    }

    void HtmlSaveOptionsData::setExportRoundtripInformation(std::shared_ptr< bool > value)
    {
        m_ExportRoundtripInformation = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportTextBoxAsSvg() const
    {
        return m_ExportTextBoxAsSvg;
    }

    void HtmlSaveOptionsData::setExportTextBoxAsSvg(std::shared_ptr< bool > value)
    {
        m_ExportTextBoxAsSvg = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportTextInputFormFieldAsText() const
    {
        return m_ExportTextInputFormFieldAsText;
    }

    void HtmlSaveOptionsData::setExportTextInputFormFieldAsText(std::shared_ptr< bool > value)
    {
        m_ExportTextInputFormFieldAsText = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportTocPageNumbers() const
    {
        return m_ExportTocPageNumbers;
    }

    void HtmlSaveOptionsData::setExportTocPageNumbers(std::shared_ptr< bool > value)
    {
        m_ExportTocPageNumbers = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getExportXhtmlTransitional() const
    {
        return m_ExportXhtmlTransitional;
    }

    void HtmlSaveOptionsData::setExportXhtmlTransitional(std::shared_ptr< bool > value)
    {
        m_ExportXhtmlTransitional = value;
    }

    std::shared_ptr< int32_t > HtmlSaveOptionsData::getFontResourcesSubsettingSizeThreshold() const
    {
        return m_FontResourcesSubsettingSizeThreshold;
    }

    void HtmlSaveOptionsData::setFontResourcesSubsettingSizeThreshold(std::shared_ptr< int32_t > value)
    {
        m_FontResourcesSubsettingSizeThreshold = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getFontsFolder() const
    {
        return m_FontsFolder;
    }

    void HtmlSaveOptionsData::setFontsFolder(std::shared_ptr< std::wstring > value)
    {
        m_FontsFolder = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getFontsFolderAlias() const
    {
        return m_FontsFolderAlias;
    }

    void HtmlSaveOptionsData::setFontsFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_FontsFolderAlias = value;
    }

    std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion > HtmlSaveOptionsData::getHtmlVersion() const
    {
        return m_HtmlVersion;
    }

    void HtmlSaveOptionsData::setHtmlVersion(std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::HtmlVersion > value)
    {
        m_HtmlVersion = value;
    }

    std::shared_ptr< int32_t > HtmlSaveOptionsData::getImageResolution() const
    {
        return m_ImageResolution;
    }

    void HtmlSaveOptionsData::setImageResolution(std::shared_ptr< int32_t > value)
    {
        m_ImageResolution = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getImagesFolder() const
    {
        return m_ImagesFolder;
    }

    void HtmlSaveOptionsData::setImagesFolder(std::shared_ptr< std::wstring > value)
    {
        m_ImagesFolder = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getImagesFolderAlias() const
    {
        return m_ImagesFolderAlias;
    }

    void HtmlSaveOptionsData::setImagesFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ImagesFolderAlias = value;
    }

    std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat > HtmlSaveOptionsData::getMetafileFormat() const
    {
        return m_MetafileFormat;
    }

    void HtmlSaveOptionsData::setMetafileFormat(std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::MetafileFormat > value)
    {
        m_MetafileFormat = value;
    }

    std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode > HtmlSaveOptionsData::getOfficeMathOutputMode() const
    {
        return m_OfficeMathOutputMode;
    }

    void HtmlSaveOptionsData::setOfficeMathOutputMode(std::shared_ptr< aspose::words::cloud::models::HtmlSaveOptionsData::OfficeMathOutputMode > value)
    {
        m_OfficeMathOutputMode = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getPrettyFormat() const
    {
        return m_PrettyFormat;
    }

    void HtmlSaveOptionsData::setPrettyFormat(std::shared_ptr< bool > value)
    {
        m_PrettyFormat = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getResolveFontNames() const
    {
        return m_ResolveFontNames;
    }

    void HtmlSaveOptionsData::setResolveFontNames(std::shared_ptr< bool > value)
    {
        m_ResolveFontNames = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getResourceFolder() const
    {
        return m_ResourceFolder;
    }

    void HtmlSaveOptionsData::setResourceFolder(std::shared_ptr< std::wstring > value)
    {
        m_ResourceFolder = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getResourceFolderAlias() const
    {
        return m_ResourceFolderAlias;
    }

    void HtmlSaveOptionsData::setResourceFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ResourceFolderAlias = value;
    }

    std::shared_ptr< bool > HtmlSaveOptionsData::getScaleImageToShapeSize() const
    {
        return m_ScaleImageToShapeSize;
    }

    void HtmlSaveOptionsData::setScaleImageToShapeSize(std::shared_ptr< bool > value)
    {
        m_ScaleImageToShapeSize = value;
    }

    std::shared_ptr< std::wstring > HtmlSaveOptionsData::getTableWidthOutputMode() const
    {
        return m_TableWidthOutputMode;
    }

    void HtmlSaveOptionsData::setTableWidthOutputMode(std::shared_ptr< std::wstring > value)
    {
        m_TableWidthOutputMode = value;
    }


    /*
     * Hyperlink implementation
     */
    void Hyperlink::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DisplayText) {
            json["DisplayText"] = convertUtf16(*m_DisplayText);
        }
        if (m_Value) {
            json["Value"] = convertUtf16(*m_Value);
        }
    }

    void Hyperlink::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DisplayText") && !json["DisplayText"].is_null()) {
            m_DisplayText = std::make_shared< std::wstring >(
                convertUtf8( json["DisplayText"].get< std::string >() )
            );
        }
        if (json.contains("Value") && !json["Value"].is_null()) {
            m_Value = std::make_shared< std::wstring >(
                convertUtf8( json["Value"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Hyperlink::getDisplayText() const
    {
        return m_DisplayText;
    }

    void Hyperlink::setDisplayText(std::shared_ptr< std::wstring > value)
    {
        m_DisplayText = value;
    }

    std::shared_ptr< std::wstring > Hyperlink::getValue() const
    {
        return m_Value;
    }

    void Hyperlink::setValue(std::shared_ptr< std::wstring > value)
    {
        m_Value = value;
    }


    /*
     * HyperlinkResponse implementation
     */
    void HyperlinkResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Hyperlink) {
            m_Hyperlink->toJson(&json["Hyperlink"]);
        }
    }

    void HyperlinkResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Hyperlink") && !json["Hyperlink"].is_null()) {
            m_Hyperlink = std::make_shared< aspose::words::cloud::models::Hyperlink >();
            m_Hyperlink->fromJson(&json["Hyperlink"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Hyperlink > HyperlinkResponse::getHyperlink() const
    {
        return m_Hyperlink;
    }

    void HyperlinkResponse::setHyperlink(std::shared_ptr< aspose::words::cloud::models::Hyperlink > value)
    {
        m_Hyperlink = value;
    }


    /*
     * Hyperlinks implementation
     */
    void Hyperlinks::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_HyperlinkList) {
            json["HyperlinkList"] = ::nlohmann::json::array();
            for (auto& element : *m_HyperlinkList) {
                element->toJson(&json["HyperlinkList"].emplace_back());
            }
        }
    }

    void Hyperlinks::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("HyperlinkList") && !json["HyperlinkList"].is_null()) {
            m_HyperlinkList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Hyperlink>> >();
            for (auto& element : json["HyperlinkList"]) {
                m_HyperlinkList->emplace_back(std::make_shared< aspose::words::cloud::models::Hyperlink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Hyperlink>> > Hyperlinks::getHyperlinkList() const
    {
        return m_HyperlinkList;
    }

    void Hyperlinks::setHyperlinkList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Hyperlink>> > value)
    {
        m_HyperlinkList = value;
    }


    /*
     * HyperlinksResponse implementation
     */
    void HyperlinksResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Hyperlinks) {
            m_Hyperlinks->toJson(&json["Hyperlinks"]);
        }
    }

    void HyperlinksResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Hyperlinks") && !json["Hyperlinks"].is_null()) {
            m_Hyperlinks = std::make_shared< aspose::words::cloud::models::Hyperlinks >();
            m_Hyperlinks->fromJson(&json["Hyperlinks"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Hyperlinks > HyperlinksResponse::getHyperlinks() const
    {
        return m_Hyperlinks;
    }

    void HyperlinksResponse::setHyperlinks(std::shared_ptr< aspose::words::cloud::models::Hyperlinks > value)
    {
        m_Hyperlinks = value;
    }


    /*
     * ImageSaveOptionsData implementation
     */
    void ImageSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_GraphicsQualityOptions) {
            m_GraphicsQualityOptions->toJson(&json["GraphicsQualityOptions"]);
        }
        if (m_HorizontalResolution) {
            json["HorizontalResolution"] = *m_HorizontalResolution;
        }
        if (m_ImageBrightness) {
            json["ImageBrightness"] = *m_ImageBrightness;
        }
        if (m_ImageColorMode) {
            json["ImageColorMode"] = convertUtf16(*m_ImageColorMode);
        }
        if (m_ImageContrast) {
            json["ImageContrast"] = *m_ImageContrast;
        }
        if (m_PaperColor) {
            json["PaperColor"] = convertUtf16(*m_PaperColor);
        }
        if (m_PixelFormat) {
            json["PixelFormat"] = convertUtf16(*m_PixelFormat);
        }
        if (m_Resolution) {
            json["Resolution"] = *m_Resolution;
        }
        if (m_Scale) {
            json["Scale"] = *m_Scale;
        }
        if (m_UseAntiAliasing) {
            json["UseAntiAliasing"] = *m_UseAntiAliasing;
        }
        if (m_UseGdiEmfRenderer) {
            json["UseGdiEmfRenderer"] = *m_UseGdiEmfRenderer;
        }
        if (m_UseHighQualityRendering) {
            json["UseHighQualityRendering"] = *m_UseHighQualityRendering;
        }
        if (m_VerticalResolution) {
            json["VerticalResolution"] = *m_VerticalResolution;
        }
    }

    void ImageSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("GraphicsQualityOptions") && !json["GraphicsQualityOptions"].is_null()) {
            m_GraphicsQualityOptions = std::make_shared< aspose::words::cloud::models::GraphicsQualityOptionsData >();
            m_GraphicsQualityOptions->fromJson(&json["GraphicsQualityOptions"]);
        }
        if (json.contains("HorizontalResolution") && !json["HorizontalResolution"].is_null()) {
            m_HorizontalResolution = std::make_shared< double >(
                json["HorizontalResolution"].get< double >()
            );
        }
        if (json.contains("ImageBrightness") && !json["ImageBrightness"].is_null()) {
            m_ImageBrightness = std::make_shared< double >(
                json["ImageBrightness"].get< double >()
            );
        }
        if (json.contains("ImageColorMode") && !json["ImageColorMode"].is_null()) {
            m_ImageColorMode = std::make_shared< std::wstring >(
                convertUtf8( json["ImageColorMode"].get< std::string >() )
            );
        }
        if (json.contains("ImageContrast") && !json["ImageContrast"].is_null()) {
            m_ImageContrast = std::make_shared< double >(
                json["ImageContrast"].get< double >()
            );
        }
        if (json.contains("PaperColor") && !json["PaperColor"].is_null()) {
            m_PaperColor = std::make_shared< std::wstring >(
                convertUtf8( json["PaperColor"].get< std::string >() )
            );
        }
        if (json.contains("PixelFormat") && !json["PixelFormat"].is_null()) {
            m_PixelFormat = std::make_shared< std::wstring >(
                convertUtf8( json["PixelFormat"].get< std::string >() )
            );
        }
        if (json.contains("Resolution") && !json["Resolution"].is_null()) {
            m_Resolution = std::make_shared< double >(
                json["Resolution"].get< double >()
            );
        }
        if (json.contains("Scale") && !json["Scale"].is_null()) {
            m_Scale = std::make_shared< double >(
                json["Scale"].get< double >()
            );
        }
        if (json.contains("UseAntiAliasing") && !json["UseAntiAliasing"].is_null()) {
            m_UseAntiAliasing = std::make_shared< bool >(
                json["UseAntiAliasing"].get< bool >()
            );
        }
        if (json.contains("UseGdiEmfRenderer") && !json["UseGdiEmfRenderer"].is_null()) {
            m_UseGdiEmfRenderer = std::make_shared< bool >(
                json["UseGdiEmfRenderer"].get< bool >()
            );
        }
        if (json.contains("UseHighQualityRendering") && !json["UseHighQualityRendering"].is_null()) {
            m_UseHighQualityRendering = std::make_shared< bool >(
                json["UseHighQualityRendering"].get< bool >()
            );
        }
        if (json.contains("VerticalResolution") && !json["VerticalResolution"].is_null()) {
            m_VerticalResolution = std::make_shared< double >(
                json["VerticalResolution"].get< double >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData > ImageSaveOptionsData::getGraphicsQualityOptions() const
    {
        return m_GraphicsQualityOptions;
    }

    void ImageSaveOptionsData::setGraphicsQualityOptions(std::shared_ptr< aspose::words::cloud::models::GraphicsQualityOptionsData > value)
    {
        m_GraphicsQualityOptions = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getHorizontalResolution() const
    {
        return m_HorizontalResolution;
    }

    void ImageSaveOptionsData::setHorizontalResolution(std::shared_ptr< double > value)
    {
        m_HorizontalResolution = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getImageBrightness() const
    {
        return m_ImageBrightness;
    }

    void ImageSaveOptionsData::setImageBrightness(std::shared_ptr< double > value)
    {
        m_ImageBrightness = value;
    }

    std::shared_ptr< std::wstring > ImageSaveOptionsData::getImageColorMode() const
    {
        return m_ImageColorMode;
    }

    void ImageSaveOptionsData::setImageColorMode(std::shared_ptr< std::wstring > value)
    {
        m_ImageColorMode = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getImageContrast() const
    {
        return m_ImageContrast;
    }

    void ImageSaveOptionsData::setImageContrast(std::shared_ptr< double > value)
    {
        m_ImageContrast = value;
    }

    std::shared_ptr< std::wstring > ImageSaveOptionsData::getPaperColor() const
    {
        return m_PaperColor;
    }

    void ImageSaveOptionsData::setPaperColor(std::shared_ptr< std::wstring > value)
    {
        m_PaperColor = value;
    }

    std::shared_ptr< std::wstring > ImageSaveOptionsData::getPixelFormat() const
    {
        return m_PixelFormat;
    }

    void ImageSaveOptionsData::setPixelFormat(std::shared_ptr< std::wstring > value)
    {
        m_PixelFormat = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getResolution() const
    {
        return m_Resolution;
    }

    void ImageSaveOptionsData::setResolution(std::shared_ptr< double > value)
    {
        m_Resolution = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getScale() const
    {
        return m_Scale;
    }

    void ImageSaveOptionsData::setScale(std::shared_ptr< double > value)
    {
        m_Scale = value;
    }

    std::shared_ptr< bool > ImageSaveOptionsData::getUseAntiAliasing() const
    {
        return m_UseAntiAliasing;
    }

    void ImageSaveOptionsData::setUseAntiAliasing(std::shared_ptr< bool > value)
    {
        m_UseAntiAliasing = value;
    }

    std::shared_ptr< bool > ImageSaveOptionsData::getUseGdiEmfRenderer() const
    {
        return m_UseGdiEmfRenderer;
    }

    void ImageSaveOptionsData::setUseGdiEmfRenderer(std::shared_ptr< bool > value)
    {
        m_UseGdiEmfRenderer = value;
    }

    std::shared_ptr< bool > ImageSaveOptionsData::getUseHighQualityRendering() const
    {
        return m_UseHighQualityRendering;
    }

    void ImageSaveOptionsData::setUseHighQualityRendering(std::shared_ptr< bool > value)
    {
        m_UseHighQualityRendering = value;
    }

    std::shared_ptr< double > ImageSaveOptionsData::getVerticalResolution() const
    {
        return m_VerticalResolution;
    }

    void ImageSaveOptionsData::setVerticalResolution(std::shared_ptr< double > value)
    {
        m_VerticalResolution = value;
    }


    /*
     * JpegSaveOptionsData implementation
     */
    void JpegSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
    }

    void JpegSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
    }




    /*
     * Link implementation
     */
    void Link::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Href) {
            json["Href"] = convertUtf16(*m_Href);
        }
        if (m_Rel) {
            json["Rel"] = convertUtf16(*m_Rel);
        }
        if (m_Title) {
            json["Title"] = convertUtf16(*m_Title);
        }
        if (m_Type) {
            json["Type"] = convertUtf16(*m_Type);
        }
    }

    void Link::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Href") && !json["Href"].is_null()) {
            m_Href = std::make_shared< std::wstring >(
                convertUtf8( json["Href"].get< std::string >() )
            );
        }
        if (json.contains("Rel") && !json["Rel"].is_null()) {
            m_Rel = std::make_shared< std::wstring >(
                convertUtf8( json["Rel"].get< std::string >() )
            );
        }
        if (json.contains("Title") && !json["Title"].is_null()) {
            m_Title = std::make_shared< std::wstring >(
                convertUtf8( json["Title"].get< std::string >() )
            );
        }
        if (json.contains("Type") && !json["Type"].is_null()) {
            m_Type = std::make_shared< std::wstring >(
                convertUtf8( json["Type"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > Link::getHref() const
    {
        return m_Href;
    }

    void Link::setHref(std::shared_ptr< std::wstring > value)
    {
        m_Href = value;
    }

    std::shared_ptr< std::wstring > Link::getRel() const
    {
        return m_Rel;
    }

    void Link::setRel(std::shared_ptr< std::wstring > value)
    {
        m_Rel = value;
    }

    std::shared_ptr< std::wstring > Link::getTitle() const
    {
        return m_Title;
    }

    void Link::setTitle(std::shared_ptr< std::wstring > value)
    {
        m_Title = value;
    }

    std::shared_ptr< std::wstring > Link::getType() const
    {
        return m_Type;
    }

    void Link::setType(std::shared_ptr< std::wstring > value)
    {
        m_Type = value;
    }


    /*
     * LinkElement implementation
     */
    void LinkElement::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Link) {
            m_Link->toJson(&json["Link"]);
        }
    }

    void LinkElement::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Link") && !json["Link"].is_null()) {
            m_Link = std::make_shared< aspose::words::cloud::models::WordsApiLink >();
            m_Link->fromJson(&json["Link"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::WordsApiLink > LinkElement::getLink() const
    {
        return m_Link;
    }

    void LinkElement::setLink(std::shared_ptr< aspose::words::cloud::models::WordsApiLink > value)
    {
        m_Link = value;
    }


    /*
     * ListFormat implementation
     */
    void ListFormat::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsListItem) {
            json["IsListItem"] = *m_IsListItem;
        }
        if (m_ListId) {
            json["ListId"] = *m_ListId;
        }
        if (m_ListLevelNumber) {
            json["ListLevelNumber"] = *m_ListLevelNumber;
        }
    }

    void ListFormat::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsListItem") && !json["IsListItem"].is_null()) {
            m_IsListItem = std::make_shared< bool >(
                json["IsListItem"].get< bool >()
            );
        }
        if (json.contains("ListId") && !json["ListId"].is_null()) {
            m_ListId = std::make_shared< int32_t >(
                json["ListId"].get< int32_t >()
            );
        }
        if (json.contains("ListLevelNumber") && !json["ListLevelNumber"].is_null()) {
            m_ListLevelNumber = std::make_shared< int32_t >(
                json["ListLevelNumber"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< bool > ListFormat::getIsListItem() const
    {
        return m_IsListItem;
    }

    void ListFormat::setIsListItem(std::shared_ptr< bool > value)
    {
        m_IsListItem = value;
    }

    std::shared_ptr< int32_t > ListFormat::getListId() const
    {
        return m_ListId;
    }

    void ListFormat::setListId(std::shared_ptr< int32_t > value)
    {
        m_ListId = value;
    }

    std::shared_ptr< int32_t > ListFormat::getListLevelNumber() const
    {
        return m_ListLevelNumber;
    }

    void ListFormat::setListLevelNumber(std::shared_ptr< int32_t > value)
    {
        m_ListLevelNumber = value;
    }


    /*
     * ListFormatUpdate implementation
     */
    void ListFormatUpdate::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ListId) {
            json["ListId"] = *m_ListId;
        }
        if (m_ListLevelNumber) {
            json["ListLevelNumber"] = *m_ListLevelNumber;
        }
    }

    void ListFormatUpdate::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ListId") && !json["ListId"].is_null()) {
            m_ListId = std::make_shared< int32_t >(
                json["ListId"].get< int32_t >()
            );
        }
        if (json.contains("ListLevelNumber") && !json["ListLevelNumber"].is_null()) {
            m_ListLevelNumber = std::make_shared< int32_t >(
                json["ListLevelNumber"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > ListFormatUpdate::getListId() const
    {
        return m_ListId;
    }

    void ListFormatUpdate::setListId(std::shared_ptr< int32_t > value)
    {
        m_ListId = value;
    }

    std::shared_ptr< int32_t > ListFormatUpdate::getListLevelNumber() const
    {
        return m_ListLevelNumber;
    }

    void ListFormatUpdate::setListLevelNumber(std::shared_ptr< int32_t > value)
    {
        m_ListLevelNumber = value;
    }


    /*
     * ListInfo implementation
     */
    void ListInfo::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsListStyleDefinition) {
            json["IsListStyleDefinition"] = *m_IsListStyleDefinition;
        }
        if (m_IsListStyleReference) {
            json["IsListStyleReference"] = *m_IsListStyleReference;
        }
        if (m_IsMultiLevel) {
            json["IsMultiLevel"] = *m_IsMultiLevel;
        }
        if (m_IsRestartAtEachSection) {
            json["IsRestartAtEachSection"] = *m_IsRestartAtEachSection;
        }
        if (m_ListId) {
            json["ListId"] = *m_ListId;
        }
        if (m_ListLevels) {
            m_ListLevels->toJson(&json["ListLevels"]);
        }
        if (m_Style) {
            m_Style->toJson(&json["Style"]);
        }
    }

    void ListInfo::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsListStyleDefinition") && !json["IsListStyleDefinition"].is_null()) {
            m_IsListStyleDefinition = std::make_shared< bool >(
                json["IsListStyleDefinition"].get< bool >()
            );
        }
        if (json.contains("IsListStyleReference") && !json["IsListStyleReference"].is_null()) {
            m_IsListStyleReference = std::make_shared< bool >(
                json["IsListStyleReference"].get< bool >()
            );
        }
        if (json.contains("IsMultiLevel") && !json["IsMultiLevel"].is_null()) {
            m_IsMultiLevel = std::make_shared< bool >(
                json["IsMultiLevel"].get< bool >()
            );
        }
        if (json.contains("IsRestartAtEachSection") && !json["IsRestartAtEachSection"].is_null()) {
            m_IsRestartAtEachSection = std::make_shared< bool >(
                json["IsRestartAtEachSection"].get< bool >()
            );
        }
        if (json.contains("ListId") && !json["ListId"].is_null()) {
            m_ListId = std::make_shared< int32_t >(
                json["ListId"].get< int32_t >()
            );
        }
        if (json.contains("ListLevels") && !json["ListLevels"].is_null()) {
            m_ListLevels = std::make_shared< aspose::words::cloud::models::ListLevels >();
            m_ListLevels->fromJson(&json["ListLevels"]);
        }
        if (json.contains("Style") && !json["Style"].is_null()) {
            m_Style = std::make_shared< aspose::words::cloud::models::Style >();
            m_Style->fromJson(&json["Style"]);
        }
    }

    std::shared_ptr< bool > ListInfo::getIsListStyleDefinition() const
    {
        return m_IsListStyleDefinition;
    }

    void ListInfo::setIsListStyleDefinition(std::shared_ptr< bool > value)
    {
        m_IsListStyleDefinition = value;
    }

    std::shared_ptr< bool > ListInfo::getIsListStyleReference() const
    {
        return m_IsListStyleReference;
    }

    void ListInfo::setIsListStyleReference(std::shared_ptr< bool > value)
    {
        m_IsListStyleReference = value;
    }

    std::shared_ptr< bool > ListInfo::getIsMultiLevel() const
    {
        return m_IsMultiLevel;
    }

    void ListInfo::setIsMultiLevel(std::shared_ptr< bool > value)
    {
        m_IsMultiLevel = value;
    }

    std::shared_ptr< bool > ListInfo::getIsRestartAtEachSection() const
    {
        return m_IsRestartAtEachSection;
    }

    void ListInfo::setIsRestartAtEachSection(std::shared_ptr< bool > value)
    {
        m_IsRestartAtEachSection = value;
    }

    std::shared_ptr< int32_t > ListInfo::getListId() const
    {
        return m_ListId;
    }

    void ListInfo::setListId(std::shared_ptr< int32_t > value)
    {
        m_ListId = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevels > ListInfo::getListLevels() const
    {
        return m_ListLevels;
    }

    void ListInfo::setListLevels(std::shared_ptr< aspose::words::cloud::models::ListLevels > value)
    {
        m_ListLevels = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Style > ListInfo::getStyle() const
    {
        return m_Style;
    }

    void ListInfo::setStyle(std::shared_ptr< aspose::words::cloud::models::Style > value)
    {
        m_Style = value;
    }


    /*
     * ListInsert implementation
     */
    inline std::string listInsertTemplateToString(aspose::words::cloud::models::ListInsert::Template value)
    {
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_DEFAULT) return "BulletDefault";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_DISK) return "BulletDisk";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_CIRCLE) return "BulletCircle";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_SQUARE) return "BulletSquare";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_DIAMONDS) return "BulletDiamonds";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_ARROW_HEAD) return "BulletArrowHead";
        if (value == aspose::words::cloud::models::ListInsert::Template::BULLET_TICK) return "BulletTick";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_DEFAULT) return "NumberDefault";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_ARABIC_DOT) return "NumberArabicDot";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_ARABIC_PARENTHESIS) return "NumberArabicParenthesis";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_UPPERCASE_ROMAN_DOT) return "NumberUppercaseRomanDot";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_UPPERCASE_LETTER_DOT) return "NumberUppercaseLetterDot";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_LETTER_PARENTHESIS) return "NumberLowercaseLetterParenthesis";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_LETTER_DOT) return "NumberLowercaseLetterDot";
        if (value == aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_ROMAN_DOT) return "NumberLowercaseRomanDot";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_NUMBERS) return "OutlineNumbers";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_LEGAL) return "OutlineLegal";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_BULLETS) return "OutlineBullets";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_ARTICLE_SECTION) return "OutlineHeadingsArticleSection";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_LEGAL) return "OutlineHeadingsLegal";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_NUMBERS) return "OutlineHeadingsNumbers";
        if (value == aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_CHAPTER) return "OutlineHeadingsChapter";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListInsert::Template listInsertTemplateFromString(const std::string& value)
    {
        if (value == "BulletDefault") return aspose::words::cloud::models::ListInsert::Template::BULLET_DEFAULT;
        if (value == "BulletDisk") return aspose::words::cloud::models::ListInsert::Template::BULLET_DISK;
        if (value == "BulletCircle") return aspose::words::cloud::models::ListInsert::Template::BULLET_CIRCLE;
        if (value == "BulletSquare") return aspose::words::cloud::models::ListInsert::Template::BULLET_SQUARE;
        if (value == "BulletDiamonds") return aspose::words::cloud::models::ListInsert::Template::BULLET_DIAMONDS;
        if (value == "BulletArrowHead") return aspose::words::cloud::models::ListInsert::Template::BULLET_ARROW_HEAD;
        if (value == "BulletTick") return aspose::words::cloud::models::ListInsert::Template::BULLET_TICK;
        if (value == "NumberDefault") return aspose::words::cloud::models::ListInsert::Template::NUMBER_DEFAULT;
        if (value == "NumberArabicDot") return aspose::words::cloud::models::ListInsert::Template::NUMBER_ARABIC_DOT;
        if (value == "NumberArabicParenthesis") return aspose::words::cloud::models::ListInsert::Template::NUMBER_ARABIC_PARENTHESIS;
        if (value == "NumberUppercaseRomanDot") return aspose::words::cloud::models::ListInsert::Template::NUMBER_UPPERCASE_ROMAN_DOT;
        if (value == "NumberUppercaseLetterDot") return aspose::words::cloud::models::ListInsert::Template::NUMBER_UPPERCASE_LETTER_DOT;
        if (value == "NumberLowercaseLetterParenthesis") return aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_LETTER_PARENTHESIS;
        if (value == "NumberLowercaseLetterDot") return aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_LETTER_DOT;
        if (value == "NumberLowercaseRomanDot") return aspose::words::cloud::models::ListInsert::Template::NUMBER_LOWERCASE_ROMAN_DOT;
        if (value == "OutlineNumbers") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_NUMBERS;
        if (value == "OutlineLegal") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_LEGAL;
        if (value == "OutlineBullets") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_BULLETS;
        if (value == "OutlineHeadingsArticleSection") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_ARTICLE_SECTION;
        if (value == "OutlineHeadingsLegal") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_LEGAL;
        if (value == "OutlineHeadingsNumbers") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_NUMBERS;
        if (value == "OutlineHeadingsChapter") return aspose::words::cloud::models::ListInsert::Template::OUTLINE_HEADINGS_CHAPTER;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ListInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Template) {
            json["Template"] = listInsertTemplateToString(*m_Template);
        }
    }

    void ListInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Template") && !json["Template"].is_null()) {
            m_Template = std::make_shared< aspose::words::cloud::models::ListInsert::Template >(
                listInsertTemplateFromString(json["Template"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ListInsert::Template > ListInsert::getTemplate() const
    {
        return m_Template;
    }

    void ListInsert::setTemplate(std::shared_ptr< aspose::words::cloud::models::ListInsert::Template > value)
    {
        m_Template = value;
    }


    /*
     * ListLevel implementation
     */
    inline std::string listLevelAlignmentToString(aspose::words::cloud::models::ListLevel::Alignment value)
    {
        if (value == aspose::words::cloud::models::ListLevel::Alignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::ListLevel::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::ListLevel::Alignment::RIGHT) return "Right";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevel::Alignment listLevelAlignmentFromString(const std::string& value)
    {
        if (value == "Left") return aspose::words::cloud::models::ListLevel::Alignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::ListLevel::Alignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::ListLevel::Alignment::RIGHT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string listLevelNumberStyleToString(aspose::words::cloud::models::ListLevel::NumberStyle value)
    {
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC) return "Arabic";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_ROMAN) return "UppercaseRoman";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_ROMAN) return "LowercaseRoman";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_LETTER) return "UppercaseLetter";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_LETTER) return "LowercaseLetter";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ORDINAL) return "Ordinal";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER) return "Number";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ORDINAL_TEXT) return "OrdinalText";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HEX) return "Hex";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::CHICAGO_MANUAL) return "ChicagoManual";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::KANJI) return "Kanji";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_DIGIT) return "KanjiDigit";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::AIUEO_HALF_WIDTH) return "AiueoHalfWidth";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::IROHA_HALF_WIDTH) return "IrohaHalfWidth";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC_FULL_WIDTH) return "ArabicFullWidth";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC_HALF_WIDTH) return "ArabicHalfWidth";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_TRADITIONAL) return "KanjiTraditional";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_TRADITIONAL2) return "KanjiTraditional2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER_IN_CIRCLE) return "NumberInCircle";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::DECIMAL_FULL_WIDTH) return "DecimalFullWidth";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::AIUEO) return "Aiueo";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::IROHA) return "Iroha";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::LEADING_ZERO) return "LeadingZero";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::BULLET) return "Bullet";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::GANADA) return "Ganada";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::CHOSUNG) return "Chosung";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::G_B1) return "GB1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::G_B2) return "GB2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::G_B3) return "GB3";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::G_B4) return "GB4";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC1) return "Zodiac1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC2) return "Zodiac2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC3) return "Zodiac3";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM1) return "TradChinNum1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM2) return "TradChinNum2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM3) return "TradChinNum3";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM4) return "TradChinNum4";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM1) return "SimpChinNum1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM2) return "SimpChinNum2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM3) return "SimpChinNum3";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM4) return "SimpChinNum4";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HANJA_READ) return "HanjaRead";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HANJA_READ_DIGIT) return "HanjaReadDigit";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HANGUL) return "Hangul";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HANJA) return "Hanja";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HEBREW1) return "Hebrew1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC1) return "Arabic1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HEBREW2) return "Hebrew2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC2) return "Arabic2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_LETTER1) return "HindiLetter1";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_LETTER2) return "HindiLetter2";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_ARABIC) return "HindiArabic";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_CARDINAL_TEXT) return "HindiCardinalText";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::THAI_LETTER) return "ThaiLetter";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::THAI_ARABIC) return "ThaiArabic";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::THAI_CARDINAL_TEXT) return "ThaiCardinalText";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::VIET_CARDINAL_TEXT) return "VietCardinalText";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER_IN_DASH) return "NumberInDash";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_RUSSIAN) return "LowercaseRussian";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_RUSSIAN) return "UppercaseRussian";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::NONE) return "None";
        if (value == aspose::words::cloud::models::ListLevel::NumberStyle::CUSTOM) return "Custom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevel::NumberStyle listLevelNumberStyleFromString(const std::string& value)
    {
        if (value == "Arabic") return aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC;
        if (value == "UppercaseRoman") return aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_ROMAN;
        if (value == "LowercaseRoman") return aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_ROMAN;
        if (value == "UppercaseLetter") return aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_LETTER;
        if (value == "LowercaseLetter") return aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_LETTER;
        if (value == "Ordinal") return aspose::words::cloud::models::ListLevel::NumberStyle::ORDINAL;
        if (value == "Number") return aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER;
        if (value == "OrdinalText") return aspose::words::cloud::models::ListLevel::NumberStyle::ORDINAL_TEXT;
        if (value == "Hex") return aspose::words::cloud::models::ListLevel::NumberStyle::HEX;
        if (value == "ChicagoManual") return aspose::words::cloud::models::ListLevel::NumberStyle::CHICAGO_MANUAL;
        if (value == "Kanji") return aspose::words::cloud::models::ListLevel::NumberStyle::KANJI;
        if (value == "KanjiDigit") return aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_DIGIT;
        if (value == "AiueoHalfWidth") return aspose::words::cloud::models::ListLevel::NumberStyle::AIUEO_HALF_WIDTH;
        if (value == "IrohaHalfWidth") return aspose::words::cloud::models::ListLevel::NumberStyle::IROHA_HALF_WIDTH;
        if (value == "ArabicFullWidth") return aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC_FULL_WIDTH;
        if (value == "ArabicHalfWidth") return aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC_HALF_WIDTH;
        if (value == "KanjiTraditional") return aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_TRADITIONAL;
        if (value == "KanjiTraditional2") return aspose::words::cloud::models::ListLevel::NumberStyle::KANJI_TRADITIONAL2;
        if (value == "NumberInCircle") return aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER_IN_CIRCLE;
        if (value == "DecimalFullWidth") return aspose::words::cloud::models::ListLevel::NumberStyle::DECIMAL_FULL_WIDTH;
        if (value == "Aiueo") return aspose::words::cloud::models::ListLevel::NumberStyle::AIUEO;
        if (value == "Iroha") return aspose::words::cloud::models::ListLevel::NumberStyle::IROHA;
        if (value == "LeadingZero") return aspose::words::cloud::models::ListLevel::NumberStyle::LEADING_ZERO;
        if (value == "Bullet") return aspose::words::cloud::models::ListLevel::NumberStyle::BULLET;
        if (value == "Ganada") return aspose::words::cloud::models::ListLevel::NumberStyle::GANADA;
        if (value == "Chosung") return aspose::words::cloud::models::ListLevel::NumberStyle::CHOSUNG;
        if (value == "GB1") return aspose::words::cloud::models::ListLevel::NumberStyle::G_B1;
        if (value == "GB2") return aspose::words::cloud::models::ListLevel::NumberStyle::G_B2;
        if (value == "GB3") return aspose::words::cloud::models::ListLevel::NumberStyle::G_B3;
        if (value == "GB4") return aspose::words::cloud::models::ListLevel::NumberStyle::G_B4;
        if (value == "Zodiac1") return aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC1;
        if (value == "Zodiac2") return aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC2;
        if (value == "Zodiac3") return aspose::words::cloud::models::ListLevel::NumberStyle::ZODIAC3;
        if (value == "TradChinNum1") return aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM1;
        if (value == "TradChinNum2") return aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM2;
        if (value == "TradChinNum3") return aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM3;
        if (value == "TradChinNum4") return aspose::words::cloud::models::ListLevel::NumberStyle::TRAD_CHIN_NUM4;
        if (value == "SimpChinNum1") return aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM1;
        if (value == "SimpChinNum2") return aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM2;
        if (value == "SimpChinNum3") return aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM3;
        if (value == "SimpChinNum4") return aspose::words::cloud::models::ListLevel::NumberStyle::SIMP_CHIN_NUM4;
        if (value == "HanjaRead") return aspose::words::cloud::models::ListLevel::NumberStyle::HANJA_READ;
        if (value == "HanjaReadDigit") return aspose::words::cloud::models::ListLevel::NumberStyle::HANJA_READ_DIGIT;
        if (value == "Hangul") return aspose::words::cloud::models::ListLevel::NumberStyle::HANGUL;
        if (value == "Hanja") return aspose::words::cloud::models::ListLevel::NumberStyle::HANJA;
        if (value == "Hebrew1") return aspose::words::cloud::models::ListLevel::NumberStyle::HEBREW1;
        if (value == "Arabic1") return aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC1;
        if (value == "Hebrew2") return aspose::words::cloud::models::ListLevel::NumberStyle::HEBREW2;
        if (value == "Arabic2") return aspose::words::cloud::models::ListLevel::NumberStyle::ARABIC2;
        if (value == "HindiLetter1") return aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_LETTER1;
        if (value == "HindiLetter2") return aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_LETTER2;
        if (value == "HindiArabic") return aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_ARABIC;
        if (value == "HindiCardinalText") return aspose::words::cloud::models::ListLevel::NumberStyle::HINDI_CARDINAL_TEXT;
        if (value == "ThaiLetter") return aspose::words::cloud::models::ListLevel::NumberStyle::THAI_LETTER;
        if (value == "ThaiArabic") return aspose::words::cloud::models::ListLevel::NumberStyle::THAI_ARABIC;
        if (value == "ThaiCardinalText") return aspose::words::cloud::models::ListLevel::NumberStyle::THAI_CARDINAL_TEXT;
        if (value == "VietCardinalText") return aspose::words::cloud::models::ListLevel::NumberStyle::VIET_CARDINAL_TEXT;
        if (value == "NumberInDash") return aspose::words::cloud::models::ListLevel::NumberStyle::NUMBER_IN_DASH;
        if (value == "LowercaseRussian") return aspose::words::cloud::models::ListLevel::NumberStyle::LOWERCASE_RUSSIAN;
        if (value == "UppercaseRussian") return aspose::words::cloud::models::ListLevel::NumberStyle::UPPERCASE_RUSSIAN;
        if (value == "None") return aspose::words::cloud::models::ListLevel::NumberStyle::NONE;
        if (value == "Custom") return aspose::words::cloud::models::ListLevel::NumberStyle::CUSTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string listLevelTrailingCharacterToString(aspose::words::cloud::models::ListLevel::TrailingCharacter value)
    {
        if (value == aspose::words::cloud::models::ListLevel::TrailingCharacter::TAB) return "Tab";
        if (value == aspose::words::cloud::models::ListLevel::TrailingCharacter::SPACE) return "Space";
        if (value == aspose::words::cloud::models::ListLevel::TrailingCharacter::NOTHING) return "Nothing";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevel::TrailingCharacter listLevelTrailingCharacterFromString(const std::string& value)
    {
        if (value == "Tab") return aspose::words::cloud::models::ListLevel::TrailingCharacter::TAB;
        if (value == "Space") return aspose::words::cloud::models::ListLevel::TrailingCharacter::SPACE;
        if (value == "Nothing") return aspose::words::cloud::models::ListLevel::TrailingCharacter::NOTHING;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ListLevel::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = listLevelAlignmentToString(*m_Alignment);
        }
        if (m_Font) {
            m_Font->toJson(&json["Font"]);
        }
        if (m_IsLegal) {
            json["IsLegal"] = *m_IsLegal;
        }
        if (m_LinkedStyle) {
            m_LinkedStyle->toJson(&json["LinkedStyle"]);
        }
        if (m_NumberFormat) {
            json["NumberFormat"] = convertUtf16(*m_NumberFormat);
        }
        if (m_NumberPosition) {
            json["NumberPosition"] = *m_NumberPosition;
        }
        if (m_NumberStyle) {
            json["NumberStyle"] = listLevelNumberStyleToString(*m_NumberStyle);
        }
        if (m_RestartAfterLevel) {
            json["RestartAfterLevel"] = *m_RestartAfterLevel;
        }
        if (m_StartAt) {
            json["StartAt"] = *m_StartAt;
        }
        if (m_TabPosition) {
            json["TabPosition"] = *m_TabPosition;
        }
        if (m_TextPosition) {
            json["TextPosition"] = *m_TextPosition;
        }
        if (m_TrailingCharacter) {
            json["TrailingCharacter"] = listLevelTrailingCharacterToString(*m_TrailingCharacter);
        }
    }

    void ListLevel::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::ListLevel::Alignment >(
                listLevelAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("Font") && !json["Font"].is_null()) {
            m_Font = std::make_shared< aspose::words::cloud::models::Font >();
            m_Font->fromJson(&json["Font"]);
        }
        if (json.contains("IsLegal") && !json["IsLegal"].is_null()) {
            m_IsLegal = std::make_shared< bool >(
                json["IsLegal"].get< bool >()
            );
        }
        if (json.contains("LinkedStyle") && !json["LinkedStyle"].is_null()) {
            m_LinkedStyle = std::make_shared< aspose::words::cloud::models::Style >();
            m_LinkedStyle->fromJson(&json["LinkedStyle"]);
        }
        if (json.contains("NumberFormat") && !json["NumberFormat"].is_null()) {
            m_NumberFormat = std::make_shared< std::wstring >(
                convertUtf8( json["NumberFormat"].get< std::string >() )
            );
        }
        if (json.contains("NumberPosition") && !json["NumberPosition"].is_null()) {
            m_NumberPosition = std::make_shared< double >(
                json["NumberPosition"].get< double >()
            );
        }
        if (json.contains("NumberStyle") && !json["NumberStyle"].is_null()) {
            m_NumberStyle = std::make_shared< aspose::words::cloud::models::ListLevel::NumberStyle >(
                listLevelNumberStyleFromString(json["NumberStyle"].get< std::string >())
            );
        }
        if (json.contains("RestartAfterLevel") && !json["RestartAfterLevel"].is_null()) {
            m_RestartAfterLevel = std::make_shared< int32_t >(
                json["RestartAfterLevel"].get< int32_t >()
            );
        }
        if (json.contains("StartAt") && !json["StartAt"].is_null()) {
            m_StartAt = std::make_shared< int32_t >(
                json["StartAt"].get< int32_t >()
            );
        }
        if (json.contains("TabPosition") && !json["TabPosition"].is_null()) {
            m_TabPosition = std::make_shared< double >(
                json["TabPosition"].get< double >()
            );
        }
        if (json.contains("TextPosition") && !json["TextPosition"].is_null()) {
            m_TextPosition = std::make_shared< double >(
                json["TextPosition"].get< double >()
            );
        }
        if (json.contains("TrailingCharacter") && !json["TrailingCharacter"].is_null()) {
            m_TrailingCharacter = std::make_shared< aspose::words::cloud::models::ListLevel::TrailingCharacter >(
                listLevelTrailingCharacterFromString(json["TrailingCharacter"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevel::Alignment > ListLevel::getAlignment() const
    {
        return m_Alignment;
    }

    void ListLevel::setAlignment(std::shared_ptr< aspose::words::cloud::models::ListLevel::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Font > ListLevel::getFont() const
    {
        return m_Font;
    }

    void ListLevel::setFont(std::shared_ptr< aspose::words::cloud::models::Font > value)
    {
        m_Font = value;
    }

    std::shared_ptr< bool > ListLevel::getIsLegal() const
    {
        return m_IsLegal;
    }

    void ListLevel::setIsLegal(std::shared_ptr< bool > value)
    {
        m_IsLegal = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Style > ListLevel::getLinkedStyle() const
    {
        return m_LinkedStyle;
    }

    void ListLevel::setLinkedStyle(std::shared_ptr< aspose::words::cloud::models::Style > value)
    {
        m_LinkedStyle = value;
    }

    std::shared_ptr< std::wstring > ListLevel::getNumberFormat() const
    {
        return m_NumberFormat;
    }

    void ListLevel::setNumberFormat(std::shared_ptr< std::wstring > value)
    {
        m_NumberFormat = value;
    }

    std::shared_ptr< double > ListLevel::getNumberPosition() const
    {
        return m_NumberPosition;
    }

    void ListLevel::setNumberPosition(std::shared_ptr< double > value)
    {
        m_NumberPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevel::NumberStyle > ListLevel::getNumberStyle() const
    {
        return m_NumberStyle;
    }

    void ListLevel::setNumberStyle(std::shared_ptr< aspose::words::cloud::models::ListLevel::NumberStyle > value)
    {
        m_NumberStyle = value;
    }

    std::shared_ptr< int32_t > ListLevel::getRestartAfterLevel() const
    {
        return m_RestartAfterLevel;
    }

    void ListLevel::setRestartAfterLevel(std::shared_ptr< int32_t > value)
    {
        m_RestartAfterLevel = value;
    }

    std::shared_ptr< int32_t > ListLevel::getStartAt() const
    {
        return m_StartAt;
    }

    void ListLevel::setStartAt(std::shared_ptr< int32_t > value)
    {
        m_StartAt = value;
    }

    std::shared_ptr< double > ListLevel::getTabPosition() const
    {
        return m_TabPosition;
    }

    void ListLevel::setTabPosition(std::shared_ptr< double > value)
    {
        m_TabPosition = value;
    }

    std::shared_ptr< double > ListLevel::getTextPosition() const
    {
        return m_TextPosition;
    }

    void ListLevel::setTextPosition(std::shared_ptr< double > value)
    {
        m_TextPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevel::TrailingCharacter > ListLevel::getTrailingCharacter() const
    {
        return m_TrailingCharacter;
    }

    void ListLevel::setTrailingCharacter(std::shared_ptr< aspose::words::cloud::models::ListLevel::TrailingCharacter > value)
    {
        m_TrailingCharacter = value;
    }


    /*
     * ListLevels implementation
     */
    void ListLevels::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ListLevel) {
            json["ListLevel"] = ::nlohmann::json::array();
            for (auto& element : *m_ListLevel) {
                element->toJson(&json["ListLevel"].emplace_back());
            }
        }
    }

    void ListLevels::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ListLevel") && !json["ListLevel"].is_null()) {
            m_ListLevel = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::ListLevel>> >();
            for (auto& element : json["ListLevel"]) {
                m_ListLevel->emplace_back(std::make_shared< aspose::words::cloud::models::ListLevel >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ListLevel>> > ListLevels::getListLevel() const
    {
        return m_ListLevel;
    }

    void ListLevels::setListLevel(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ListLevel>> > value)
    {
        m_ListLevel = value;
    }


    /*
     * ListLevelUpdate implementation
     */
    inline std::string listLevelUpdateAlignmentToString(aspose::words::cloud::models::ListLevelUpdate::Alignment value)
    {
        if (value == aspose::words::cloud::models::ListLevelUpdate::Alignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::ListLevelUpdate::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::ListLevelUpdate::Alignment::RIGHT) return "Right";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevelUpdate::Alignment listLevelUpdateAlignmentFromString(const std::string& value)
    {
        if (value == "Left") return aspose::words::cloud::models::ListLevelUpdate::Alignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::ListLevelUpdate::Alignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::ListLevelUpdate::Alignment::RIGHT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string listLevelUpdateNumberStyleToString(aspose::words::cloud::models::ListLevelUpdate::NumberStyle value)
    {
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC) return "Arabic";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_ROMAN) return "UppercaseRoman";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_ROMAN) return "LowercaseRoman";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_LETTER) return "UppercaseLetter";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_LETTER) return "LowercaseLetter";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ORDINAL) return "Ordinal";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER) return "Number";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ORDINAL_TEXT) return "OrdinalText";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEX) return "Hex";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CHICAGO_MANUAL) return "ChicagoManual";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI) return "Kanji";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_DIGIT) return "KanjiDigit";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::AIUEO_HALF_WIDTH) return "AiueoHalfWidth";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::IROHA_HALF_WIDTH) return "IrohaHalfWidth";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC_FULL_WIDTH) return "ArabicFullWidth";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC_HALF_WIDTH) return "ArabicHalfWidth";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_TRADITIONAL) return "KanjiTraditional";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_TRADITIONAL2) return "KanjiTraditional2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER_IN_CIRCLE) return "NumberInCircle";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::DECIMAL_FULL_WIDTH) return "DecimalFullWidth";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::AIUEO) return "Aiueo";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::IROHA) return "Iroha";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LEADING_ZERO) return "LeadingZero";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::BULLET) return "Bullet";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::GANADA) return "Ganada";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CHOSUNG) return "Chosung";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B1) return "GB1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B2) return "GB2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B3) return "GB3";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B4) return "GB4";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC1) return "Zodiac1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC2) return "Zodiac2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC3) return "Zodiac3";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM1) return "TradChinNum1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM2) return "TradChinNum2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM3) return "TradChinNum3";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM4) return "TradChinNum4";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM1) return "SimpChinNum1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM2) return "SimpChinNum2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM3) return "SimpChinNum3";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM4) return "SimpChinNum4";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA_READ) return "HanjaRead";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA_READ_DIGIT) return "HanjaReadDigit";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANGUL) return "Hangul";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA) return "Hanja";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEBREW1) return "Hebrew1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC1) return "Arabic1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEBREW2) return "Hebrew2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC2) return "Arabic2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_LETTER1) return "HindiLetter1";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_LETTER2) return "HindiLetter2";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_ARABIC) return "HindiArabic";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_CARDINAL_TEXT) return "HindiCardinalText";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_LETTER) return "ThaiLetter";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_ARABIC) return "ThaiArabic";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_CARDINAL_TEXT) return "ThaiCardinalText";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::VIET_CARDINAL_TEXT) return "VietCardinalText";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER_IN_DASH) return "NumberInDash";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_RUSSIAN) return "LowercaseRussian";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_RUSSIAN) return "UppercaseRussian";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NONE) return "None";
        if (value == aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CUSTOM) return "Custom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevelUpdate::NumberStyle listLevelUpdateNumberStyleFromString(const std::string& value)
    {
        if (value == "Arabic") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC;
        if (value == "UppercaseRoman") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_ROMAN;
        if (value == "LowercaseRoman") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_ROMAN;
        if (value == "UppercaseLetter") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_LETTER;
        if (value == "LowercaseLetter") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_LETTER;
        if (value == "Ordinal") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ORDINAL;
        if (value == "Number") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER;
        if (value == "OrdinalText") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ORDINAL_TEXT;
        if (value == "Hex") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEX;
        if (value == "ChicagoManual") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CHICAGO_MANUAL;
        if (value == "Kanji") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI;
        if (value == "KanjiDigit") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_DIGIT;
        if (value == "AiueoHalfWidth") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::AIUEO_HALF_WIDTH;
        if (value == "IrohaHalfWidth") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::IROHA_HALF_WIDTH;
        if (value == "ArabicFullWidth") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC_FULL_WIDTH;
        if (value == "ArabicHalfWidth") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC_HALF_WIDTH;
        if (value == "KanjiTraditional") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_TRADITIONAL;
        if (value == "KanjiTraditional2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::KANJI_TRADITIONAL2;
        if (value == "NumberInCircle") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER_IN_CIRCLE;
        if (value == "DecimalFullWidth") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::DECIMAL_FULL_WIDTH;
        if (value == "Aiueo") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::AIUEO;
        if (value == "Iroha") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::IROHA;
        if (value == "LeadingZero") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LEADING_ZERO;
        if (value == "Bullet") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::BULLET;
        if (value == "Ganada") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::GANADA;
        if (value == "Chosung") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CHOSUNG;
        if (value == "GB1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B1;
        if (value == "GB2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B2;
        if (value == "GB3") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B3;
        if (value == "GB4") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::G_B4;
        if (value == "Zodiac1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC1;
        if (value == "Zodiac2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC2;
        if (value == "Zodiac3") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ZODIAC3;
        if (value == "TradChinNum1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM1;
        if (value == "TradChinNum2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM2;
        if (value == "TradChinNum3") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM3;
        if (value == "TradChinNum4") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::TRAD_CHIN_NUM4;
        if (value == "SimpChinNum1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM1;
        if (value == "SimpChinNum2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM2;
        if (value == "SimpChinNum3") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM3;
        if (value == "SimpChinNum4") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::SIMP_CHIN_NUM4;
        if (value == "HanjaRead") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA_READ;
        if (value == "HanjaReadDigit") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA_READ_DIGIT;
        if (value == "Hangul") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANGUL;
        if (value == "Hanja") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HANJA;
        if (value == "Hebrew1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEBREW1;
        if (value == "Arabic1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC1;
        if (value == "Hebrew2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HEBREW2;
        if (value == "Arabic2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::ARABIC2;
        if (value == "HindiLetter1") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_LETTER1;
        if (value == "HindiLetter2") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_LETTER2;
        if (value == "HindiArabic") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_ARABIC;
        if (value == "HindiCardinalText") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::HINDI_CARDINAL_TEXT;
        if (value == "ThaiLetter") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_LETTER;
        if (value == "ThaiArabic") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_ARABIC;
        if (value == "ThaiCardinalText") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::THAI_CARDINAL_TEXT;
        if (value == "VietCardinalText") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::VIET_CARDINAL_TEXT;
        if (value == "NumberInDash") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NUMBER_IN_DASH;
        if (value == "LowercaseRussian") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::LOWERCASE_RUSSIAN;
        if (value == "UppercaseRussian") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::UPPERCASE_RUSSIAN;
        if (value == "None") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::NONE;
        if (value == "Custom") return aspose::words::cloud::models::ListLevelUpdate::NumberStyle::CUSTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string listLevelUpdateTrailingCharacterToString(aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter value)
    {
        if (value == aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::TAB) return "Tab";
        if (value == aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::SPACE) return "Space";
        if (value == aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::NOTHING) return "Nothing";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter listLevelUpdateTrailingCharacterFromString(const std::string& value)
    {
        if (value == "Tab") return aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::TAB;
        if (value == "Space") return aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::SPACE;
        if (value == "Nothing") return aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter::NOTHING;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ListLevelUpdate::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = listLevelUpdateAlignmentToString(*m_Alignment);
        }
        if (m_IsLegal) {
            json["IsLegal"] = *m_IsLegal;
        }
        if (m_NumberFormat) {
            json["NumberFormat"] = convertUtf16(*m_NumberFormat);
        }
        if (m_NumberPosition) {
            json["NumberPosition"] = *m_NumberPosition;
        }
        if (m_NumberStyle) {
            json["NumberStyle"] = listLevelUpdateNumberStyleToString(*m_NumberStyle);
        }
        if (m_RestartAfterLevel) {
            json["RestartAfterLevel"] = *m_RestartAfterLevel;
        }
        if (m_StartAt) {
            json["StartAt"] = *m_StartAt;
        }
        if (m_TabPosition) {
            json["TabPosition"] = *m_TabPosition;
        }
        if (m_TextPosition) {
            json["TextPosition"] = *m_TextPosition;
        }
        if (m_TrailingCharacter) {
            json["TrailingCharacter"] = listLevelUpdateTrailingCharacterToString(*m_TrailingCharacter);
        }
    }

    void ListLevelUpdate::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::ListLevelUpdate::Alignment >(
                listLevelUpdateAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("IsLegal") && !json["IsLegal"].is_null()) {
            m_IsLegal = std::make_shared< bool >(
                json["IsLegal"].get< bool >()
            );
        }
        if (json.contains("NumberFormat") && !json["NumberFormat"].is_null()) {
            m_NumberFormat = std::make_shared< std::wstring >(
                convertUtf8( json["NumberFormat"].get< std::string >() )
            );
        }
        if (json.contains("NumberPosition") && !json["NumberPosition"].is_null()) {
            m_NumberPosition = std::make_shared< double >(
                json["NumberPosition"].get< double >()
            );
        }
        if (json.contains("NumberStyle") && !json["NumberStyle"].is_null()) {
            m_NumberStyle = std::make_shared< aspose::words::cloud::models::ListLevelUpdate::NumberStyle >(
                listLevelUpdateNumberStyleFromString(json["NumberStyle"].get< std::string >())
            );
        }
        if (json.contains("RestartAfterLevel") && !json["RestartAfterLevel"].is_null()) {
            m_RestartAfterLevel = std::make_shared< int32_t >(
                json["RestartAfterLevel"].get< int32_t >()
            );
        }
        if (json.contains("StartAt") && !json["StartAt"].is_null()) {
            m_StartAt = std::make_shared< int32_t >(
                json["StartAt"].get< int32_t >()
            );
        }
        if (json.contains("TabPosition") && !json["TabPosition"].is_null()) {
            m_TabPosition = std::make_shared< double >(
                json["TabPosition"].get< double >()
            );
        }
        if (json.contains("TextPosition") && !json["TextPosition"].is_null()) {
            m_TextPosition = std::make_shared< double >(
                json["TextPosition"].get< double >()
            );
        }
        if (json.contains("TrailingCharacter") && !json["TrailingCharacter"].is_null()) {
            m_TrailingCharacter = std::make_shared< aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter >(
                listLevelUpdateTrailingCharacterFromString(json["TrailingCharacter"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::Alignment > ListLevelUpdate::getAlignment() const
    {
        return m_Alignment;
    }

    void ListLevelUpdate::setAlignment(std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< bool > ListLevelUpdate::getIsLegal() const
    {
        return m_IsLegal;
    }

    void ListLevelUpdate::setIsLegal(std::shared_ptr< bool > value)
    {
        m_IsLegal = value;
    }

    std::shared_ptr< std::wstring > ListLevelUpdate::getNumberFormat() const
    {
        return m_NumberFormat;
    }

    void ListLevelUpdate::setNumberFormat(std::shared_ptr< std::wstring > value)
    {
        m_NumberFormat = value;
    }

    std::shared_ptr< double > ListLevelUpdate::getNumberPosition() const
    {
        return m_NumberPosition;
    }

    void ListLevelUpdate::setNumberPosition(std::shared_ptr< double > value)
    {
        m_NumberPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::NumberStyle > ListLevelUpdate::getNumberStyle() const
    {
        return m_NumberStyle;
    }

    void ListLevelUpdate::setNumberStyle(std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::NumberStyle > value)
    {
        m_NumberStyle = value;
    }

    std::shared_ptr< int32_t > ListLevelUpdate::getRestartAfterLevel() const
    {
        return m_RestartAfterLevel;
    }

    void ListLevelUpdate::setRestartAfterLevel(std::shared_ptr< int32_t > value)
    {
        m_RestartAfterLevel = value;
    }

    std::shared_ptr< int32_t > ListLevelUpdate::getStartAt() const
    {
        return m_StartAt;
    }

    void ListLevelUpdate::setStartAt(std::shared_ptr< int32_t > value)
    {
        m_StartAt = value;
    }

    std::shared_ptr< double > ListLevelUpdate::getTabPosition() const
    {
        return m_TabPosition;
    }

    void ListLevelUpdate::setTabPosition(std::shared_ptr< double > value)
    {
        m_TabPosition = value;
    }

    std::shared_ptr< double > ListLevelUpdate::getTextPosition() const
    {
        return m_TextPosition;
    }

    void ListLevelUpdate::setTextPosition(std::shared_ptr< double > value)
    {
        m_TextPosition = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter > ListLevelUpdate::getTrailingCharacter() const
    {
        return m_TrailingCharacter;
    }

    void ListLevelUpdate::setTrailingCharacter(std::shared_ptr< aspose::words::cloud::models::ListLevelUpdate::TrailingCharacter > value)
    {
        m_TrailingCharacter = value;
    }


    /*
     * ListResponse implementation
     */
    void ListResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            m_List->toJson(&json["List"]);
        }
    }

    void ListResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< aspose::words::cloud::models::ListInfo >();
            m_List->fromJson(&json["List"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ListInfo > ListResponse::getList() const
    {
        return m_List;
    }

    void ListResponse::setList(std::shared_ptr< aspose::words::cloud::models::ListInfo > value)
    {
        m_List = value;
    }


    /*
     * Lists implementation
     */
    void Lists::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ListInfo) {
            json["ListInfo"] = ::nlohmann::json::array();
            for (auto& element : *m_ListInfo) {
                element->toJson(&json["ListInfo"].emplace_back());
            }
        }
    }

    void Lists::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ListInfo") && !json["ListInfo"].is_null()) {
            m_ListInfo = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::ListInfo>> >();
            for (auto& element : json["ListInfo"]) {
                m_ListInfo->emplace_back(std::make_shared< aspose::words::cloud::models::ListInfo >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ListInfo>> > Lists::getListInfo() const
    {
        return m_ListInfo;
    }

    void Lists::setListInfo(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ListInfo>> > value)
    {
        m_ListInfo = value;
    }


    /*
     * ListsResponse implementation
     */
    void ListsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Lists) {
            m_Lists->toJson(&json["Lists"]);
        }
    }

    void ListsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Lists") && !json["Lists"].is_null()) {
            m_Lists = std::make_shared< aspose::words::cloud::models::Lists >();
            m_Lists->fromJson(&json["Lists"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Lists > ListsResponse::getLists() const
    {
        return m_Lists;
    }

    void ListsResponse::setLists(std::shared_ptr< aspose::words::cloud::models::Lists > value)
    {
        m_Lists = value;
    }


    /*
     * ListUpdate implementation
     */
    void ListUpdate::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsRestartAtEachSection) {
            json["IsRestartAtEachSection"] = *m_IsRestartAtEachSection;
        }
    }

    void ListUpdate::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsRestartAtEachSection") && !json["IsRestartAtEachSection"].is_null()) {
            m_IsRestartAtEachSection = std::make_shared< bool >(
                json["IsRestartAtEachSection"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > ListUpdate::getIsRestartAtEachSection() const
    {
        return m_IsRestartAtEachSection;
    }

    void ListUpdate::setIsRestartAtEachSection(std::shared_ptr< bool > value)
    {
        m_IsRestartAtEachSection = value;
    }


    /*
     * LoadWebDocumentData implementation
     */
    void LoadWebDocumentData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_LoadingDocumentUrl) {
            json["LoadingDocumentUrl"] = convertUtf16(*m_LoadingDocumentUrl);
        }
        if (m_SaveOptions) {
            m_SaveOptions->toJson(&json["SaveOptions"]);
        }
    }

    void LoadWebDocumentData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("LoadingDocumentUrl") && !json["LoadingDocumentUrl"].is_null()) {
            m_LoadingDocumentUrl = std::make_shared< std::wstring >(
                convertUtf8( json["LoadingDocumentUrl"].get< std::string >() )
            );
        }
        if (json.contains("SaveOptions") && !json["SaveOptions"].is_null()) {
            m_SaveOptions = std::make_shared< aspose::words::cloud::models::SaveOptionsData >();
            m_SaveOptions->fromJson(&json["SaveOptions"]);
        }
    }

    std::shared_ptr< std::wstring > LoadWebDocumentData::getLoadingDocumentUrl() const
    {
        return m_LoadingDocumentUrl;
    }

    void LoadWebDocumentData::setLoadingDocumentUrl(std::shared_ptr< std::wstring > value)
    {
        m_LoadingDocumentUrl = value;
    }

    std::shared_ptr< aspose::words::cloud::models::SaveOptionsData > LoadWebDocumentData::getSaveOptions() const
    {
        return m_SaveOptions;
    }

    void LoadWebDocumentData::setSaveOptions(std::shared_ptr< aspose::words::cloud::models::SaveOptionsData > value)
    {
        m_SaveOptions = value;
    }


    /*
     * MarkdownSaveOptionsData implementation
     */
    inline std::string markdownSaveOptionsDataTableContentAlignmentToString(aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment value)
    {
        if (value == aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::AUTO) return "Auto";
        if (value == aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::RIGHT) return "Right";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment markdownSaveOptionsDataTableContentAlignmentFromString(const std::string& value)
    {
        if (value == "Auto") return aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::AUTO;
        if (value == "Left") return aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment::RIGHT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void MarkdownSaveOptionsData::toJson(void* jsonIfc) const
    {
        TxtSaveOptionsBaseData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_TableContentAlignment) {
            json["TableContentAlignment"] = markdownSaveOptionsDataTableContentAlignmentToString(*m_TableContentAlignment);
        }
    }

    void MarkdownSaveOptionsData::fromJson(const void* jsonIfc)
    {
        TxtSaveOptionsBaseData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("TableContentAlignment") && !json["TableContentAlignment"].is_null()) {
            m_TableContentAlignment = std::make_shared< aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment >(
                markdownSaveOptionsDataTableContentAlignmentFromString(json["TableContentAlignment"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment > MarkdownSaveOptionsData::getTableContentAlignment() const
    {
        return m_TableContentAlignment;
    }

    void MarkdownSaveOptionsData::setTableContentAlignment(std::shared_ptr< aspose::words::cloud::models::MarkdownSaveOptionsData::TableContentAlignment > value)
    {
        m_TableContentAlignment = value;
    }


    /*
     * MetafileRenderingOptionsData implementation
     */
    void MetafileRenderingOptionsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_EmfPlusDualRenderingMode) {
            json["EmfPlusDualRenderingMode"] = convertUtf16(*m_EmfPlusDualRenderingMode);
        }
        if (m_EmulateRasterOperations) {
            json["EmulateRasterOperations"] = *m_EmulateRasterOperations;
        }
        if (m_RenderingMode) {
            json["RenderingMode"] = convertUtf16(*m_RenderingMode);
        }
        if (m_ScaleWmfFontsToMetafileSize) {
            json["ScaleWmfFontsToMetafileSize"] = *m_ScaleWmfFontsToMetafileSize;
        }
        if (m_UseEmfEmbeddedToWmf) {
            json["UseEmfEmbeddedToWmf"] = *m_UseEmfEmbeddedToWmf;
        }
    }

    void MetafileRenderingOptionsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("EmfPlusDualRenderingMode") && !json["EmfPlusDualRenderingMode"].is_null()) {
            m_EmfPlusDualRenderingMode = std::make_shared< std::wstring >(
                convertUtf8( json["EmfPlusDualRenderingMode"].get< std::string >() )
            );
        }
        if (json.contains("EmulateRasterOperations") && !json["EmulateRasterOperations"].is_null()) {
            m_EmulateRasterOperations = std::make_shared< bool >(
                json["EmulateRasterOperations"].get< bool >()
            );
        }
        if (json.contains("RenderingMode") && !json["RenderingMode"].is_null()) {
            m_RenderingMode = std::make_shared< std::wstring >(
                convertUtf8( json["RenderingMode"].get< std::string >() )
            );
        }
        if (json.contains("ScaleWmfFontsToMetafileSize") && !json["ScaleWmfFontsToMetafileSize"].is_null()) {
            m_ScaleWmfFontsToMetafileSize = std::make_shared< bool >(
                json["ScaleWmfFontsToMetafileSize"].get< bool >()
            );
        }
        if (json.contains("UseEmfEmbeddedToWmf") && !json["UseEmfEmbeddedToWmf"].is_null()) {
            m_UseEmfEmbeddedToWmf = std::make_shared< bool >(
                json["UseEmfEmbeddedToWmf"].get< bool >()
            );
        }
    }

    std::shared_ptr< std::wstring > MetafileRenderingOptionsData::getEmfPlusDualRenderingMode() const
    {
        return m_EmfPlusDualRenderingMode;
    }

    void MetafileRenderingOptionsData::setEmfPlusDualRenderingMode(std::shared_ptr< std::wstring > value)
    {
        m_EmfPlusDualRenderingMode = value;
    }

    std::shared_ptr< bool > MetafileRenderingOptionsData::getEmulateRasterOperations() const
    {
        return m_EmulateRasterOperations;
    }

    void MetafileRenderingOptionsData::setEmulateRasterOperations(std::shared_ptr< bool > value)
    {
        m_EmulateRasterOperations = value;
    }

    std::shared_ptr< std::wstring > MetafileRenderingOptionsData::getRenderingMode() const
    {
        return m_RenderingMode;
    }

    void MetafileRenderingOptionsData::setRenderingMode(std::shared_ptr< std::wstring > value)
    {
        m_RenderingMode = value;
    }

    std::shared_ptr< bool > MetafileRenderingOptionsData::getScaleWmfFontsToMetafileSize() const
    {
        return m_ScaleWmfFontsToMetafileSize;
    }

    void MetafileRenderingOptionsData::setScaleWmfFontsToMetafileSize(std::shared_ptr< bool > value)
    {
        m_ScaleWmfFontsToMetafileSize = value;
    }

    std::shared_ptr< bool > MetafileRenderingOptionsData::getUseEmfEmbeddedToWmf() const
    {
        return m_UseEmfEmbeddedToWmf;
    }

    void MetafileRenderingOptionsData::setUseEmfEmbeddedToWmf(std::shared_ptr< bool > value)
    {
        m_UseEmfEmbeddedToWmf = value;
    }


    /*
     * MhtmlSaveOptionsData implementation
     */
    void MhtmlSaveOptionsData::toJson(void* jsonIfc) const
    {
        HtmlSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ExportCidUrlsForMhtmlResources) {
            json["ExportCidUrlsForMhtmlResources"] = *m_ExportCidUrlsForMhtmlResources;
        }
    }

    void MhtmlSaveOptionsData::fromJson(const void* jsonIfc)
    {
        HtmlSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ExportCidUrlsForMhtmlResources") && !json["ExportCidUrlsForMhtmlResources"].is_null()) {
            m_ExportCidUrlsForMhtmlResources = std::make_shared< bool >(
                json["ExportCidUrlsForMhtmlResources"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > MhtmlSaveOptionsData::getExportCidUrlsForMhtmlResources() const
    {
        return m_ExportCidUrlsForMhtmlResources;
    }

    void MhtmlSaveOptionsData::setExportCidUrlsForMhtmlResources(std::shared_ptr< bool > value)
    {
        m_ExportCidUrlsForMhtmlResources = value;
    }


    /*
     * ModificationOperationResult implementation
     */
    void ModificationOperationResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Dest) {
            m_Dest->toJson(&json["Dest"]);
        }
        if (m_Source) {
            m_Source->toJson(&json["Source"]);
        }
    }

    void ModificationOperationResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Dest") && !json["Dest"].is_null()) {
            m_Dest = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_Dest->fromJson(&json["Dest"]);
        }
        if (json.contains("Source") && !json["Source"].is_null()) {
            m_Source = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_Source->fromJson(&json["Source"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > ModificationOperationResult::getDest() const
    {
        return m_Dest;
    }

    void ModificationOperationResult::setDest(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_Dest = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > ModificationOperationResult::getSource() const
    {
        return m_Source;
    }

    void ModificationOperationResult::setSource(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_Source = value;
    }


    /*
     * NodeLink implementation
     */
    void NodeLink::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_NodeId) {
            json["NodeId"] = convertUtf16(*m_NodeId);
        }
    }

    void NodeLink::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("NodeId") && !json["NodeId"].is_null()) {
            m_NodeId = std::make_shared< std::wstring >(
                convertUtf8( json["NodeId"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > NodeLink::getNodeId() const
    {
        return m_NodeId;
    }

    void NodeLink::setNodeId(std::shared_ptr< std::wstring > value)
    {
        m_NodeId = value;
    }


    /*
     * OdtSaveOptionsData implementation
     */
    inline std::string odtSaveOptionsDataMeasureUnitToString(aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit value)
    {
        if (value == aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit::CENTIMETERS) return "Centimeters";
        if (value == aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit::INCHES) return "Inches";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit odtSaveOptionsDataMeasureUnitFromString(const std::string& value)
    {
        if (value == "Centimeters") return aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit::CENTIMETERS;
        if (value == "Inches") return aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit::INCHES;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void OdtSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsStrictSchema11) {
            json["IsStrictSchema11"] = *m_IsStrictSchema11;
        }
        if (m_MeasureUnit) {
            json["MeasureUnit"] = odtSaveOptionsDataMeasureUnitToString(*m_MeasureUnit);
        }
        if (m_Password) {
            json["Password"] = convertUtf16(*m_Password);
        }
        if (m_PrettyFormat) {
            json["PrettyFormat"] = *m_PrettyFormat;
        }
    }

    void OdtSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsStrictSchema11") && !json["IsStrictSchema11"].is_null()) {
            m_IsStrictSchema11 = std::make_shared< bool >(
                json["IsStrictSchema11"].get< bool >()
            );
        }
        if (json.contains("MeasureUnit") && !json["MeasureUnit"].is_null()) {
            m_MeasureUnit = std::make_shared< aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit >(
                odtSaveOptionsDataMeasureUnitFromString(json["MeasureUnit"].get< std::string >())
            );
        }
        if (json.contains("Password") && !json["Password"].is_null()) {
            m_Password = std::make_shared< std::wstring >(
                convertUtf8( json["Password"].get< std::string >() )
            );
        }
        if (json.contains("PrettyFormat") && !json["PrettyFormat"].is_null()) {
            m_PrettyFormat = std::make_shared< bool >(
                json["PrettyFormat"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > OdtSaveOptionsData::getIsStrictSchema11() const
    {
        return m_IsStrictSchema11;
    }

    void OdtSaveOptionsData::setIsStrictSchema11(std::shared_ptr< bool > value)
    {
        m_IsStrictSchema11 = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit > OdtSaveOptionsData::getMeasureUnit() const
    {
        return m_MeasureUnit;
    }

    void OdtSaveOptionsData::setMeasureUnit(std::shared_ptr< aspose::words::cloud::models::OdtSaveOptionsData::MeasureUnit > value)
    {
        m_MeasureUnit = value;
    }

    std::shared_ptr< std::wstring > OdtSaveOptionsData::getPassword() const
    {
        return m_Password;
    }

    void OdtSaveOptionsData::setPassword(std::shared_ptr< std::wstring > value)
    {
        m_Password = value;
    }

    std::shared_ptr< bool > OdtSaveOptionsData::getPrettyFormat() const
    {
        return m_PrettyFormat;
    }

    void OdtSaveOptionsData::setPrettyFormat(std::shared_ptr< bool > value)
    {
        m_PrettyFormat = value;
    }


    /*
     * OfficeMathLink implementation
     */
    void OfficeMathLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
    }

    void OfficeMathLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
    }




    /*
     * OfficeMathObject implementation
     */
    inline std::string officeMathObjectDisplayTypeToString(aspose::words::cloud::models::OfficeMathObject::DisplayType value)
    {
        if (value == aspose::words::cloud::models::OfficeMathObject::DisplayType::DISPLAY) return "Display";
        if (value == aspose::words::cloud::models::OfficeMathObject::DisplayType::INLINE) return "Inline";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OfficeMathObject::DisplayType officeMathObjectDisplayTypeFromString(const std::string& value)
    {
        if (value == "Display") return aspose::words::cloud::models::OfficeMathObject::DisplayType::DISPLAY;
        if (value == "Inline") return aspose::words::cloud::models::OfficeMathObject::DisplayType::INLINE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string officeMathObjectJustificationToString(aspose::words::cloud::models::OfficeMathObject::Justification value)
    {
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::CENTER_GROUP) return "CenterGroup";
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::CENTER) return "Center";
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::LEFT) return "Left";
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::RIGHT) return "Right";
        if (value == aspose::words::cloud::models::OfficeMathObject::Justification::INLINE) return "Inline";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OfficeMathObject::Justification officeMathObjectJustificationFromString(const std::string& value)
    {
        if (value == "CenterGroup") return aspose::words::cloud::models::OfficeMathObject::Justification::CENTER_GROUP;
        if (value == "Default") return aspose::words::cloud::models::OfficeMathObject::Justification::DEFAULT;
        if (value == "Center") return aspose::words::cloud::models::OfficeMathObject::Justification::CENTER;
        if (value == "Left") return aspose::words::cloud::models::OfficeMathObject::Justification::LEFT;
        if (value == "Right") return aspose::words::cloud::models::OfficeMathObject::Justification::RIGHT;
        if (value == "Inline") return aspose::words::cloud::models::OfficeMathObject::Justification::INLINE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string officeMathObjectMathObjectTypeToString(aspose::words::cloud::models::OfficeMathObject::MathObjectType value)
    {
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::O_MATH) return "OMath";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::O_MATH_PARA) return "OMathPara";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::ACCENT) return "Accent";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::BAR) return "Bar";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::BORDER_BOX) return "BorderBox";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::BOX) return "Box";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::DELIMITER) return "Delimiter";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::DEGREE) return "Degree";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::ARGUMENT) return "Argument";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::ARRAY) return "Array";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::FRACTION) return "Fraction";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::DENOMINATOR) return "Denominator";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::NUMERATOR) return "Numerator";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::FUNCTION) return "Function";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::FUNCTION_NAME) return "FunctionName";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::GROUP_CHARACTER) return "GroupCharacter";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::LIMIT) return "Limit";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::LOWER_LIMIT) return "LowerLimit";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::UPPER_LIMIT) return "UpperLimit";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::MATRIX) return "Matrix";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::MATRIX_ROW) return "MatrixRow";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::N_ARY) return "NAry";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::PHANTOM) return "Phantom";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::RADICAL) return "Radical";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUBSCRIPT_PART) return "SubscriptPart";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUPERSCRIPT_PART) return "SuperscriptPart";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::PRE_SUB_SUPERSCRIPT) return "PreSubSuperscript";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUBSCRIPT) return "Subscript";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUB_SUPERSCRIPT) return "SubSuperscript";
        if (value == aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUPERCRIPT) return "Supercript";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OfficeMathObject::MathObjectType officeMathObjectMathObjectTypeFromString(const std::string& value)
    {
        if (value == "OMath") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::O_MATH;
        if (value == "OMathPara") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::O_MATH_PARA;
        if (value == "Accent") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::ACCENT;
        if (value == "Bar") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::BAR;
        if (value == "BorderBox") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::BORDER_BOX;
        if (value == "Box") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::BOX;
        if (value == "Delimiter") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::DELIMITER;
        if (value == "Degree") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::DEGREE;
        if (value == "Argument") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::ARGUMENT;
        if (value == "Array") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::ARRAY;
        if (value == "Fraction") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::FRACTION;
        if (value == "Denominator") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::DENOMINATOR;
        if (value == "Numerator") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::NUMERATOR;
        if (value == "Function") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::FUNCTION;
        if (value == "FunctionName") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::FUNCTION_NAME;
        if (value == "GroupCharacter") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::GROUP_CHARACTER;
        if (value == "Limit") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::LIMIT;
        if (value == "LowerLimit") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::LOWER_LIMIT;
        if (value == "UpperLimit") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::UPPER_LIMIT;
        if (value == "Matrix") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::MATRIX;
        if (value == "MatrixRow") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::MATRIX_ROW;
        if (value == "NAry") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::N_ARY;
        if (value == "Phantom") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::PHANTOM;
        if (value == "Radical") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::RADICAL;
        if (value == "SubscriptPart") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUBSCRIPT_PART;
        if (value == "SuperscriptPart") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUPERSCRIPT_PART;
        if (value == "PreSubSuperscript") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::PRE_SUB_SUPERSCRIPT;
        if (value == "Subscript") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUBSCRIPT;
        if (value == "SubSuperscript") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUB_SUPERSCRIPT;
        if (value == "Supercript") return aspose::words::cloud::models::OfficeMathObject::MathObjectType::SUPERCRIPT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void OfficeMathObject::toJson(void* jsonIfc) const
    {
        OfficeMathLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Content) {
            m_Content->toJson(&json["Content"]);
        }
        if (m_DisplayType) {
            json["DisplayType"] = officeMathObjectDisplayTypeToString(*m_DisplayType);
        }
        if (m_Justification) {
            json["Justification"] = officeMathObjectJustificationToString(*m_Justification);
        }
        if (m_MathObjectType) {
            json["MathObjectType"] = officeMathObjectMathObjectTypeToString(*m_MathObjectType);
        }
    }

    void OfficeMathObject::fromJson(const void* jsonIfc)
    {
        OfficeMathLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Content") && !json["Content"].is_null()) {
            m_Content = std::make_shared< aspose::words::cloud::models::StoryChildNodes >();
            m_Content->fromJson(&json["Content"]);
        }
        if (json.contains("DisplayType") && !json["DisplayType"].is_null()) {
            m_DisplayType = std::make_shared< aspose::words::cloud::models::OfficeMathObject::DisplayType >(
                officeMathObjectDisplayTypeFromString(json["DisplayType"].get< std::string >())
            );
        }
        if (json.contains("Justification") && !json["Justification"].is_null()) {
            m_Justification = std::make_shared< aspose::words::cloud::models::OfficeMathObject::Justification >(
                officeMathObjectJustificationFromString(json["Justification"].get< std::string >())
            );
        }
        if (json.contains("MathObjectType") && !json["MathObjectType"].is_null()) {
            m_MathObjectType = std::make_shared< aspose::words::cloud::models::OfficeMathObject::MathObjectType >(
                officeMathObjectMathObjectTypeFromString(json["MathObjectType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > OfficeMathObject::getContent() const
    {
        return m_Content;
    }

    void OfficeMathObject::setContent(std::shared_ptr< aspose::words::cloud::models::StoryChildNodes > value)
    {
        m_Content = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::DisplayType > OfficeMathObject::getDisplayType() const
    {
        return m_DisplayType;
    }

    void OfficeMathObject::setDisplayType(std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::DisplayType > value)
    {
        m_DisplayType = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::Justification > OfficeMathObject::getJustification() const
    {
        return m_Justification;
    }

    void OfficeMathObject::setJustification(std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::Justification > value)
    {
        m_Justification = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::MathObjectType > OfficeMathObject::getMathObjectType() const
    {
        return m_MathObjectType;
    }

    void OfficeMathObject::setMathObjectType(std::shared_ptr< aspose::words::cloud::models::OfficeMathObject::MathObjectType > value)
    {
        m_MathObjectType = value;
    }


    /*
     * OfficeMathObjectResponse implementation
     */
    void OfficeMathObjectResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_OfficeMathObject) {
            m_OfficeMathObject->toJson(&json["OfficeMathObject"]);
        }
    }

    void OfficeMathObjectResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("OfficeMathObject") && !json["OfficeMathObject"].is_null()) {
            m_OfficeMathObject = std::make_shared< aspose::words::cloud::models::OfficeMathObject >();
            m_OfficeMathObject->fromJson(&json["OfficeMathObject"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::OfficeMathObject > OfficeMathObjectResponse::getOfficeMathObject() const
    {
        return m_OfficeMathObject;
    }

    void OfficeMathObjectResponse::setOfficeMathObject(std::shared_ptr< aspose::words::cloud::models::OfficeMathObject > value)
    {
        m_OfficeMathObject = value;
    }


    /*
     * OfficeMathObjectsCollection implementation
     */
    void OfficeMathObjectsCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void OfficeMathObjectsCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::OfficeMathObject>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::OfficeMathObject >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::OfficeMathObject>> > OfficeMathObjectsCollection::getList() const
    {
        return m_List;
    }

    void OfficeMathObjectsCollection::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::OfficeMathObject>> > value)
    {
        m_List = value;
    }


    /*
     * OfficeMathObjectsResponse implementation
     */
    void OfficeMathObjectsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_OfficeMathObjects) {
            m_OfficeMathObjects->toJson(&json["OfficeMathObjects"]);
        }
    }

    void OfficeMathObjectsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("OfficeMathObjects") && !json["OfficeMathObjects"].is_null()) {
            m_OfficeMathObjects = std::make_shared< aspose::words::cloud::models::OfficeMathObjectsCollection >();
            m_OfficeMathObjects->fromJson(&json["OfficeMathObjects"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::OfficeMathObjectsCollection > OfficeMathObjectsResponse::getOfficeMathObjects() const
    {
        return m_OfficeMathObjects;
    }

    void OfficeMathObjectsResponse::setOfficeMathObjects(std::shared_ptr< aspose::words::cloud::models::OfficeMathObjectsCollection > value)
    {
        m_OfficeMathObjects = value;
    }


    /*
     * OoxmlSaveOptionsData implementation
     */
    inline std::string ooxmlSaveOptionsDataCompressionLevelToString(aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel value)
    {
        if (value == aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::MAXIMUM) return "Maximum";
        if (value == aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::FAST) return "Fast";
        if (value == aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::SUPER_FAST) return "SuperFast";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel ooxmlSaveOptionsDataCompressionLevelFromString(const std::string& value)
    {
        if (value == "Normal") return aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::NORMAL;
        if (value == "Maximum") return aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::MAXIMUM;
        if (value == "Fast") return aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::FAST;
        if (value == "SuperFast") return aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel::SUPER_FAST;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void OoxmlSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Compliance) {
            json["Compliance"] = convertUtf16(*m_Compliance);
        }
        if (m_CompressionLevel) {
            json["CompressionLevel"] = ooxmlSaveOptionsDataCompressionLevelToString(*m_CompressionLevel);
        }
        if (m_Password) {
            json["Password"] = convertUtf16(*m_Password);
        }
        if (m_PrettyFormat) {
            json["PrettyFormat"] = *m_PrettyFormat;
        }
    }

    void OoxmlSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Compliance") && !json["Compliance"].is_null()) {
            m_Compliance = std::make_shared< std::wstring >(
                convertUtf8( json["Compliance"].get< std::string >() )
            );
        }
        if (json.contains("CompressionLevel") && !json["CompressionLevel"].is_null()) {
            m_CompressionLevel = std::make_shared< aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel >(
                ooxmlSaveOptionsDataCompressionLevelFromString(json["CompressionLevel"].get< std::string >())
            );
        }
        if (json.contains("Password") && !json["Password"].is_null()) {
            m_Password = std::make_shared< std::wstring >(
                convertUtf8( json["Password"].get< std::string >() )
            );
        }
        if (json.contains("PrettyFormat") && !json["PrettyFormat"].is_null()) {
            m_PrettyFormat = std::make_shared< bool >(
                json["PrettyFormat"].get< bool >()
            );
        }
    }

    std::shared_ptr< std::wstring > OoxmlSaveOptionsData::getCompliance() const
    {
        return m_Compliance;
    }

    void OoxmlSaveOptionsData::setCompliance(std::shared_ptr< std::wstring > value)
    {
        m_Compliance = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel > OoxmlSaveOptionsData::getCompressionLevel() const
    {
        return m_CompressionLevel;
    }

    void OoxmlSaveOptionsData::setCompressionLevel(std::shared_ptr< aspose::words::cloud::models::OoxmlSaveOptionsData::CompressionLevel > value)
    {
        m_CompressionLevel = value;
    }

    std::shared_ptr< std::wstring > OoxmlSaveOptionsData::getPassword() const
    {
        return m_Password;
    }

    void OoxmlSaveOptionsData::setPassword(std::shared_ptr< std::wstring > value)
    {
        m_Password = value;
    }

    std::shared_ptr< bool > OoxmlSaveOptionsData::getPrettyFormat() const
    {
        return m_PrettyFormat;
    }

    void OoxmlSaveOptionsData::setPrettyFormat(std::shared_ptr< bool > value)
    {
        m_PrettyFormat = value;
    }


    /*
     * OptimizationOptions implementation
     */
    inline std::string optimizationOptionsMsWordVersionToString(aspose::words::cloud::models::OptimizationOptions::MsWordVersion value)
    {
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2000) return "Word2000";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2002) return "Word2002";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2003) return "Word2003";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2007) return "Word2007";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2010) return "Word2010";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2013) return "Word2013";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2016) return "Word2016";
        if (value == aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2019) return "Word2019";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::OptimizationOptions::MsWordVersion optimizationOptionsMsWordVersionFromString(const std::string& value)
    {
        if (value == "Word2000") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2000;
        if (value == "Word2002") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2002;
        if (value == "Word2003") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2003;
        if (value == "Word2007") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2007;
        if (value == "Word2010") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2010;
        if (value == "Word2013") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2013;
        if (value == "Word2016") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2016;
        if (value == "Word2019") return aspose::words::cloud::models::OptimizationOptions::MsWordVersion::WORD2019;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void OptimizationOptions::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_MsWordVersion) {
            json["MsWordVersion"] = optimizationOptionsMsWordVersionToString(*m_MsWordVersion);
        }
    }

    void OptimizationOptions::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("MsWordVersion") && !json["MsWordVersion"].is_null()) {
            m_MsWordVersion = std::make_shared< aspose::words::cloud::models::OptimizationOptions::MsWordVersion >(
                optimizationOptionsMsWordVersionFromString(json["MsWordVersion"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::OptimizationOptions::MsWordVersion > OptimizationOptions::getMsWordVersion() const
    {
        return m_MsWordVersion;
    }

    void OptimizationOptions::setMsWordVersion(std::shared_ptr< aspose::words::cloud::models::OptimizationOptions::MsWordVersion > value)
    {
        m_MsWordVersion = value;
    }


    /*
     * OutlineOptionsData implementation
     */
    void OutlineOptionsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BookmarksOutlineLevels) {
            json["BookmarksOutlineLevels"] = ::nlohmann::json::array();
            for (auto& element : *m_BookmarksOutlineLevels) {
                element->toJson(&json["BookmarksOutlineLevels"].emplace_back());
            }
        }
        if (m_CreateMissingOutlineLevels) {
            json["CreateMissingOutlineLevels"] = *m_CreateMissingOutlineLevels;
        }
        if (m_CreateOutlinesForHeadingsInTables) {
            json["CreateOutlinesForHeadingsInTables"] = *m_CreateOutlinesForHeadingsInTables;
        }
        if (m_DefaultBookmarksOutlineLevel) {
            json["DefaultBookmarksOutlineLevel"] = *m_DefaultBookmarksOutlineLevel;
        }
        if (m_ExpandedOutlineLevels) {
            json["ExpandedOutlineLevels"] = *m_ExpandedOutlineLevels;
        }
        if (m_HeadingsOutlineLevels) {
            json["HeadingsOutlineLevels"] = *m_HeadingsOutlineLevels;
        }
    }

    void OutlineOptionsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BookmarksOutlineLevels") && !json["BookmarksOutlineLevels"].is_null()) {
            m_BookmarksOutlineLevels = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::BookmarksOutlineLevelData>> >();
            for (auto& element : json["BookmarksOutlineLevels"]) {
                m_BookmarksOutlineLevels->emplace_back(std::make_shared< aspose::words::cloud::models::BookmarksOutlineLevelData >())->fromJson(&element);
            }
        }
        if (json.contains("CreateMissingOutlineLevels") && !json["CreateMissingOutlineLevels"].is_null()) {
            m_CreateMissingOutlineLevels = std::make_shared< bool >(
                json["CreateMissingOutlineLevels"].get< bool >()
            );
        }
        if (json.contains("CreateOutlinesForHeadingsInTables") && !json["CreateOutlinesForHeadingsInTables"].is_null()) {
            m_CreateOutlinesForHeadingsInTables = std::make_shared< bool >(
                json["CreateOutlinesForHeadingsInTables"].get< bool >()
            );
        }
        if (json.contains("DefaultBookmarksOutlineLevel") && !json["DefaultBookmarksOutlineLevel"].is_null()) {
            m_DefaultBookmarksOutlineLevel = std::make_shared< int32_t >(
                json["DefaultBookmarksOutlineLevel"].get< int32_t >()
            );
        }
        if (json.contains("ExpandedOutlineLevels") && !json["ExpandedOutlineLevels"].is_null()) {
            m_ExpandedOutlineLevels = std::make_shared< int32_t >(
                json["ExpandedOutlineLevels"].get< int32_t >()
            );
        }
        if (json.contains("HeadingsOutlineLevels") && !json["HeadingsOutlineLevels"].is_null()) {
            m_HeadingsOutlineLevels = std::make_shared< int32_t >(
                json["HeadingsOutlineLevels"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::BookmarksOutlineLevelData>> > OutlineOptionsData::getBookmarksOutlineLevels() const
    {
        return m_BookmarksOutlineLevels;
    }

    void OutlineOptionsData::setBookmarksOutlineLevels(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::BookmarksOutlineLevelData>> > value)
    {
        m_BookmarksOutlineLevels = value;
    }

    std::shared_ptr< bool > OutlineOptionsData::getCreateMissingOutlineLevels() const
    {
        return m_CreateMissingOutlineLevels;
    }

    void OutlineOptionsData::setCreateMissingOutlineLevels(std::shared_ptr< bool > value)
    {
        m_CreateMissingOutlineLevels = value;
    }

    std::shared_ptr< bool > OutlineOptionsData::getCreateOutlinesForHeadingsInTables() const
    {
        return m_CreateOutlinesForHeadingsInTables;
    }

    void OutlineOptionsData::setCreateOutlinesForHeadingsInTables(std::shared_ptr< bool > value)
    {
        m_CreateOutlinesForHeadingsInTables = value;
    }

    std::shared_ptr< int32_t > OutlineOptionsData::getDefaultBookmarksOutlineLevel() const
    {
        return m_DefaultBookmarksOutlineLevel;
    }

    void OutlineOptionsData::setDefaultBookmarksOutlineLevel(std::shared_ptr< int32_t > value)
    {
        m_DefaultBookmarksOutlineLevel = value;
    }

    std::shared_ptr< int32_t > OutlineOptionsData::getExpandedOutlineLevels() const
    {
        return m_ExpandedOutlineLevels;
    }

    void OutlineOptionsData::setExpandedOutlineLevels(std::shared_ptr< int32_t > value)
    {
        m_ExpandedOutlineLevels = value;
    }

    std::shared_ptr< int32_t > OutlineOptionsData::getHeadingsOutlineLevels() const
    {
        return m_HeadingsOutlineLevels;
    }

    void OutlineOptionsData::setHeadingsOutlineLevels(std::shared_ptr< int32_t > value)
    {
        m_HeadingsOutlineLevels = value;
    }


    /*
     * PageNumber implementation
     */
    void PageNumber::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = convertUtf16(*m_Alignment);
        }
        if (m_Format) {
            json["Format"] = convertUtf16(*m_Format);
        }
        if (m_IsTop) {
            json["IsTop"] = *m_IsTop;
        }
        if (m_SetPageNumberOnFirstPage) {
            json["SetPageNumberOnFirstPage"] = *m_SetPageNumberOnFirstPage;
        }
    }

    void PageNumber::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< std::wstring >(
                convertUtf8( json["Alignment"].get< std::string >() )
            );
        }
        if (json.contains("Format") && !json["Format"].is_null()) {
            m_Format = std::make_shared< std::wstring >(
                convertUtf8( json["Format"].get< std::string >() )
            );
        }
        if (json.contains("IsTop") && !json["IsTop"].is_null()) {
            m_IsTop = std::make_shared< bool >(
                json["IsTop"].get< bool >()
            );
        }
        if (json.contains("SetPageNumberOnFirstPage") && !json["SetPageNumberOnFirstPage"].is_null()) {
            m_SetPageNumberOnFirstPage = std::make_shared< bool >(
                json["SetPageNumberOnFirstPage"].get< bool >()
            );
        }
    }

    std::shared_ptr< std::wstring > PageNumber::getAlignment() const
    {
        return m_Alignment;
    }

    void PageNumber::setAlignment(std::shared_ptr< std::wstring > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< std::wstring > PageNumber::getFormat() const
    {
        return m_Format;
    }

    void PageNumber::setFormat(std::shared_ptr< std::wstring > value)
    {
        m_Format = value;
    }

    std::shared_ptr< bool > PageNumber::getIsTop() const
    {
        return m_IsTop;
    }

    void PageNumber::setIsTop(std::shared_ptr< bool > value)
    {
        m_IsTop = value;
    }

    std::shared_ptr< bool > PageNumber::getSetPageNumberOnFirstPage() const
    {
        return m_SetPageNumberOnFirstPage;
    }

    void PageNumber::setSetPageNumberOnFirstPage(std::shared_ptr< bool > value)
    {
        m_SetPageNumberOnFirstPage = value;
    }


    /*
     * PageSetup implementation
     */
    inline std::string pageSetupBorderAppliesToToString(aspose::words::cloud::models::PageSetup::BorderAppliesTo value)
    {
        if (value == aspose::words::cloud::models::PageSetup::BorderAppliesTo::ALL_PAGES) return "AllPages";
        if (value == aspose::words::cloud::models::PageSetup::BorderAppliesTo::FIRST_PAGE) return "FirstPage";
        if (value == aspose::words::cloud::models::PageSetup::BorderAppliesTo::OTHER_PAGES) return "OtherPages";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::BorderAppliesTo pageSetupBorderAppliesToFromString(const std::string& value)
    {
        if (value == "AllPages") return aspose::words::cloud::models::PageSetup::BorderAppliesTo::ALL_PAGES;
        if (value == "FirstPage") return aspose::words::cloud::models::PageSetup::BorderAppliesTo::FIRST_PAGE;
        if (value == "OtherPages") return aspose::words::cloud::models::PageSetup::BorderAppliesTo::OTHER_PAGES;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupBorderDistanceFromToString(aspose::words::cloud::models::PageSetup::BorderDistanceFrom value)
    {
        if (value == aspose::words::cloud::models::PageSetup::BorderDistanceFrom::TEXT) return "Text";
        if (value == aspose::words::cloud::models::PageSetup::BorderDistanceFrom::PAGE_EDGE) return "PageEdge";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::BorderDistanceFrom pageSetupBorderDistanceFromFromString(const std::string& value)
    {
        if (value == "Text") return aspose::words::cloud::models::PageSetup::BorderDistanceFrom::TEXT;
        if (value == "PageEdge") return aspose::words::cloud::models::PageSetup::BorderDistanceFrom::PAGE_EDGE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupLineNumberRestartModeToString(aspose::words::cloud::models::PageSetup::LineNumberRestartMode value)
    {
        if (value == aspose::words::cloud::models::PageSetup::LineNumberRestartMode::RESTART_PAGE) return "RestartPage";
        if (value == aspose::words::cloud::models::PageSetup::LineNumberRestartMode::RESTART_SECTION) return "RestartSection";
        if (value == aspose::words::cloud::models::PageSetup::LineNumberRestartMode::CONTINUOUS) return "Continuous";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::LineNumberRestartMode pageSetupLineNumberRestartModeFromString(const std::string& value)
    {
        if (value == "RestartPage") return aspose::words::cloud::models::PageSetup::LineNumberRestartMode::RESTART_PAGE;
        if (value == "RestartSection") return aspose::words::cloud::models::PageSetup::LineNumberRestartMode::RESTART_SECTION;
        if (value == "Continuous") return aspose::words::cloud::models::PageSetup::LineNumberRestartMode::CONTINUOUS;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupOrientationToString(aspose::words::cloud::models::PageSetup::Orientation value)
    {
        if (value == aspose::words::cloud::models::PageSetup::Orientation::PORTRAIT) return "Portrait";
        if (value == aspose::words::cloud::models::PageSetup::Orientation::LANDSCAPE) return "Landscape";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::Orientation pageSetupOrientationFromString(const std::string& value)
    {
        if (value == "Portrait") return aspose::words::cloud::models::PageSetup::Orientation::PORTRAIT;
        if (value == "Landscape") return aspose::words::cloud::models::PageSetup::Orientation::LANDSCAPE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupPageNumberStyleToString(aspose::words::cloud::models::PageSetup::PageNumberStyle value)
    {
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC) return "Arabic";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_ROMAN) return "UppercaseRoman";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_ROMAN) return "LowercaseRoman";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_LETTER) return "UppercaseLetter";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_LETTER) return "LowercaseLetter";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ORDINAL) return "Ordinal";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER) return "Number";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ORDINAL_TEXT) return "OrdinalText";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HEX) return "Hex";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::CHICAGO_MANUAL) return "ChicagoManual";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI) return "Kanji";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_DIGIT) return "KanjiDigit";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::AIUEO_HALF_WIDTH) return "AiueoHalfWidth";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::IROHA_HALF_WIDTH) return "IrohaHalfWidth";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC_FULL_WIDTH) return "ArabicFullWidth";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC_HALF_WIDTH) return "ArabicHalfWidth";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_TRADITIONAL) return "KanjiTraditional";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_TRADITIONAL2) return "KanjiTraditional2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER_IN_CIRCLE) return "NumberInCircle";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::DECIMAL_FULL_WIDTH) return "DecimalFullWidth";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::AIUEO) return "Aiueo";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::IROHA) return "Iroha";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::LEADING_ZERO) return "LeadingZero";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::BULLET) return "Bullet";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::GANADA) return "Ganada";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::CHOSUNG) return "Chosung";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B1) return "GB1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B2) return "GB2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B3) return "GB3";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B4) return "GB4";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC1) return "Zodiac1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC2) return "Zodiac2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC3) return "Zodiac3";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM1) return "TradChinNum1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM2) return "TradChinNum2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM3) return "TradChinNum3";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM4) return "TradChinNum4";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM1) return "SimpChinNum1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM2) return "SimpChinNum2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM3) return "SimpChinNum3";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM4) return "SimpChinNum4";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA_READ) return "HanjaRead";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA_READ_DIGIT) return "HanjaReadDigit";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HANGUL) return "Hangul";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA) return "Hanja";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HEBREW1) return "Hebrew1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC1) return "Arabic1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HEBREW2) return "Hebrew2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC2) return "Arabic2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_LETTER1) return "HindiLetter1";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_LETTER2) return "HindiLetter2";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_ARABIC) return "HindiArabic";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_CARDINAL_TEXT) return "HindiCardinalText";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_LETTER) return "ThaiLetter";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_ARABIC) return "ThaiArabic";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_CARDINAL_TEXT) return "ThaiCardinalText";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::VIET_CARDINAL_TEXT) return "VietCardinalText";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER_IN_DASH) return "NumberInDash";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_RUSSIAN) return "LowercaseRussian";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_RUSSIAN) return "UppercaseRussian";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::NONE) return "None";
        if (value == aspose::words::cloud::models::PageSetup::PageNumberStyle::CUSTOM) return "Custom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::PageNumberStyle pageSetupPageNumberStyleFromString(const std::string& value)
    {
        if (value == "Arabic") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC;
        if (value == "UppercaseRoman") return aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_ROMAN;
        if (value == "LowercaseRoman") return aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_ROMAN;
        if (value == "UppercaseLetter") return aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_LETTER;
        if (value == "LowercaseLetter") return aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_LETTER;
        if (value == "Ordinal") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ORDINAL;
        if (value == "Number") return aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER;
        if (value == "OrdinalText") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ORDINAL_TEXT;
        if (value == "Hex") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HEX;
        if (value == "ChicagoManual") return aspose::words::cloud::models::PageSetup::PageNumberStyle::CHICAGO_MANUAL;
        if (value == "Kanji") return aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI;
        if (value == "KanjiDigit") return aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_DIGIT;
        if (value == "AiueoHalfWidth") return aspose::words::cloud::models::PageSetup::PageNumberStyle::AIUEO_HALF_WIDTH;
        if (value == "IrohaHalfWidth") return aspose::words::cloud::models::PageSetup::PageNumberStyle::IROHA_HALF_WIDTH;
        if (value == "ArabicFullWidth") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC_FULL_WIDTH;
        if (value == "ArabicHalfWidth") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC_HALF_WIDTH;
        if (value == "KanjiTraditional") return aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_TRADITIONAL;
        if (value == "KanjiTraditional2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::KANJI_TRADITIONAL2;
        if (value == "NumberInCircle") return aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER_IN_CIRCLE;
        if (value == "DecimalFullWidth") return aspose::words::cloud::models::PageSetup::PageNumberStyle::DECIMAL_FULL_WIDTH;
        if (value == "Aiueo") return aspose::words::cloud::models::PageSetup::PageNumberStyle::AIUEO;
        if (value == "Iroha") return aspose::words::cloud::models::PageSetup::PageNumberStyle::IROHA;
        if (value == "LeadingZero") return aspose::words::cloud::models::PageSetup::PageNumberStyle::LEADING_ZERO;
        if (value == "Bullet") return aspose::words::cloud::models::PageSetup::PageNumberStyle::BULLET;
        if (value == "Ganada") return aspose::words::cloud::models::PageSetup::PageNumberStyle::GANADA;
        if (value == "Chosung") return aspose::words::cloud::models::PageSetup::PageNumberStyle::CHOSUNG;
        if (value == "GB1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B1;
        if (value == "GB2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B2;
        if (value == "GB3") return aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B3;
        if (value == "GB4") return aspose::words::cloud::models::PageSetup::PageNumberStyle::G_B4;
        if (value == "Zodiac1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC1;
        if (value == "Zodiac2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC2;
        if (value == "Zodiac3") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ZODIAC3;
        if (value == "TradChinNum1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM1;
        if (value == "TradChinNum2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM2;
        if (value == "TradChinNum3") return aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM3;
        if (value == "TradChinNum4") return aspose::words::cloud::models::PageSetup::PageNumberStyle::TRAD_CHIN_NUM4;
        if (value == "SimpChinNum1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM1;
        if (value == "SimpChinNum2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM2;
        if (value == "SimpChinNum3") return aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM3;
        if (value == "SimpChinNum4") return aspose::words::cloud::models::PageSetup::PageNumberStyle::SIMP_CHIN_NUM4;
        if (value == "HanjaRead") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA_READ;
        if (value == "HanjaReadDigit") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA_READ_DIGIT;
        if (value == "Hangul") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HANGUL;
        if (value == "Hanja") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HANJA;
        if (value == "Hebrew1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HEBREW1;
        if (value == "Arabic1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC1;
        if (value == "Hebrew2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HEBREW2;
        if (value == "Arabic2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::ARABIC2;
        if (value == "HindiLetter1") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_LETTER1;
        if (value == "HindiLetter2") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_LETTER2;
        if (value == "HindiArabic") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_ARABIC;
        if (value == "HindiCardinalText") return aspose::words::cloud::models::PageSetup::PageNumberStyle::HINDI_CARDINAL_TEXT;
        if (value == "ThaiLetter") return aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_LETTER;
        if (value == "ThaiArabic") return aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_ARABIC;
        if (value == "ThaiCardinalText") return aspose::words::cloud::models::PageSetup::PageNumberStyle::THAI_CARDINAL_TEXT;
        if (value == "VietCardinalText") return aspose::words::cloud::models::PageSetup::PageNumberStyle::VIET_CARDINAL_TEXT;
        if (value == "NumberInDash") return aspose::words::cloud::models::PageSetup::PageNumberStyle::NUMBER_IN_DASH;
        if (value == "LowercaseRussian") return aspose::words::cloud::models::PageSetup::PageNumberStyle::LOWERCASE_RUSSIAN;
        if (value == "UppercaseRussian") return aspose::words::cloud::models::PageSetup::PageNumberStyle::UPPERCASE_RUSSIAN;
        if (value == "None") return aspose::words::cloud::models::PageSetup::PageNumberStyle::NONE;
        if (value == "Custom") return aspose::words::cloud::models::PageSetup::PageNumberStyle::CUSTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupPaperSizeToString(aspose::words::cloud::models::PageSetup::PaperSize value)
    {
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::A3) return "A3";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::A4) return "A4";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::A5) return "A5";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::B4) return "B4";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::B5) return "B5";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::EXECUTIVE) return "Executive";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::FOLIO) return "Folio";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::LEDGER) return "Ledger";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::LEGAL) return "Legal";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::LETTER) return "Letter";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::ENVELOPE_DL) return "EnvelopeDL";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::QUARTO) return "Quarto";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::STATEMENT) return "Statement";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::TABLOID) return "Tabloid";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::PAPER10X14) return "Paper10x14";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::PAPER11X17) return "Paper11x17";
        if (value == aspose::words::cloud::models::PageSetup::PaperSize::CUSTOM) return "Custom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::PaperSize pageSetupPaperSizeFromString(const std::string& value)
    {
        if (value == "A3") return aspose::words::cloud::models::PageSetup::PaperSize::A3;
        if (value == "A4") return aspose::words::cloud::models::PageSetup::PaperSize::A4;
        if (value == "A5") return aspose::words::cloud::models::PageSetup::PaperSize::A5;
        if (value == "B4") return aspose::words::cloud::models::PageSetup::PaperSize::B4;
        if (value == "B5") return aspose::words::cloud::models::PageSetup::PaperSize::B5;
        if (value == "Executive") return aspose::words::cloud::models::PageSetup::PaperSize::EXECUTIVE;
        if (value == "Folio") return aspose::words::cloud::models::PageSetup::PaperSize::FOLIO;
        if (value == "Ledger") return aspose::words::cloud::models::PageSetup::PaperSize::LEDGER;
        if (value == "Legal") return aspose::words::cloud::models::PageSetup::PaperSize::LEGAL;
        if (value == "Letter") return aspose::words::cloud::models::PageSetup::PaperSize::LETTER;
        if (value == "EnvelopeDL") return aspose::words::cloud::models::PageSetup::PaperSize::ENVELOPE_DL;
        if (value == "Quarto") return aspose::words::cloud::models::PageSetup::PaperSize::QUARTO;
        if (value == "Statement") return aspose::words::cloud::models::PageSetup::PaperSize::STATEMENT;
        if (value == "Tabloid") return aspose::words::cloud::models::PageSetup::PaperSize::TABLOID;
        if (value == "Paper10x14") return aspose::words::cloud::models::PageSetup::PaperSize::PAPER10X14;
        if (value == "Paper11x17") return aspose::words::cloud::models::PageSetup::PaperSize::PAPER11X17;
        if (value == "Custom") return aspose::words::cloud::models::PageSetup::PaperSize::CUSTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupSectionStartToString(aspose::words::cloud::models::PageSetup::SectionStart value)
    {
        if (value == aspose::words::cloud::models::PageSetup::SectionStart::CONTINUOUS) return "Continuous";
        if (value == aspose::words::cloud::models::PageSetup::SectionStart::NEW_COLUMN) return "NewColumn";
        if (value == aspose::words::cloud::models::PageSetup::SectionStart::NEW_PAGE) return "NewPage";
        if (value == aspose::words::cloud::models::PageSetup::SectionStart::EVEN_PAGE) return "EvenPage";
        if (value == aspose::words::cloud::models::PageSetup::SectionStart::ODD_PAGE) return "OddPage";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::SectionStart pageSetupSectionStartFromString(const std::string& value)
    {
        if (value == "Continuous") return aspose::words::cloud::models::PageSetup::SectionStart::CONTINUOUS;
        if (value == "NewColumn") return aspose::words::cloud::models::PageSetup::SectionStart::NEW_COLUMN;
        if (value == "NewPage") return aspose::words::cloud::models::PageSetup::SectionStart::NEW_PAGE;
        if (value == "EvenPage") return aspose::words::cloud::models::PageSetup::SectionStart::EVEN_PAGE;
        if (value == "OddPage") return aspose::words::cloud::models::PageSetup::SectionStart::ODD_PAGE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string pageSetupVerticalAlignmentToString(aspose::words::cloud::models::PageSetup::VerticalAlignment value)
    {
        if (value == aspose::words::cloud::models::PageSetup::VerticalAlignment::TOP) return "Top";
        if (value == aspose::words::cloud::models::PageSetup::VerticalAlignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::PageSetup::VerticalAlignment::JUSTIFY) return "Justify";
        if (value == aspose::words::cloud::models::PageSetup::VerticalAlignment::BOTTOM) return "Bottom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PageSetup::VerticalAlignment pageSetupVerticalAlignmentFromString(const std::string& value)
    {
        if (value == "Top") return aspose::words::cloud::models::PageSetup::VerticalAlignment::TOP;
        if (value == "Center") return aspose::words::cloud::models::PageSetup::VerticalAlignment::CENTER;
        if (value == "Justify") return aspose::words::cloud::models::PageSetup::VerticalAlignment::JUSTIFY;
        if (value == "Bottom") return aspose::words::cloud::models::PageSetup::VerticalAlignment::BOTTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void PageSetup::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Bidi) {
            json["Bidi"] = *m_Bidi;
        }
        if (m_BorderAlwaysInFront) {
            json["BorderAlwaysInFront"] = *m_BorderAlwaysInFront;
        }
        if (m_BorderAppliesTo) {
            json["BorderAppliesTo"] = pageSetupBorderAppliesToToString(*m_BorderAppliesTo);
        }
        if (m_BorderDistanceFrom) {
            json["BorderDistanceFrom"] = pageSetupBorderDistanceFromToString(*m_BorderDistanceFrom);
        }
        if (m_BottomMargin) {
            json["BottomMargin"] = *m_BottomMargin;
        }
        if (m_DifferentFirstPageHeaderFooter) {
            json["DifferentFirstPageHeaderFooter"] = *m_DifferentFirstPageHeaderFooter;
        }
        if (m_FirstPageTray) {
            json["FirstPageTray"] = *m_FirstPageTray;
        }
        if (m_FooterDistance) {
            json["FooterDistance"] = *m_FooterDistance;
        }
        if (m_Gutter) {
            json["Gutter"] = *m_Gutter;
        }
        if (m_HeaderDistance) {
            json["HeaderDistance"] = *m_HeaderDistance;
        }
        if (m_LeftMargin) {
            json["LeftMargin"] = *m_LeftMargin;
        }
        if (m_LineNumberCountBy) {
            json["LineNumberCountBy"] = *m_LineNumberCountBy;
        }
        if (m_LineNumberDistanceFromText) {
            json["LineNumberDistanceFromText"] = *m_LineNumberDistanceFromText;
        }
        if (m_LineNumberRestartMode) {
            json["LineNumberRestartMode"] = pageSetupLineNumberRestartModeToString(*m_LineNumberRestartMode);
        }
        if (m_LineStartingNumber) {
            json["LineStartingNumber"] = *m_LineStartingNumber;
        }
        if (m_Orientation) {
            json["Orientation"] = pageSetupOrientationToString(*m_Orientation);
        }
        if (m_OtherPagesTray) {
            json["OtherPagesTray"] = *m_OtherPagesTray;
        }
        if (m_PageHeight) {
            json["PageHeight"] = *m_PageHeight;
        }
        if (m_PageNumberStyle) {
            json["PageNumberStyle"] = pageSetupPageNumberStyleToString(*m_PageNumberStyle);
        }
        if (m_PageStartingNumber) {
            json["PageStartingNumber"] = *m_PageStartingNumber;
        }
        if (m_PageWidth) {
            json["PageWidth"] = *m_PageWidth;
        }
        if (m_PaperSize) {
            json["PaperSize"] = pageSetupPaperSizeToString(*m_PaperSize);
        }
        if (m_RestartPageNumbering) {
            json["RestartPageNumbering"] = *m_RestartPageNumbering;
        }
        if (m_RightMargin) {
            json["RightMargin"] = *m_RightMargin;
        }
        if (m_RtlGutter) {
            json["RtlGutter"] = *m_RtlGutter;
        }
        if (m_SectionStart) {
            json["SectionStart"] = pageSetupSectionStartToString(*m_SectionStart);
        }
        if (m_SuppressEndnotes) {
            json["SuppressEndnotes"] = *m_SuppressEndnotes;
        }
        if (m_TopMargin) {
            json["TopMargin"] = *m_TopMargin;
        }
        if (m_VerticalAlignment) {
            json["VerticalAlignment"] = pageSetupVerticalAlignmentToString(*m_VerticalAlignment);
        }
    }

    void PageSetup::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Bidi") && !json["Bidi"].is_null()) {
            m_Bidi = std::make_shared< bool >(
                json["Bidi"].get< bool >()
            );
        }
        if (json.contains("BorderAlwaysInFront") && !json["BorderAlwaysInFront"].is_null()) {
            m_BorderAlwaysInFront = std::make_shared< bool >(
                json["BorderAlwaysInFront"].get< bool >()
            );
        }
        if (json.contains("BorderAppliesTo") && !json["BorderAppliesTo"].is_null()) {
            m_BorderAppliesTo = std::make_shared< aspose::words::cloud::models::PageSetup::BorderAppliesTo >(
                pageSetupBorderAppliesToFromString(json["BorderAppliesTo"].get< std::string >())
            );
        }
        if (json.contains("BorderDistanceFrom") && !json["BorderDistanceFrom"].is_null()) {
            m_BorderDistanceFrom = std::make_shared< aspose::words::cloud::models::PageSetup::BorderDistanceFrom >(
                pageSetupBorderDistanceFromFromString(json["BorderDistanceFrom"].get< std::string >())
            );
        }
        if (json.contains("BottomMargin") && !json["BottomMargin"].is_null()) {
            m_BottomMargin = std::make_shared< double >(
                json["BottomMargin"].get< double >()
            );
        }
        if (json.contains("DifferentFirstPageHeaderFooter") && !json["DifferentFirstPageHeaderFooter"].is_null()) {
            m_DifferentFirstPageHeaderFooter = std::make_shared< bool >(
                json["DifferentFirstPageHeaderFooter"].get< bool >()
            );
        }
        if (json.contains("FirstPageTray") && !json["FirstPageTray"].is_null()) {
            m_FirstPageTray = std::make_shared< int32_t >(
                json["FirstPageTray"].get< int32_t >()
            );
        }
        if (json.contains("FooterDistance") && !json["FooterDistance"].is_null()) {
            m_FooterDistance = std::make_shared< double >(
                json["FooterDistance"].get< double >()
            );
        }
        if (json.contains("Gutter") && !json["Gutter"].is_null()) {
            m_Gutter = std::make_shared< double >(
                json["Gutter"].get< double >()
            );
        }
        if (json.contains("HeaderDistance") && !json["HeaderDistance"].is_null()) {
            m_HeaderDistance = std::make_shared< double >(
                json["HeaderDistance"].get< double >()
            );
        }
        if (json.contains("LeftMargin") && !json["LeftMargin"].is_null()) {
            m_LeftMargin = std::make_shared< double >(
                json["LeftMargin"].get< double >()
            );
        }
        if (json.contains("LineNumberCountBy") && !json["LineNumberCountBy"].is_null()) {
            m_LineNumberCountBy = std::make_shared< int32_t >(
                json["LineNumberCountBy"].get< int32_t >()
            );
        }
        if (json.contains("LineNumberDistanceFromText") && !json["LineNumberDistanceFromText"].is_null()) {
            m_LineNumberDistanceFromText = std::make_shared< double >(
                json["LineNumberDistanceFromText"].get< double >()
            );
        }
        if (json.contains("LineNumberRestartMode") && !json["LineNumberRestartMode"].is_null()) {
            m_LineNumberRestartMode = std::make_shared< aspose::words::cloud::models::PageSetup::LineNumberRestartMode >(
                pageSetupLineNumberRestartModeFromString(json["LineNumberRestartMode"].get< std::string >())
            );
        }
        if (json.contains("LineStartingNumber") && !json["LineStartingNumber"].is_null()) {
            m_LineStartingNumber = std::make_shared< int32_t >(
                json["LineStartingNumber"].get< int32_t >()
            );
        }
        if (json.contains("Orientation") && !json["Orientation"].is_null()) {
            m_Orientation = std::make_shared< aspose::words::cloud::models::PageSetup::Orientation >(
                pageSetupOrientationFromString(json["Orientation"].get< std::string >())
            );
        }
        if (json.contains("OtherPagesTray") && !json["OtherPagesTray"].is_null()) {
            m_OtherPagesTray = std::make_shared< int32_t >(
                json["OtherPagesTray"].get< int32_t >()
            );
        }
        if (json.contains("PageHeight") && !json["PageHeight"].is_null()) {
            m_PageHeight = std::make_shared< double >(
                json["PageHeight"].get< double >()
            );
        }
        if (json.contains("PageNumberStyle") && !json["PageNumberStyle"].is_null()) {
            m_PageNumberStyle = std::make_shared< aspose::words::cloud::models::PageSetup::PageNumberStyle >(
                pageSetupPageNumberStyleFromString(json["PageNumberStyle"].get< std::string >())
            );
        }
        if (json.contains("PageStartingNumber") && !json["PageStartingNumber"].is_null()) {
            m_PageStartingNumber = std::make_shared< int32_t >(
                json["PageStartingNumber"].get< int32_t >()
            );
        }
        if (json.contains("PageWidth") && !json["PageWidth"].is_null()) {
            m_PageWidth = std::make_shared< double >(
                json["PageWidth"].get< double >()
            );
        }
        if (json.contains("PaperSize") && !json["PaperSize"].is_null()) {
            m_PaperSize = std::make_shared< aspose::words::cloud::models::PageSetup::PaperSize >(
                pageSetupPaperSizeFromString(json["PaperSize"].get< std::string >())
            );
        }
        if (json.contains("RestartPageNumbering") && !json["RestartPageNumbering"].is_null()) {
            m_RestartPageNumbering = std::make_shared< bool >(
                json["RestartPageNumbering"].get< bool >()
            );
        }
        if (json.contains("RightMargin") && !json["RightMargin"].is_null()) {
            m_RightMargin = std::make_shared< double >(
                json["RightMargin"].get< double >()
            );
        }
        if (json.contains("RtlGutter") && !json["RtlGutter"].is_null()) {
            m_RtlGutter = std::make_shared< bool >(
                json["RtlGutter"].get< bool >()
            );
        }
        if (json.contains("SectionStart") && !json["SectionStart"].is_null()) {
            m_SectionStart = std::make_shared< aspose::words::cloud::models::PageSetup::SectionStart >(
                pageSetupSectionStartFromString(json["SectionStart"].get< std::string >())
            );
        }
        if (json.contains("SuppressEndnotes") && !json["SuppressEndnotes"].is_null()) {
            m_SuppressEndnotes = std::make_shared< bool >(
                json["SuppressEndnotes"].get< bool >()
            );
        }
        if (json.contains("TopMargin") && !json["TopMargin"].is_null()) {
            m_TopMargin = std::make_shared< double >(
                json["TopMargin"].get< double >()
            );
        }
        if (json.contains("VerticalAlignment") && !json["VerticalAlignment"].is_null()) {
            m_VerticalAlignment = std::make_shared< aspose::words::cloud::models::PageSetup::VerticalAlignment >(
                pageSetupVerticalAlignmentFromString(json["VerticalAlignment"].get< std::string >())
            );
        }
    }

    std::shared_ptr< bool > PageSetup::getBidi() const
    {
        return m_Bidi;
    }

    void PageSetup::setBidi(std::shared_ptr< bool > value)
    {
        m_Bidi = value;
    }

    std::shared_ptr< bool > PageSetup::getBorderAlwaysInFront() const
    {
        return m_BorderAlwaysInFront;
    }

    void PageSetup::setBorderAlwaysInFront(std::shared_ptr< bool > value)
    {
        m_BorderAlwaysInFront = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::BorderAppliesTo > PageSetup::getBorderAppliesTo() const
    {
        return m_BorderAppliesTo;
    }

    void PageSetup::setBorderAppliesTo(std::shared_ptr< aspose::words::cloud::models::PageSetup::BorderAppliesTo > value)
    {
        m_BorderAppliesTo = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::BorderDistanceFrom > PageSetup::getBorderDistanceFrom() const
    {
        return m_BorderDistanceFrom;
    }

    void PageSetup::setBorderDistanceFrom(std::shared_ptr< aspose::words::cloud::models::PageSetup::BorderDistanceFrom > value)
    {
        m_BorderDistanceFrom = value;
    }

    std::shared_ptr< double > PageSetup::getBottomMargin() const
    {
        return m_BottomMargin;
    }

    void PageSetup::setBottomMargin(std::shared_ptr< double > value)
    {
        m_BottomMargin = value;
    }

    std::shared_ptr< bool > PageSetup::getDifferentFirstPageHeaderFooter() const
    {
        return m_DifferentFirstPageHeaderFooter;
    }

    void PageSetup::setDifferentFirstPageHeaderFooter(std::shared_ptr< bool > value)
    {
        m_DifferentFirstPageHeaderFooter = value;
    }

    std::shared_ptr< int32_t > PageSetup::getFirstPageTray() const
    {
        return m_FirstPageTray;
    }

    void PageSetup::setFirstPageTray(std::shared_ptr< int32_t > value)
    {
        m_FirstPageTray = value;
    }

    std::shared_ptr< double > PageSetup::getFooterDistance() const
    {
        return m_FooterDistance;
    }

    void PageSetup::setFooterDistance(std::shared_ptr< double > value)
    {
        m_FooterDistance = value;
    }

    std::shared_ptr< double > PageSetup::getGutter() const
    {
        return m_Gutter;
    }

    void PageSetup::setGutter(std::shared_ptr< double > value)
    {
        m_Gutter = value;
    }

    std::shared_ptr< double > PageSetup::getHeaderDistance() const
    {
        return m_HeaderDistance;
    }

    void PageSetup::setHeaderDistance(std::shared_ptr< double > value)
    {
        m_HeaderDistance = value;
    }

    std::shared_ptr< double > PageSetup::getLeftMargin() const
    {
        return m_LeftMargin;
    }

    void PageSetup::setLeftMargin(std::shared_ptr< double > value)
    {
        m_LeftMargin = value;
    }

    std::shared_ptr< int32_t > PageSetup::getLineNumberCountBy() const
    {
        return m_LineNumberCountBy;
    }

    void PageSetup::setLineNumberCountBy(std::shared_ptr< int32_t > value)
    {
        m_LineNumberCountBy = value;
    }

    std::shared_ptr< double > PageSetup::getLineNumberDistanceFromText() const
    {
        return m_LineNumberDistanceFromText;
    }

    void PageSetup::setLineNumberDistanceFromText(std::shared_ptr< double > value)
    {
        m_LineNumberDistanceFromText = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::LineNumberRestartMode > PageSetup::getLineNumberRestartMode() const
    {
        return m_LineNumberRestartMode;
    }

    void PageSetup::setLineNumberRestartMode(std::shared_ptr< aspose::words::cloud::models::PageSetup::LineNumberRestartMode > value)
    {
        m_LineNumberRestartMode = value;
    }

    std::shared_ptr< int32_t > PageSetup::getLineStartingNumber() const
    {
        return m_LineStartingNumber;
    }

    void PageSetup::setLineStartingNumber(std::shared_ptr< int32_t > value)
    {
        m_LineStartingNumber = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::Orientation > PageSetup::getOrientation() const
    {
        return m_Orientation;
    }

    void PageSetup::setOrientation(std::shared_ptr< aspose::words::cloud::models::PageSetup::Orientation > value)
    {
        m_Orientation = value;
    }

    std::shared_ptr< int32_t > PageSetup::getOtherPagesTray() const
    {
        return m_OtherPagesTray;
    }

    void PageSetup::setOtherPagesTray(std::shared_ptr< int32_t > value)
    {
        m_OtherPagesTray = value;
    }

    std::shared_ptr< double > PageSetup::getPageHeight() const
    {
        return m_PageHeight;
    }

    void PageSetup::setPageHeight(std::shared_ptr< double > value)
    {
        m_PageHeight = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::PageNumberStyle > PageSetup::getPageNumberStyle() const
    {
        return m_PageNumberStyle;
    }

    void PageSetup::setPageNumberStyle(std::shared_ptr< aspose::words::cloud::models::PageSetup::PageNumberStyle > value)
    {
        m_PageNumberStyle = value;
    }

    std::shared_ptr< int32_t > PageSetup::getPageStartingNumber() const
    {
        return m_PageStartingNumber;
    }

    void PageSetup::setPageStartingNumber(std::shared_ptr< int32_t > value)
    {
        m_PageStartingNumber = value;
    }

    std::shared_ptr< double > PageSetup::getPageWidth() const
    {
        return m_PageWidth;
    }

    void PageSetup::setPageWidth(std::shared_ptr< double > value)
    {
        m_PageWidth = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::PaperSize > PageSetup::getPaperSize() const
    {
        return m_PaperSize;
    }

    void PageSetup::setPaperSize(std::shared_ptr< aspose::words::cloud::models::PageSetup::PaperSize > value)
    {
        m_PaperSize = value;
    }

    std::shared_ptr< bool > PageSetup::getRestartPageNumbering() const
    {
        return m_RestartPageNumbering;
    }

    void PageSetup::setRestartPageNumbering(std::shared_ptr< bool > value)
    {
        m_RestartPageNumbering = value;
    }

    std::shared_ptr< double > PageSetup::getRightMargin() const
    {
        return m_RightMargin;
    }

    void PageSetup::setRightMargin(std::shared_ptr< double > value)
    {
        m_RightMargin = value;
    }

    std::shared_ptr< bool > PageSetup::getRtlGutter() const
    {
        return m_RtlGutter;
    }

    void PageSetup::setRtlGutter(std::shared_ptr< bool > value)
    {
        m_RtlGutter = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::SectionStart > PageSetup::getSectionStart() const
    {
        return m_SectionStart;
    }

    void PageSetup::setSectionStart(std::shared_ptr< aspose::words::cloud::models::PageSetup::SectionStart > value)
    {
        m_SectionStart = value;
    }

    std::shared_ptr< bool > PageSetup::getSuppressEndnotes() const
    {
        return m_SuppressEndnotes;
    }

    void PageSetup::setSuppressEndnotes(std::shared_ptr< bool > value)
    {
        m_SuppressEndnotes = value;
    }

    std::shared_ptr< double > PageSetup::getTopMargin() const
    {
        return m_TopMargin;
    }

    void PageSetup::setTopMargin(std::shared_ptr< double > value)
    {
        m_TopMargin = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup::VerticalAlignment > PageSetup::getVerticalAlignment() const
    {
        return m_VerticalAlignment;
    }

    void PageSetup::setVerticalAlignment(std::shared_ptr< aspose::words::cloud::models::PageSetup::VerticalAlignment > value)
    {
        m_VerticalAlignment = value;
    }


    /*
     * PageStatData implementation
     */
    void PageStatData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FootnotesStatData) {
            m_FootnotesStatData->toJson(&json["FootnotesStatData"]);
        }
        if (m_PageNumber) {
            json["PageNumber"] = *m_PageNumber;
        }
        if (m_ParagraphCount) {
            json["ParagraphCount"] = *m_ParagraphCount;
        }
        if (m_WordCount) {
            json["WordCount"] = *m_WordCount;
        }
    }

    void PageStatData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FootnotesStatData") && !json["FootnotesStatData"].is_null()) {
            m_FootnotesStatData = std::make_shared< aspose::words::cloud::models::FootnotesStatData >();
            m_FootnotesStatData->fromJson(&json["FootnotesStatData"]);
        }
        if (json.contains("PageNumber") && !json["PageNumber"].is_null()) {
            m_PageNumber = std::make_shared< int32_t >(
                json["PageNumber"].get< int32_t >()
            );
        }
        if (json.contains("ParagraphCount") && !json["ParagraphCount"].is_null()) {
            m_ParagraphCount = std::make_shared< int32_t >(
                json["ParagraphCount"].get< int32_t >()
            );
        }
        if (json.contains("WordCount") && !json["WordCount"].is_null()) {
            m_WordCount = std::make_shared< int32_t >(
                json["WordCount"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FootnotesStatData > PageStatData::getFootnotesStatData() const
    {
        return m_FootnotesStatData;
    }

    void PageStatData::setFootnotesStatData(std::shared_ptr< aspose::words::cloud::models::FootnotesStatData > value)
    {
        m_FootnotesStatData = value;
    }

    std::shared_ptr< int32_t > PageStatData::getPageNumber() const
    {
        return m_PageNumber;
    }

    void PageStatData::setPageNumber(std::shared_ptr< int32_t > value)
    {
        m_PageNumber = value;
    }

    std::shared_ptr< int32_t > PageStatData::getParagraphCount() const
    {
        return m_ParagraphCount;
    }

    void PageStatData::setParagraphCount(std::shared_ptr< int32_t > value)
    {
        m_ParagraphCount = value;
    }

    std::shared_ptr< int32_t > PageStatData::getWordCount() const
    {
        return m_WordCount;
    }

    void PageStatData::setWordCount(std::shared_ptr< int32_t > value)
    {
        m_WordCount = value;
    }


    /*
     * Paragraph implementation
     */
    void Paragraph::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ChildNodes) {
            json["ChildNodes"] = ::nlohmann::json::array();
            for (auto& element : *m_ChildNodes) {
                element->toJson(&json["ChildNodes"].emplace_back());
            }
        }
    }

    void Paragraph::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ChildNodes") && !json["ChildNodes"].is_null()) {
            m_ChildNodes = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> >();
            for (auto& element : json["ChildNodes"]) {
                m_ChildNodes->emplace_back(std::make_shared< aspose::words::cloud::models::NodeLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > Paragraph::getChildNodes() const
    {
        return m_ChildNodes;
    }

    void Paragraph::setChildNodes(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > value)
    {
        m_ChildNodes = value;
    }


    /*
     * ParagraphFormat implementation
     */
    void ParagraphFormat::toJson(void* jsonIfc) const
    {
        ParagraphFormatBase::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsHeading) {
            json["IsHeading"] = *m_IsHeading;
        }
        if (m_IsListItem) {
            json["IsListItem"] = *m_IsListItem;
        }
    }

    void ParagraphFormat::fromJson(const void* jsonIfc)
    {
        ParagraphFormatBase::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsHeading") && !json["IsHeading"].is_null()) {
            m_IsHeading = std::make_shared< bool >(
                json["IsHeading"].get< bool >()
            );
        }
        if (json.contains("IsListItem") && !json["IsListItem"].is_null()) {
            m_IsListItem = std::make_shared< bool >(
                json["IsListItem"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > ParagraphFormat::getIsHeading() const
    {
        return m_IsHeading;
    }

    void ParagraphFormat::setIsHeading(std::shared_ptr< bool > value)
    {
        m_IsHeading = value;
    }

    std::shared_ptr< bool > ParagraphFormat::getIsListItem() const
    {
        return m_IsListItem;
    }

    void ParagraphFormat::setIsListItem(std::shared_ptr< bool > value)
    {
        m_IsListItem = value;
    }


    /*
     * ParagraphFormatBase implementation
     */
    inline std::string paragraphFormatBaseAlignmentToString(aspose::words::cloud::models::ParagraphFormatBase::Alignment value)
    {
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::RIGHT) return "Right";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::JUSTIFY) return "Justify";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::DISTRIBUTED) return "Distributed";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_MEDIUM_KASHIDA) return "ArabicMediumKashida";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_HIGH_KASHIDA) return "ArabicHighKashida";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_LOW_KASHIDA) return "ArabicLowKashida";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::Alignment::THAI_DISTRIBUTED) return "ThaiDistributed";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ParagraphFormatBase::Alignment paragraphFormatBaseAlignmentFromString(const std::string& value)
    {
        if (value == "Left") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::RIGHT;
        if (value == "Justify") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::JUSTIFY;
        if (value == "Distributed") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::DISTRIBUTED;
        if (value == "ArabicMediumKashida") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_MEDIUM_KASHIDA;
        if (value == "ArabicHighKashida") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_HIGH_KASHIDA;
        if (value == "ArabicLowKashida") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::ARABIC_LOW_KASHIDA;
        if (value == "ThaiDistributed") return aspose::words::cloud::models::ParagraphFormatBase::Alignment::THAI_DISTRIBUTED;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string paragraphFormatBaseDropCapPositionToString(aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition value)
    {
        if (value == aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::NONE) return "None";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::MARGIN) return "Margin";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition paragraphFormatBaseDropCapPositionFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::NONE;
        if (value == "Normal") return aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::NORMAL;
        if (value == "Margin") return aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition::MARGIN;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string paragraphFormatBaseLineSpacingRuleToString(aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule value)
    {
        if (value == aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::AT_LEAST) return "AtLeast";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::EXACTLY) return "Exactly";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::MULTIPLE) return "Multiple";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule paragraphFormatBaseLineSpacingRuleFromString(const std::string& value)
    {
        if (value == "AtLeast") return aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::AT_LEAST;
        if (value == "Exactly") return aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::EXACTLY;
        if (value == "Multiple") return aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule::MULTIPLE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string paragraphFormatBaseOutlineLevelToString(aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel value)
    {
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL1) return "Level1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL2) return "Level2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL3) return "Level3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL4) return "Level4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL5) return "Level5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL6) return "Level6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL7) return "Level7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL8) return "Level8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL9) return "Level9";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::BODY_TEXT) return "BodyText";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel paragraphFormatBaseOutlineLevelFromString(const std::string& value)
    {
        if (value == "Level1") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL1;
        if (value == "Level2") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL2;
        if (value == "Level3") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL3;
        if (value == "Level4") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL4;
        if (value == "Level5") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL5;
        if (value == "Level6") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL6;
        if (value == "Level7") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL7;
        if (value == "Level8") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL8;
        if (value == "Level9") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::LEVEL9;
        if (value == "BodyText") return aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel::BODY_TEXT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string paragraphFormatBaseStyleIdentifierToString(aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier value)
    {
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING1) return "Heading1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING2) return "Heading2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING3) return "Heading3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING4) return "Heading4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING5) return "Heading5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING6) return "Heading6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING7) return "Heading7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING8) return "Heading8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING9) return "Heading9";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX1) return "Index1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX2) return "Index2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX3) return "Index3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX4) return "Index4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX5) return "Index5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX6) return "Index6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX7) return "Index7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX8) return "Index8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX9) return "Index9";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC1) return "Toc1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC2) return "Toc2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC3) return "Toc3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC4) return "Toc4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC5) return "Toc5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC6) return "Toc6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC7) return "Toc7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC8) return "Toc8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC9) return "Toc9";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL_INDENT) return "NormalIndent";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTNOTE_TEXT) return "FootnoteText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_TEXT) return "CommentText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADER) return "Header";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTER) return "Footer";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX_HEADING) return "IndexHeading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::CAPTION) return "Caption";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_OF_FIGURES) return "TableOfFigures";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENVELOPE_ADDRESS) return "EnvelopeAddress";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENVELOPE_RETURN) return "EnvelopeReturn";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTNOTE_REFERENCE) return "FootnoteReference";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_REFERENCE) return "CommentReference";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LINE_NUMBER) return "LineNumber";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PAGE_NUMBER) return "PageNumber";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENDNOTE_REFERENCE) return "EndnoteReference";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENDNOTE_TEXT) return "EndnoteText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_OF_AUTHORITIES) return "TableOfAuthorities";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MACRO) return "Macro";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOA_HEADING) return "ToaHeading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST) return "List";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET) return "ListBullet";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER) return "ListNumber";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST2) return "List2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST3) return "List3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST4) return "List4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST5) return "List5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET2) return "ListBullet2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET3) return "ListBullet3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET4) return "ListBullet4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET5) return "ListBullet5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER2) return "ListNumber2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER3) return "ListNumber3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER4) return "ListNumber4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER5) return "ListNumber5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TITLE) return "Title";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::CLOSING) return "Closing";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SIGNATURE) return "Signature";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DEFAULT_PARAGRAPH_FONT) return "DefaultParagraphFont";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT) return "BodyText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND) return "BodyTextInd";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE) return "ListContinue";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE2) return "ListContinue2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE3) return "ListContinue3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE4) return "ListContinue4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE5) return "ListContinue5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MESSAGE_HEADER) return "MessageHeader";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTITLE) return "Subtitle";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SALUTATION) return "Salutation";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DATE) return "Date";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT1_I) return "BodyText1I";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT1_I2) return "BodyText1I2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NOTE_HEADING) return "NoteHeading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT2) return "BodyText2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT3) return "BodyText3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND2) return "BodyTextInd2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND3) return "BodyTextInd3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BLOCK_TEXT) return "BlockText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HYPERLINK) return "Hyperlink";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOLLOWED_HYPERLINK) return "FollowedHyperlink";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::STRONG) return "Strong";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::EMPHASIS) return "Emphasis";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DOCUMENT_MAP) return "DocumentMap";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TEXT) return "PlainText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::EMAIL_SIGNATURE) return "EmailSignature";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_TOP_OF_FORM) return "HtmlTopOfForm";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_BOTTOM_OF_FORM) return "HtmlBottomOfForm";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL_WEB) return "NormalWeb";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_ACRONYM) return "HtmlAcronym";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_ADDRESS) return "HtmlAddress";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_CITE) return "HtmlCite";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_CODE) return "HtmlCode";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_DEFINITION) return "HtmlDefinition";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_KEYBOARD) return "HtmlKeyboard";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_PREFORMATTED) return "HtmlPreformatted";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_SAMPLE) return "HtmlSample";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_TYPEWRITER) return "HtmlTypewriter";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_VARIABLE) return "HtmlVariable";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_NORMAL) return "TableNormal";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_SUBJECT) return "CommentSubject";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NO_LIST) return "NoList";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST1) return "OutlineList1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST2) return "OutlineList2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST3) return "OutlineList3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE1) return "TableSimple1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE2) return "TableSimple2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE3) return "TableSimple3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC1) return "TableClassic1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC2) return "TableClassic2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC3) return "TableClassic3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC4) return "TableClassic4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL1) return "TableColorful1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL2) return "TableColorful2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL3) return "TableColorful3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS1) return "TableColumns1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS2) return "TableColumns2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS3) return "TableColumns3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS4) return "TableColumns4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS5) return "TableColumns5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID1) return "TableGrid1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID2) return "TableGrid2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID3) return "TableGrid3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID4) return "TableGrid4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID5) return "TableGrid5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID6) return "TableGrid6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID7) return "TableGrid7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID8) return "TableGrid8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST1) return "TableList1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST2) return "TableList2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST3) return "TableList3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST4) return "TableList4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST5) return "TableList5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST6) return "TableList6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST7) return "TableList7";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST8) return "TableList8";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS1) return "Table3DEffects1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS2) return "Table3DEffects2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS3) return "Table3DEffects3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CONTEMPORARY) return "TableContemporary";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_ELEGANT) return "TableElegant";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_PROFESSIONAL) return "TableProfessional";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SUBTLE1) return "TableSubtle1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SUBTLE2) return "TableSubtle2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB1) return "TableWeb1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB2) return "TableWeb2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB3) return "TableWeb3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BALLOON_TEXT) return "BalloonText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID) return "TableGrid";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_THEME) return "TableTheme";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLACEHOLDER_TEXT) return "PlaceholderText";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NO_SPACING) return "NoSpacing";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING) return "LightShading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST) return "LightList";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID) return "LightGrid";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1) return "MediumShading1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2) return "MediumShading2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1) return "MediumList1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2) return "MediumList2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1) return "MediumGrid1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2) return "MediumGrid2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3) return "MediumGrid3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST) return "DarkList";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING) return "ColorfulShading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST) return "ColorfulList";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID) return "ColorfulGrid";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT1) return "LightShadingAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT1) return "LightListAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT1) return "LightGridAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT1) return "MediumShading1Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT1) return "MediumShading2Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT1) return "MediumList1Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::REVISION) return "Revision";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_PARAGRAPH) return "ListParagraph";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::QUOTE) return "Quote";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_QUOTE) return "IntenseQuote";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT1) return "MediumList2Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT1) return "MediumGrid1Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT1) return "MediumGrid2Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT1) return "MediumGrid3Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT1) return "DarkListAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT1) return "ColorfulShadingAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT1) return "ColorfulListAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT1) return "ColorfulGridAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT2) return "LightShadingAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT2) return "LightListAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT2) return "LightGridAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT2) return "MediumShading1Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT2) return "MediumShading2Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT2) return "MediumList1Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT2) return "MediumList2Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT2) return "MediumGrid1Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT2) return "MediumGrid2Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT2) return "MediumGrid3Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT2) return "DarkListAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT2) return "ColorfulShadingAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT2) return "ColorfulListAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT2) return "ColorfulGridAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT3) return "LightShadingAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT3) return "LightListAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT3) return "LightGridAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT3) return "MediumShading1Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT3) return "MediumShading2Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT3) return "MediumList1Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT3) return "MediumList2Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT3) return "MediumGrid1Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT3) return "MediumGrid2Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT3) return "MediumGrid3Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT3) return "DarkListAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT3) return "ColorfulShadingAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT3) return "ColorfulListAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT3) return "ColorfulGridAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT4) return "LightShadingAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT4) return "LightListAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT4) return "LightGridAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT4) return "MediumShading1Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT4) return "MediumShading2Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT4) return "MediumList1Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT4) return "MediumList2Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT4) return "MediumGrid1Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT4) return "MediumGrid2Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT4) return "MediumGrid3Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT4) return "DarkListAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT4) return "ColorfulShadingAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT4) return "ColorfulListAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT4) return "ColorfulGridAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT5) return "LightShadingAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT5) return "LightListAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT5) return "LightGridAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT5) return "MediumShading1Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT5) return "MediumShading2Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT5) return "MediumList1Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT5) return "MediumList2Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT5) return "MediumGrid1Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT5) return "MediumGrid2Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT5) return "MediumGrid3Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT5) return "DarkListAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT5) return "ColorfulShadingAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT5) return "ColorfulListAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT5) return "ColorfulGridAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT6) return "LightShadingAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT6) return "LightListAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT6) return "LightGridAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT6) return "MediumShading1Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT6) return "MediumShading2Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT6) return "MediumList1Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT6) return "MediumList2Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT6) return "MediumGrid1Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT6) return "MediumGrid2Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT6) return "MediumGrid3Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT6) return "DarkListAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT6) return "ColorfulShadingAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT6) return "ColorfulListAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT6) return "ColorfulGridAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTLE_EMPHASIS) return "SubtleEmphasis";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_EMPHASIS) return "IntenseEmphasis";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTLE_REFERENCE) return "SubtleReference";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_REFERENCE) return "IntenseReference";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BOOK_TITLE) return "BookTitle";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BIBLIOGRAPHY) return "Bibliography";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC_HEADING) return "TocHeading";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE1) return "PlainTable1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE2) return "PlainTable2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE3) return "PlainTable3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE4) return "PlainTable4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE5) return "PlainTable5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID_LIGHT) return "TableGridLight";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT) return "GridTable1Light";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2) return "GridTable2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3) return "GridTable3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4) return "GridTable4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK) return "GridTable5Dark";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL) return "GridTable6Colorful";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL) return "GridTable7Colorful";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1) return "GridTable1LightAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT1) return "GridTable2Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT1) return "GridTable3Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT1) return "GridTable4Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1) return "GridTable5DarkAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1) return "GridTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1) return "GridTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2) return "GridTable1LightAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT2) return "GridTable2Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT2) return "GridTable3Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT2) return "GridTable4Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2) return "GridTable5DarkAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2) return "GridTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2) return "GridTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3) return "GridTable1LightAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT3) return "GridTable2Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT3) return "GridTable3Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT3) return "GridTable4Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3) return "GridTable5DarkAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3) return "GridTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3) return "GridTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4) return "GridTable1LightAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT4) return "GridTable2Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT4) return "GridTable3Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT4) return "GridTable4Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4) return "GridTable5DarkAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4) return "GridTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4) return "GridTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5) return "GridTable1LightAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT5) return "GridTable2Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT5) return "GridTable3Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT5) return "GridTable4Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5) return "GridTable5DarkAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5) return "GridTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5) return "GridTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6) return "GridTable1LightAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT6) return "GridTable2Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT6) return "GridTable3Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT6) return "GridTable4Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6) return "GridTable5DarkAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6) return "GridTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6) return "GridTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT) return "ListTable1Light";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2) return "ListTable2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3) return "ListTable3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4) return "ListTable4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK) return "ListTable5Dark";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL) return "ListTable6Colorful";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL) return "ListTable7Colorful";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1) return "ListTable1LightAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT1) return "ListTable2Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT1) return "ListTable3Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT1) return "ListTable4Accent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1) return "ListTable5DarkAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1) return "ListTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1) return "ListTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2) return "ListTable1LightAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT2) return "ListTable2Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT2) return "ListTable3Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT2) return "ListTable4Accent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2) return "ListTable5DarkAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2) return "ListTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2) return "ListTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3) return "ListTable1LightAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT3) return "ListTable2Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT3) return "ListTable3Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT3) return "ListTable4Accent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3) return "ListTable5DarkAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3) return "ListTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3) return "ListTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4) return "ListTable1LightAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT4) return "ListTable2Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT4) return "ListTable3Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT4) return "ListTable4Accent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4) return "ListTable5DarkAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4) return "ListTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4) return "ListTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5) return "ListTable1LightAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT5) return "ListTable2Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT5) return "ListTable3Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT5) return "ListTable4Accent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5) return "ListTable5DarkAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5) return "ListTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5) return "ListTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6) return "ListTable1LightAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT6) return "ListTable2Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT6) return "ListTable3Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT6) return "ListTable4Accent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6) return "ListTable5DarkAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6) return "ListTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6) return "ListTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SMART_LINK) return "SmartLink";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::USER) return "User";
        if (value == aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NIL) return "Nil";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier paragraphFormatBaseStyleIdentifierFromString(const std::string& value)
    {
        if (value == "Normal") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL;
        if (value == "Heading1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING1;
        if (value == "Heading2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING2;
        if (value == "Heading3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING3;
        if (value == "Heading4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING4;
        if (value == "Heading5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING5;
        if (value == "Heading6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING6;
        if (value == "Heading7") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING7;
        if (value == "Heading8") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING8;
        if (value == "Heading9") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADING9;
        if (value == "Index1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX1;
        if (value == "Index2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX2;
        if (value == "Index3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX3;
        if (value == "Index4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX4;
        if (value == "Index5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX5;
        if (value == "Index6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX6;
        if (value == "Index7") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX7;
        if (value == "Index8") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX8;
        if (value == "Index9") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX9;
        if (value == "Toc1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC1;
        if (value == "Toc2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC2;
        if (value == "Toc3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC3;
        if (value == "Toc4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC4;
        if (value == "Toc5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC5;
        if (value == "Toc6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC6;
        if (value == "Toc7") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC7;
        if (value == "Toc8") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC8;
        if (value == "Toc9") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC9;
        if (value == "NormalIndent") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL_INDENT;
        if (value == "FootnoteText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTNOTE_TEXT;
        if (value == "CommentText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_TEXT;
        if (value == "Header") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HEADER;
        if (value == "Footer") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTER;
        if (value == "IndexHeading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INDEX_HEADING;
        if (value == "Caption") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::CAPTION;
        if (value == "TableOfFigures") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_OF_FIGURES;
        if (value == "EnvelopeAddress") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENVELOPE_ADDRESS;
        if (value == "EnvelopeReturn") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENVELOPE_RETURN;
        if (value == "FootnoteReference") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOOTNOTE_REFERENCE;
        if (value == "CommentReference") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_REFERENCE;
        if (value == "LineNumber") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LINE_NUMBER;
        if (value == "PageNumber") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PAGE_NUMBER;
        if (value == "EndnoteReference") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENDNOTE_REFERENCE;
        if (value == "EndnoteText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::ENDNOTE_TEXT;
        if (value == "TableOfAuthorities") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_OF_AUTHORITIES;
        if (value == "Macro") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MACRO;
        if (value == "ToaHeading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOA_HEADING;
        if (value == "List") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST;
        if (value == "ListBullet") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET;
        if (value == "ListNumber") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER;
        if (value == "List2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST2;
        if (value == "List3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST3;
        if (value == "List4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST4;
        if (value == "List5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST5;
        if (value == "ListBullet2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET2;
        if (value == "ListBullet3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET3;
        if (value == "ListBullet4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET4;
        if (value == "ListBullet5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_BULLET5;
        if (value == "ListNumber2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER2;
        if (value == "ListNumber3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER3;
        if (value == "ListNumber4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER4;
        if (value == "ListNumber5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_NUMBER5;
        if (value == "Title") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TITLE;
        if (value == "Closing") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::CLOSING;
        if (value == "Signature") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SIGNATURE;
        if (value == "DefaultParagraphFont") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DEFAULT_PARAGRAPH_FONT;
        if (value == "BodyText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT;
        if (value == "BodyTextInd") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND;
        if (value == "ListContinue") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE;
        if (value == "ListContinue2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE2;
        if (value == "ListContinue3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE3;
        if (value == "ListContinue4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE4;
        if (value == "ListContinue5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_CONTINUE5;
        if (value == "MessageHeader") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MESSAGE_HEADER;
        if (value == "Subtitle") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTITLE;
        if (value == "Salutation") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SALUTATION;
        if (value == "Date") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DATE;
        if (value == "BodyText1I") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT1_I;
        if (value == "BodyText1I2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT1_I2;
        if (value == "NoteHeading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NOTE_HEADING;
        if (value == "BodyText2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT2;
        if (value == "BodyText3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT3;
        if (value == "BodyTextInd2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND2;
        if (value == "BodyTextInd3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BODY_TEXT_IND3;
        if (value == "BlockText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BLOCK_TEXT;
        if (value == "Hyperlink") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HYPERLINK;
        if (value == "FollowedHyperlink") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::FOLLOWED_HYPERLINK;
        if (value == "Strong") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::STRONG;
        if (value == "Emphasis") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::EMPHASIS;
        if (value == "DocumentMap") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DOCUMENT_MAP;
        if (value == "PlainText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TEXT;
        if (value == "EmailSignature") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::EMAIL_SIGNATURE;
        if (value == "HtmlTopOfForm") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_TOP_OF_FORM;
        if (value == "HtmlBottomOfForm") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_BOTTOM_OF_FORM;
        if (value == "NormalWeb") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NORMAL_WEB;
        if (value == "HtmlAcronym") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_ACRONYM;
        if (value == "HtmlAddress") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_ADDRESS;
        if (value == "HtmlCite") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_CITE;
        if (value == "HtmlCode") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_CODE;
        if (value == "HtmlDefinition") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_DEFINITION;
        if (value == "HtmlKeyboard") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_KEYBOARD;
        if (value == "HtmlPreformatted") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_PREFORMATTED;
        if (value == "HtmlSample") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_SAMPLE;
        if (value == "HtmlTypewriter") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_TYPEWRITER;
        if (value == "HtmlVariable") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::HTML_VARIABLE;
        if (value == "TableNormal") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_NORMAL;
        if (value == "CommentSubject") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COMMENT_SUBJECT;
        if (value == "NoList") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NO_LIST;
        if (value == "OutlineList1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST1;
        if (value == "OutlineList2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST2;
        if (value == "OutlineList3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::OUTLINE_LIST3;
        if (value == "TableSimple1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE1;
        if (value == "TableSimple2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE2;
        if (value == "TableSimple3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SIMPLE3;
        if (value == "TableClassic1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC1;
        if (value == "TableClassic2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC2;
        if (value == "TableClassic3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC3;
        if (value == "TableClassic4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CLASSIC4;
        if (value == "TableColorful1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL1;
        if (value == "TableColorful2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL2;
        if (value == "TableColorful3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLORFUL3;
        if (value == "TableColumns1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS1;
        if (value == "TableColumns2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS2;
        if (value == "TableColumns3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS3;
        if (value == "TableColumns4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS4;
        if (value == "TableColumns5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_COLUMNS5;
        if (value == "TableGrid1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID1;
        if (value == "TableGrid2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID2;
        if (value == "TableGrid3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID3;
        if (value == "TableGrid4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID4;
        if (value == "TableGrid5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID5;
        if (value == "TableGrid6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID6;
        if (value == "TableGrid7") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID7;
        if (value == "TableGrid8") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID8;
        if (value == "TableList1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST1;
        if (value == "TableList2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST2;
        if (value == "TableList3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST3;
        if (value == "TableList4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST4;
        if (value == "TableList5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST5;
        if (value == "TableList6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST6;
        if (value == "TableList7") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST7;
        if (value == "TableList8") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_LIST8;
        if (value == "Table3DEffects1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS1;
        if (value == "Table3DEffects2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS2;
        if (value == "Table3DEffects3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE3_D_EFFECTS3;
        if (value == "TableContemporary") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_CONTEMPORARY;
        if (value == "TableElegant") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_ELEGANT;
        if (value == "TableProfessional") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_PROFESSIONAL;
        if (value == "TableSubtle1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SUBTLE1;
        if (value == "TableSubtle2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_SUBTLE2;
        if (value == "TableWeb1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB1;
        if (value == "TableWeb2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB2;
        if (value == "TableWeb3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_WEB3;
        if (value == "BalloonText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BALLOON_TEXT;
        if (value == "TableGrid") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID;
        if (value == "TableTheme") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_THEME;
        if (value == "PlaceholderText") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLACEHOLDER_TEXT;
        if (value == "NoSpacing") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NO_SPACING;
        if (value == "LightShading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING;
        if (value == "LightList") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST;
        if (value == "LightGrid") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID;
        if (value == "MediumShading1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1;
        if (value == "MediumShading2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2;
        if (value == "MediumList1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1;
        if (value == "MediumList2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2;
        if (value == "MediumGrid1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1;
        if (value == "MediumGrid2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2;
        if (value == "MediumGrid3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3;
        if (value == "DarkList") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST;
        if (value == "ColorfulShading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING;
        if (value == "ColorfulList") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST;
        if (value == "ColorfulGrid") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID;
        if (value == "LightShadingAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT1;
        if (value == "LightListAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT1;
        if (value == "LightGridAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT1;
        if (value == "MediumShading1Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT1;
        if (value == "MediumShading2Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT1;
        if (value == "MediumList1Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT1;
        if (value == "Revision") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::REVISION;
        if (value == "ListParagraph") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_PARAGRAPH;
        if (value == "Quote") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::QUOTE;
        if (value == "IntenseQuote") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_QUOTE;
        if (value == "MediumList2Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT1;
        if (value == "MediumGrid1Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT1;
        if (value == "MediumGrid2Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT1;
        if (value == "MediumGrid3Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT1;
        if (value == "DarkListAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT1;
        if (value == "ColorfulShadingAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT1;
        if (value == "ColorfulListAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT1;
        if (value == "ColorfulGridAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT1;
        if (value == "LightShadingAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT2;
        if (value == "LightListAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT2;
        if (value == "LightGridAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT2;
        if (value == "MediumShading1Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT2;
        if (value == "MediumShading2Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT2;
        if (value == "MediumList1Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT2;
        if (value == "MediumList2Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT2;
        if (value == "MediumGrid1Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT2;
        if (value == "MediumGrid2Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT2;
        if (value == "MediumGrid3Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT2;
        if (value == "DarkListAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT2;
        if (value == "ColorfulShadingAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT2;
        if (value == "ColorfulListAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT2;
        if (value == "ColorfulGridAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT2;
        if (value == "LightShadingAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT3;
        if (value == "LightListAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT3;
        if (value == "LightGridAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT3;
        if (value == "MediumShading1Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT3;
        if (value == "MediumShading2Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT3;
        if (value == "MediumList1Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT3;
        if (value == "MediumList2Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT3;
        if (value == "MediumGrid1Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT3;
        if (value == "MediumGrid2Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT3;
        if (value == "MediumGrid3Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT3;
        if (value == "DarkListAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT3;
        if (value == "ColorfulShadingAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT3;
        if (value == "ColorfulListAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT3;
        if (value == "ColorfulGridAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT3;
        if (value == "LightShadingAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT4;
        if (value == "LightListAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT4;
        if (value == "LightGridAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT4;
        if (value == "MediumShading1Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT4;
        if (value == "MediumShading2Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT4;
        if (value == "MediumList1Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT4;
        if (value == "MediumList2Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT4;
        if (value == "MediumGrid1Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT4;
        if (value == "MediumGrid2Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT4;
        if (value == "MediumGrid3Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT4;
        if (value == "DarkListAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT4;
        if (value == "ColorfulShadingAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT4;
        if (value == "ColorfulListAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT4;
        if (value == "ColorfulGridAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT4;
        if (value == "LightShadingAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT5;
        if (value == "LightListAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT5;
        if (value == "LightGridAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT5;
        if (value == "MediumShading1Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT5;
        if (value == "MediumShading2Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT5;
        if (value == "MediumList1Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT5;
        if (value == "MediumList2Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT5;
        if (value == "MediumGrid1Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT5;
        if (value == "MediumGrid2Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT5;
        if (value == "MediumGrid3Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT5;
        if (value == "DarkListAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT5;
        if (value == "ColorfulShadingAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT5;
        if (value == "ColorfulListAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT5;
        if (value == "ColorfulGridAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT5;
        if (value == "LightShadingAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_SHADING_ACCENT6;
        if (value == "LightListAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_LIST_ACCENT6;
        if (value == "LightGridAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIGHT_GRID_ACCENT6;
        if (value == "MediumShading1Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING1_ACCENT6;
        if (value == "MediumShading2Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_SHADING2_ACCENT6;
        if (value == "MediumList1Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST1_ACCENT6;
        if (value == "MediumList2Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_LIST2_ACCENT6;
        if (value == "MediumGrid1Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID1_ACCENT6;
        if (value == "MediumGrid2Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID2_ACCENT6;
        if (value == "MediumGrid3Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::MEDIUM_GRID3_ACCENT6;
        if (value == "DarkListAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::DARK_LIST_ACCENT6;
        if (value == "ColorfulShadingAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_SHADING_ACCENT6;
        if (value == "ColorfulListAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_LIST_ACCENT6;
        if (value == "ColorfulGridAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::COLORFUL_GRID_ACCENT6;
        if (value == "SubtleEmphasis") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTLE_EMPHASIS;
        if (value == "IntenseEmphasis") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_EMPHASIS;
        if (value == "SubtleReference") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SUBTLE_REFERENCE;
        if (value == "IntenseReference") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::INTENSE_REFERENCE;
        if (value == "BookTitle") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BOOK_TITLE;
        if (value == "Bibliography") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::BIBLIOGRAPHY;
        if (value == "TocHeading") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TOC_HEADING;
        if (value == "PlainTable1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE1;
        if (value == "PlainTable2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE2;
        if (value == "PlainTable3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE3;
        if (value == "PlainTable4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE4;
        if (value == "PlainTable5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::PLAIN_TABLE5;
        if (value == "TableGridLight") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::TABLE_GRID_LIGHT;
        if (value == "GridTable1Light") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT;
        if (value == "GridTable2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2;
        if (value == "GridTable3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3;
        if (value == "GridTable4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4;
        if (value == "GridTable5Dark") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK;
        if (value == "GridTable6Colorful") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL;
        if (value == "GridTable7Colorful") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL;
        if (value == "GridTable1LightAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1;
        if (value == "GridTable2Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT1;
        if (value == "GridTable3Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT1;
        if (value == "GridTable4Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT1;
        if (value == "GridTable5DarkAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1;
        if (value == "GridTable6ColorfulAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1;
        if (value == "GridTable7ColorfulAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1;
        if (value == "GridTable1LightAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2;
        if (value == "GridTable2Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT2;
        if (value == "GridTable3Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT2;
        if (value == "GridTable4Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT2;
        if (value == "GridTable5DarkAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2;
        if (value == "GridTable6ColorfulAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2;
        if (value == "GridTable7ColorfulAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2;
        if (value == "GridTable1LightAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3;
        if (value == "GridTable2Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT3;
        if (value == "GridTable3Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT3;
        if (value == "GridTable4Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT3;
        if (value == "GridTable5DarkAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3;
        if (value == "GridTable6ColorfulAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3;
        if (value == "GridTable7ColorfulAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3;
        if (value == "GridTable1LightAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4;
        if (value == "GridTable2Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT4;
        if (value == "GridTable3Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT4;
        if (value == "GridTable4Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT4;
        if (value == "GridTable5DarkAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4;
        if (value == "GridTable6ColorfulAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4;
        if (value == "GridTable7ColorfulAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4;
        if (value == "GridTable1LightAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5;
        if (value == "GridTable2Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT5;
        if (value == "GridTable3Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT5;
        if (value == "GridTable4Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT5;
        if (value == "GridTable5DarkAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5;
        if (value == "GridTable6ColorfulAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5;
        if (value == "GridTable7ColorfulAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5;
        if (value == "GridTable1LightAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6;
        if (value == "GridTable2Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE2_ACCENT6;
        if (value == "GridTable3Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE3_ACCENT6;
        if (value == "GridTable4Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE4_ACCENT6;
        if (value == "GridTable5DarkAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6;
        if (value == "GridTable6ColorfulAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6;
        if (value == "GridTable7ColorfulAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6;
        if (value == "ListTable1Light") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT;
        if (value == "ListTable2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2;
        if (value == "ListTable3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3;
        if (value == "ListTable4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4;
        if (value == "ListTable5Dark") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK;
        if (value == "ListTable6Colorful") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL;
        if (value == "ListTable7Colorful") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL;
        if (value == "ListTable1LightAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1;
        if (value == "ListTable2Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT1;
        if (value == "ListTable3Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT1;
        if (value == "ListTable4Accent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT1;
        if (value == "ListTable5DarkAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1;
        if (value == "ListTable6ColorfulAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1;
        if (value == "ListTable7ColorfulAccent1") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1;
        if (value == "ListTable1LightAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2;
        if (value == "ListTable2Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT2;
        if (value == "ListTable3Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT2;
        if (value == "ListTable4Accent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT2;
        if (value == "ListTable5DarkAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2;
        if (value == "ListTable6ColorfulAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2;
        if (value == "ListTable7ColorfulAccent2") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2;
        if (value == "ListTable1LightAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3;
        if (value == "ListTable2Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT3;
        if (value == "ListTable3Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT3;
        if (value == "ListTable4Accent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT3;
        if (value == "ListTable5DarkAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3;
        if (value == "ListTable6ColorfulAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3;
        if (value == "ListTable7ColorfulAccent3") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3;
        if (value == "ListTable1LightAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4;
        if (value == "ListTable2Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT4;
        if (value == "ListTable3Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT4;
        if (value == "ListTable4Accent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT4;
        if (value == "ListTable5DarkAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4;
        if (value == "ListTable6ColorfulAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4;
        if (value == "ListTable7ColorfulAccent4") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4;
        if (value == "ListTable1LightAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5;
        if (value == "ListTable2Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT5;
        if (value == "ListTable3Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT5;
        if (value == "ListTable4Accent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT5;
        if (value == "ListTable5DarkAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5;
        if (value == "ListTable6ColorfulAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5;
        if (value == "ListTable7ColorfulAccent5") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5;
        if (value == "ListTable1LightAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6;
        if (value == "ListTable2Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE2_ACCENT6;
        if (value == "ListTable3Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE3_ACCENT6;
        if (value == "ListTable4Accent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE4_ACCENT6;
        if (value == "ListTable5DarkAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6;
        if (value == "ListTable6ColorfulAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6;
        if (value == "ListTable7ColorfulAccent6") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6;
        if (value == "SmartLink") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::SMART_LINK;
        if (value == "User") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::USER;
        if (value == "Nil") return aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier::NIL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ParagraphFormatBase::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AddSpaceBetweenFarEastAndAlpha) {
            json["AddSpaceBetweenFarEastAndAlpha"] = *m_AddSpaceBetweenFarEastAndAlpha;
        }
        if (m_AddSpaceBetweenFarEastAndDigit) {
            json["AddSpaceBetweenFarEastAndDigit"] = *m_AddSpaceBetweenFarEastAndDigit;
        }
        if (m_Alignment) {
            json["Alignment"] = paragraphFormatBaseAlignmentToString(*m_Alignment);
        }
        if (m_Bidi) {
            json["Bidi"] = *m_Bidi;
        }
        if (m_DropCapPosition) {
            json["DropCapPosition"] = paragraphFormatBaseDropCapPositionToString(*m_DropCapPosition);
        }
        if (m_FirstLineIndent) {
            json["FirstLineIndent"] = *m_FirstLineIndent;
        }
        if (m_KeepTogether) {
            json["KeepTogether"] = *m_KeepTogether;
        }
        if (m_KeepWithNext) {
            json["KeepWithNext"] = *m_KeepWithNext;
        }
        if (m_LeftIndent) {
            json["LeftIndent"] = *m_LeftIndent;
        }
        if (m_LineSpacing) {
            json["LineSpacing"] = *m_LineSpacing;
        }
        if (m_LineSpacingRule) {
            json["LineSpacingRule"] = paragraphFormatBaseLineSpacingRuleToString(*m_LineSpacingRule);
        }
        if (m_LinesToDrop) {
            json["LinesToDrop"] = *m_LinesToDrop;
        }
        if (m_NoSpaceBetweenParagraphsOfSameStyle) {
            json["NoSpaceBetweenParagraphsOfSameStyle"] = *m_NoSpaceBetweenParagraphsOfSameStyle;
        }
        if (m_OutlineLevel) {
            json["OutlineLevel"] = paragraphFormatBaseOutlineLevelToString(*m_OutlineLevel);
        }
        if (m_PageBreakBefore) {
            json["PageBreakBefore"] = *m_PageBreakBefore;
        }
        if (m_RightIndent) {
            json["RightIndent"] = *m_RightIndent;
        }
        if (m_Shading) {
            m_Shading->toJson(&json["Shading"]);
        }
        if (m_SpaceAfter) {
            json["SpaceAfter"] = *m_SpaceAfter;
        }
        if (m_SpaceAfterAuto) {
            json["SpaceAfterAuto"] = *m_SpaceAfterAuto;
        }
        if (m_SpaceBefore) {
            json["SpaceBefore"] = *m_SpaceBefore;
        }
        if (m_SpaceBeforeAuto) {
            json["SpaceBeforeAuto"] = *m_SpaceBeforeAuto;
        }
        if (m_StyleIdentifier) {
            json["StyleIdentifier"] = paragraphFormatBaseStyleIdentifierToString(*m_StyleIdentifier);
        }
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
        if (m_SuppressAutoHyphens) {
            json["SuppressAutoHyphens"] = *m_SuppressAutoHyphens;
        }
        if (m_SuppressLineNumbers) {
            json["SuppressLineNumbers"] = *m_SuppressLineNumbers;
        }
        if (m_WidowControl) {
            json["WidowControl"] = *m_WidowControl;
        }
    }

    void ParagraphFormatBase::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AddSpaceBetweenFarEastAndAlpha") && !json["AddSpaceBetweenFarEastAndAlpha"].is_null()) {
            m_AddSpaceBetweenFarEastAndAlpha = std::make_shared< bool >(
                json["AddSpaceBetweenFarEastAndAlpha"].get< bool >()
            );
        }
        if (json.contains("AddSpaceBetweenFarEastAndDigit") && !json["AddSpaceBetweenFarEastAndDigit"].is_null()) {
            m_AddSpaceBetweenFarEastAndDigit = std::make_shared< bool >(
                json["AddSpaceBetweenFarEastAndDigit"].get< bool >()
            );
        }
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::ParagraphFormatBase::Alignment >(
                paragraphFormatBaseAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("Bidi") && !json["Bidi"].is_null()) {
            m_Bidi = std::make_shared< bool >(
                json["Bidi"].get< bool >()
            );
        }
        if (json.contains("DropCapPosition") && !json["DropCapPosition"].is_null()) {
            m_DropCapPosition = std::make_shared< aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition >(
                paragraphFormatBaseDropCapPositionFromString(json["DropCapPosition"].get< std::string >())
            );
        }
        if (json.contains("FirstLineIndent") && !json["FirstLineIndent"].is_null()) {
            m_FirstLineIndent = std::make_shared< double >(
                json["FirstLineIndent"].get< double >()
            );
        }
        if (json.contains("KeepTogether") && !json["KeepTogether"].is_null()) {
            m_KeepTogether = std::make_shared< bool >(
                json["KeepTogether"].get< bool >()
            );
        }
        if (json.contains("KeepWithNext") && !json["KeepWithNext"].is_null()) {
            m_KeepWithNext = std::make_shared< bool >(
                json["KeepWithNext"].get< bool >()
            );
        }
        if (json.contains("LeftIndent") && !json["LeftIndent"].is_null()) {
            m_LeftIndent = std::make_shared< double >(
                json["LeftIndent"].get< double >()
            );
        }
        if (json.contains("LineSpacing") && !json["LineSpacing"].is_null()) {
            m_LineSpacing = std::make_shared< double >(
                json["LineSpacing"].get< double >()
            );
        }
        if (json.contains("LineSpacingRule") && !json["LineSpacingRule"].is_null()) {
            m_LineSpacingRule = std::make_shared< aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule >(
                paragraphFormatBaseLineSpacingRuleFromString(json["LineSpacingRule"].get< std::string >())
            );
        }
        if (json.contains("LinesToDrop") && !json["LinesToDrop"].is_null()) {
            m_LinesToDrop = std::make_shared< int32_t >(
                json["LinesToDrop"].get< int32_t >()
            );
        }
        if (json.contains("NoSpaceBetweenParagraphsOfSameStyle") && !json["NoSpaceBetweenParagraphsOfSameStyle"].is_null()) {
            m_NoSpaceBetweenParagraphsOfSameStyle = std::make_shared< bool >(
                json["NoSpaceBetweenParagraphsOfSameStyle"].get< bool >()
            );
        }
        if (json.contains("OutlineLevel") && !json["OutlineLevel"].is_null()) {
            m_OutlineLevel = std::make_shared< aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel >(
                paragraphFormatBaseOutlineLevelFromString(json["OutlineLevel"].get< std::string >())
            );
        }
        if (json.contains("PageBreakBefore") && !json["PageBreakBefore"].is_null()) {
            m_PageBreakBefore = std::make_shared< bool >(
                json["PageBreakBefore"].get< bool >()
            );
        }
        if (json.contains("RightIndent") && !json["RightIndent"].is_null()) {
            m_RightIndent = std::make_shared< double >(
                json["RightIndent"].get< double >()
            );
        }
        if (json.contains("Shading") && !json["Shading"].is_null()) {
            m_Shading = std::make_shared< aspose::words::cloud::models::Shading >();
            m_Shading->fromJson(&json["Shading"]);
        }
        if (json.contains("SpaceAfter") && !json["SpaceAfter"].is_null()) {
            m_SpaceAfter = std::make_shared< double >(
                json["SpaceAfter"].get< double >()
            );
        }
        if (json.contains("SpaceAfterAuto") && !json["SpaceAfterAuto"].is_null()) {
            m_SpaceAfterAuto = std::make_shared< bool >(
                json["SpaceAfterAuto"].get< bool >()
            );
        }
        if (json.contains("SpaceBefore") && !json["SpaceBefore"].is_null()) {
            m_SpaceBefore = std::make_shared< double >(
                json["SpaceBefore"].get< double >()
            );
        }
        if (json.contains("SpaceBeforeAuto") && !json["SpaceBeforeAuto"].is_null()) {
            m_SpaceBeforeAuto = std::make_shared< bool >(
                json["SpaceBeforeAuto"].get< bool >()
            );
        }
        if (json.contains("StyleIdentifier") && !json["StyleIdentifier"].is_null()) {
            m_StyleIdentifier = std::make_shared< aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier >(
                paragraphFormatBaseStyleIdentifierFromString(json["StyleIdentifier"].get< std::string >())
            );
        }
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
        if (json.contains("SuppressAutoHyphens") && !json["SuppressAutoHyphens"].is_null()) {
            m_SuppressAutoHyphens = std::make_shared< bool >(
                json["SuppressAutoHyphens"].get< bool >()
            );
        }
        if (json.contains("SuppressLineNumbers") && !json["SuppressLineNumbers"].is_null()) {
            m_SuppressLineNumbers = std::make_shared< bool >(
                json["SuppressLineNumbers"].get< bool >()
            );
        }
        if (json.contains("WidowControl") && !json["WidowControl"].is_null()) {
            m_WidowControl = std::make_shared< bool >(
                json["WidowControl"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > ParagraphFormatBase::getAddSpaceBetweenFarEastAndAlpha() const
    {
        return m_AddSpaceBetweenFarEastAndAlpha;
    }

    void ParagraphFormatBase::setAddSpaceBetweenFarEastAndAlpha(std::shared_ptr< bool > value)
    {
        m_AddSpaceBetweenFarEastAndAlpha = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getAddSpaceBetweenFarEastAndDigit() const
    {
        return m_AddSpaceBetweenFarEastAndDigit;
    }

    void ParagraphFormatBase::setAddSpaceBetweenFarEastAndDigit(std::shared_ptr< bool > value)
    {
        m_AddSpaceBetweenFarEastAndDigit = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::Alignment > ParagraphFormatBase::getAlignment() const
    {
        return m_Alignment;
    }

    void ParagraphFormatBase::setAlignment(std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getBidi() const
    {
        return m_Bidi;
    }

    void ParagraphFormatBase::setBidi(std::shared_ptr< bool > value)
    {
        m_Bidi = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition > ParagraphFormatBase::getDropCapPosition() const
    {
        return m_DropCapPosition;
    }

    void ParagraphFormatBase::setDropCapPosition(std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::DropCapPosition > value)
    {
        m_DropCapPosition = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getFirstLineIndent() const
    {
        return m_FirstLineIndent;
    }

    void ParagraphFormatBase::setFirstLineIndent(std::shared_ptr< double > value)
    {
        m_FirstLineIndent = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getKeepTogether() const
    {
        return m_KeepTogether;
    }

    void ParagraphFormatBase::setKeepTogether(std::shared_ptr< bool > value)
    {
        m_KeepTogether = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getKeepWithNext() const
    {
        return m_KeepWithNext;
    }

    void ParagraphFormatBase::setKeepWithNext(std::shared_ptr< bool > value)
    {
        m_KeepWithNext = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getLeftIndent() const
    {
        return m_LeftIndent;
    }

    void ParagraphFormatBase::setLeftIndent(std::shared_ptr< double > value)
    {
        m_LeftIndent = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getLineSpacing() const
    {
        return m_LineSpacing;
    }

    void ParagraphFormatBase::setLineSpacing(std::shared_ptr< double > value)
    {
        m_LineSpacing = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule > ParagraphFormatBase::getLineSpacingRule() const
    {
        return m_LineSpacingRule;
    }

    void ParagraphFormatBase::setLineSpacingRule(std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::LineSpacingRule > value)
    {
        m_LineSpacingRule = value;
    }

    std::shared_ptr< int32_t > ParagraphFormatBase::getLinesToDrop() const
    {
        return m_LinesToDrop;
    }

    void ParagraphFormatBase::setLinesToDrop(std::shared_ptr< int32_t > value)
    {
        m_LinesToDrop = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getNoSpaceBetweenParagraphsOfSameStyle() const
    {
        return m_NoSpaceBetweenParagraphsOfSameStyle;
    }

    void ParagraphFormatBase::setNoSpaceBetweenParagraphsOfSameStyle(std::shared_ptr< bool > value)
    {
        m_NoSpaceBetweenParagraphsOfSameStyle = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel > ParagraphFormatBase::getOutlineLevel() const
    {
        return m_OutlineLevel;
    }

    void ParagraphFormatBase::setOutlineLevel(std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::OutlineLevel > value)
    {
        m_OutlineLevel = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getPageBreakBefore() const
    {
        return m_PageBreakBefore;
    }

    void ParagraphFormatBase::setPageBreakBefore(std::shared_ptr< bool > value)
    {
        m_PageBreakBefore = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getRightIndent() const
    {
        return m_RightIndent;
    }

    void ParagraphFormatBase::setRightIndent(std::shared_ptr< double > value)
    {
        m_RightIndent = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Shading > ParagraphFormatBase::getShading() const
    {
        return m_Shading;
    }

    void ParagraphFormatBase::setShading(std::shared_ptr< aspose::words::cloud::models::Shading > value)
    {
        m_Shading = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getSpaceAfter() const
    {
        return m_SpaceAfter;
    }

    void ParagraphFormatBase::setSpaceAfter(std::shared_ptr< double > value)
    {
        m_SpaceAfter = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getSpaceAfterAuto() const
    {
        return m_SpaceAfterAuto;
    }

    void ParagraphFormatBase::setSpaceAfterAuto(std::shared_ptr< bool > value)
    {
        m_SpaceAfterAuto = value;
    }

    std::shared_ptr< double > ParagraphFormatBase::getSpaceBefore() const
    {
        return m_SpaceBefore;
    }

    void ParagraphFormatBase::setSpaceBefore(std::shared_ptr< double > value)
    {
        m_SpaceBefore = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getSpaceBeforeAuto() const
    {
        return m_SpaceBeforeAuto;
    }

    void ParagraphFormatBase::setSpaceBeforeAuto(std::shared_ptr< bool > value)
    {
        m_SpaceBeforeAuto = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier > ParagraphFormatBase::getStyleIdentifier() const
    {
        return m_StyleIdentifier;
    }

    void ParagraphFormatBase::setStyleIdentifier(std::shared_ptr< aspose::words::cloud::models::ParagraphFormatBase::StyleIdentifier > value)
    {
        m_StyleIdentifier = value;
    }

    std::shared_ptr< std::wstring > ParagraphFormatBase::getStyleName() const
    {
        return m_StyleName;
    }

    void ParagraphFormatBase::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getSuppressAutoHyphens() const
    {
        return m_SuppressAutoHyphens;
    }

    void ParagraphFormatBase::setSuppressAutoHyphens(std::shared_ptr< bool > value)
    {
        m_SuppressAutoHyphens = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getSuppressLineNumbers() const
    {
        return m_SuppressLineNumbers;
    }

    void ParagraphFormatBase::setSuppressLineNumbers(std::shared_ptr< bool > value)
    {
        m_SuppressLineNumbers = value;
    }

    std::shared_ptr< bool > ParagraphFormatBase::getWidowControl() const
    {
        return m_WidowControl;
    }

    void ParagraphFormatBase::setWidowControl(std::shared_ptr< bool > value)
    {
        m_WidowControl = value;
    }


    /*
     * ParagraphFormatResponse implementation
     */
    void ParagraphFormatResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ParagraphFormat) {
            m_ParagraphFormat->toJson(&json["ParagraphFormat"]);
        }
    }

    void ParagraphFormatResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ParagraphFormat") && !json["ParagraphFormat"].is_null()) {
            m_ParagraphFormat = std::make_shared< aspose::words::cloud::models::ParagraphFormat >();
            m_ParagraphFormat->fromJson(&json["ParagraphFormat"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphFormat > ParagraphFormatResponse::getParagraphFormat() const
    {
        return m_ParagraphFormat;
    }

    void ParagraphFormatResponse::setParagraphFormat(std::shared_ptr< aspose::words::cloud::models::ParagraphFormat > value)
    {
        m_ParagraphFormat = value;
    }


    /*
     * ParagraphFormatUpdate implementation
     */
    void ParagraphFormatUpdate::toJson(void* jsonIfc) const
    {
        ParagraphFormatBase::toJson(jsonIfc);
    }

    void ParagraphFormatUpdate::fromJson(const void* jsonIfc)
    {
        ParagraphFormatBase::fromJson(jsonIfc);
    }




    /*
     * ParagraphInsert implementation
     */
    void ParagraphInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void ParagraphInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ParagraphInsert::getText() const
    {
        return m_Text;
    }

    void ParagraphInsert::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * ParagraphLink implementation
     */
    void ParagraphLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void ParagraphLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ParagraphLink::getText() const
    {
        return m_Text;
    }

    void ParagraphLink::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * ParagraphLinkCollection implementation
     */
    void ParagraphLinkCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ParagraphLinkList) {
            json["ParagraphLinkList"] = ::nlohmann::json::array();
            for (auto& element : *m_ParagraphLinkList) {
                element->toJson(&json["ParagraphLinkList"].emplace_back());
            }
        }
    }

    void ParagraphLinkCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ParagraphLinkList") && !json["ParagraphLinkList"].is_null()) {
            m_ParagraphLinkList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::ParagraphLink>> >();
            for (auto& element : json["ParagraphLinkList"]) {
                m_ParagraphLinkList->emplace_back(std::make_shared< aspose::words::cloud::models::ParagraphLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ParagraphLink>> > ParagraphLinkCollection::getParagraphLinkList() const
    {
        return m_ParagraphLinkList;
    }

    void ParagraphLinkCollection::setParagraphLinkList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ParagraphLink>> > value)
    {
        m_ParagraphLinkList = value;
    }


    /*
     * ParagraphLinkCollectionResponse implementation
     */
    void ParagraphLinkCollectionResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Paragraphs) {
            m_Paragraphs->toJson(&json["Paragraphs"]);
        }
    }

    void ParagraphLinkCollectionResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Paragraphs") && !json["Paragraphs"].is_null()) {
            m_Paragraphs = std::make_shared< aspose::words::cloud::models::ParagraphLinkCollection >();
            m_Paragraphs->fromJson(&json["Paragraphs"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ParagraphLinkCollection > ParagraphLinkCollectionResponse::getParagraphs() const
    {
        return m_Paragraphs;
    }

    void ParagraphLinkCollectionResponse::setParagraphs(std::shared_ptr< aspose::words::cloud::models::ParagraphLinkCollection > value)
    {
        m_Paragraphs = value;
    }


    /*
     * ParagraphListFormatResponse implementation
     */
    void ParagraphListFormatResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ListFormat) {
            m_ListFormat->toJson(&json["ListFormat"]);
        }
    }

    void ParagraphListFormatResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ListFormat") && !json["ListFormat"].is_null()) {
            m_ListFormat = std::make_shared< aspose::words::cloud::models::ListFormat >();
            m_ListFormat->fromJson(&json["ListFormat"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ListFormat > ParagraphListFormatResponse::getListFormat() const
    {
        return m_ListFormat;
    }

    void ParagraphListFormatResponse::setListFormat(std::shared_ptr< aspose::words::cloud::models::ListFormat > value)
    {
        m_ListFormat = value;
    }


    /*
     * ParagraphResponse implementation
     */
    void ParagraphResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Paragraph) {
            m_Paragraph->toJson(&json["Paragraph"]);
        }
    }

    void ParagraphResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Paragraph") && !json["Paragraph"].is_null()) {
            m_Paragraph = std::make_shared< aspose::words::cloud::models::Paragraph >();
            m_Paragraph->fromJson(&json["Paragraph"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Paragraph > ParagraphResponse::getParagraph() const
    {
        return m_Paragraph;
    }

    void ParagraphResponse::setParagraph(std::shared_ptr< aspose::words::cloud::models::Paragraph > value)
    {
        m_Paragraph = value;
    }


    /*
     * PclSaveOptionsData implementation
     */
    void PclSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_FalllbackFontName) {
            json["FalllbackFontName"] = convertUtf16(*m_FalllbackFontName);
        }
        if (m_RasterizeTransformedElements) {
            json["RasterizeTransformedElements"] = *m_RasterizeTransformedElements;
        }
    }

    void PclSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("FalllbackFontName") && !json["FalllbackFontName"].is_null()) {
            m_FalllbackFontName = std::make_shared< std::wstring >(
                convertUtf8( json["FalllbackFontName"].get< std::string >() )
            );
        }
        if (json.contains("RasterizeTransformedElements") && !json["RasterizeTransformedElements"].is_null()) {
            m_RasterizeTransformedElements = std::make_shared< bool >(
                json["RasterizeTransformedElements"].get< bool >()
            );
        }
    }

    std::shared_ptr< std::wstring > PclSaveOptionsData::getFalllbackFontName() const
    {
        return m_FalllbackFontName;
    }

    void PclSaveOptionsData::setFalllbackFontName(std::shared_ptr< std::wstring > value)
    {
        m_FalllbackFontName = value;
    }

    std::shared_ptr< bool > PclSaveOptionsData::getRasterizeTransformedElements() const
    {
        return m_RasterizeTransformedElements;
    }

    void PclSaveOptionsData::setRasterizeTransformedElements(std::shared_ptr< bool > value)
    {
        m_RasterizeTransformedElements = value;
    }


    /*
     * PdfDigitalSignatureDetailsData implementation
     */
    void PdfDigitalSignatureDetailsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CertificateFilename) {
            json["CertificateFilename"] = convertUtf16(*m_CertificateFilename);
        }
        if (m_HashAlgorithm) {
            json["HashAlgorithm"] = convertUtf16(*m_HashAlgorithm);
        }
        if (m_Location) {
            json["Location"] = convertUtf16(*m_Location);
        }
        if (m_Reason) {
            json["Reason"] = convertUtf16(*m_Reason);
        }
        if (m_SignatureDate) {
            json["SignatureDate"] = convertUtf16(*m_SignatureDate);
        }
    }

    void PdfDigitalSignatureDetailsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CertificateFilename") && !json["CertificateFilename"].is_null()) {
            m_CertificateFilename = std::make_shared< std::wstring >(
                convertUtf8( json["CertificateFilename"].get< std::string >() )
            );
        }
        if (json.contains("HashAlgorithm") && !json["HashAlgorithm"].is_null()) {
            m_HashAlgorithm = std::make_shared< std::wstring >(
                convertUtf8( json["HashAlgorithm"].get< std::string >() )
            );
        }
        if (json.contains("Location") && !json["Location"].is_null()) {
            m_Location = std::make_shared< std::wstring >(
                convertUtf8( json["Location"].get< std::string >() )
            );
        }
        if (json.contains("Reason") && !json["Reason"].is_null()) {
            m_Reason = std::make_shared< std::wstring >(
                convertUtf8( json["Reason"].get< std::string >() )
            );
        }
        if (json.contains("SignatureDate") && !json["SignatureDate"].is_null()) {
            m_SignatureDate = std::make_shared< std::wstring >(
                convertUtf8( json["SignatureDate"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > PdfDigitalSignatureDetailsData::getCertificateFilename() const
    {
        return m_CertificateFilename;
    }

    void PdfDigitalSignatureDetailsData::setCertificateFilename(std::shared_ptr< std::wstring > value)
    {
        m_CertificateFilename = value;
    }

    std::shared_ptr< std::wstring > PdfDigitalSignatureDetailsData::getHashAlgorithm() const
    {
        return m_HashAlgorithm;
    }

    void PdfDigitalSignatureDetailsData::setHashAlgorithm(std::shared_ptr< std::wstring > value)
    {
        m_HashAlgorithm = value;
    }

    std::shared_ptr< std::wstring > PdfDigitalSignatureDetailsData::getLocation() const
    {
        return m_Location;
    }

    void PdfDigitalSignatureDetailsData::setLocation(std::shared_ptr< std::wstring > value)
    {
        m_Location = value;
    }

    std::shared_ptr< std::wstring > PdfDigitalSignatureDetailsData::getReason() const
    {
        return m_Reason;
    }

    void PdfDigitalSignatureDetailsData::setReason(std::shared_ptr< std::wstring > value)
    {
        m_Reason = value;
    }

    std::shared_ptr< std::wstring > PdfDigitalSignatureDetailsData::getSignatureDate() const
    {
        return m_SignatureDate;
    }

    void PdfDigitalSignatureDetailsData::setSignatureDate(std::shared_ptr< std::wstring > value)
    {
        m_SignatureDate = value;
    }


    /*
     * PdfEncryptionDetailsData implementation
     */
    void PdfEncryptionDetailsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_EncryptionAlgorithm) {
            json["EncryptionAlgorithm"] = convertUtf16(*m_EncryptionAlgorithm);
        }
        if (m_OwnerPassword) {
            json["OwnerPassword"] = convertUtf16(*m_OwnerPassword);
        }
        if (m_Permissions) {
            json["Permissions"] = convertUtf16(*m_Permissions);
        }
        if (m_UserPassword) {
            json["UserPassword"] = convertUtf16(*m_UserPassword);
        }
    }

    void PdfEncryptionDetailsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("EncryptionAlgorithm") && !json["EncryptionAlgorithm"].is_null()) {
            m_EncryptionAlgorithm = std::make_shared< std::wstring >(
                convertUtf8( json["EncryptionAlgorithm"].get< std::string >() )
            );
        }
        if (json.contains("OwnerPassword") && !json["OwnerPassword"].is_null()) {
            m_OwnerPassword = std::make_shared< std::wstring >(
                convertUtf8( json["OwnerPassword"].get< std::string >() )
            );
        }
        if (json.contains("Permissions") && !json["Permissions"].is_null()) {
            m_Permissions = std::make_shared< std::wstring >(
                convertUtf8( json["Permissions"].get< std::string >() )
            );
        }
        if (json.contains("UserPassword") && !json["UserPassword"].is_null()) {
            m_UserPassword = std::make_shared< std::wstring >(
                convertUtf8( json["UserPassword"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > PdfEncryptionDetailsData::getEncryptionAlgorithm() const
    {
        return m_EncryptionAlgorithm;
    }

    void PdfEncryptionDetailsData::setEncryptionAlgorithm(std::shared_ptr< std::wstring > value)
    {
        m_EncryptionAlgorithm = value;
    }

    std::shared_ptr< std::wstring > PdfEncryptionDetailsData::getOwnerPassword() const
    {
        return m_OwnerPassword;
    }

    void PdfEncryptionDetailsData::setOwnerPassword(std::shared_ptr< std::wstring > value)
    {
        m_OwnerPassword = value;
    }

    std::shared_ptr< std::wstring > PdfEncryptionDetailsData::getPermissions() const
    {
        return m_Permissions;
    }

    void PdfEncryptionDetailsData::setPermissions(std::shared_ptr< std::wstring > value)
    {
        m_Permissions = value;
    }

    std::shared_ptr< std::wstring > PdfEncryptionDetailsData::getUserPassword() const
    {
        return m_UserPassword;
    }

    void PdfEncryptionDetailsData::setUserPassword(std::shared_ptr< std::wstring > value)
    {
        m_UserPassword = value;
    }


    /*
     * PdfSaveOptionsData implementation
     */
    inline std::string pdfSaveOptionsDataHeaderFooterBookmarksExportModeToString(aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode value)
    {
        if (value == aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::NONE) return "None";
        if (value == aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::FIRST) return "First";
        if (value == aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::ALL) return "All";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode pdfSaveOptionsDataHeaderFooterBookmarksExportModeFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::NONE;
        if (value == "First") return aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::FIRST;
        if (value == "All") return aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode::ALL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void PdfSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Compliance) {
            json["Compliance"] = convertUtf16(*m_Compliance);
        }
        if (m_CreateNoteHyperlinks) {
            json["CreateNoteHyperlinks"] = *m_CreateNoteHyperlinks;
        }
        if (m_CustomPropertiesExport) {
            json["CustomPropertiesExport"] = convertUtf16(*m_CustomPropertiesExport);
        }
        if (m_DigitalSignatureDetails) {
            m_DigitalSignatureDetails->toJson(&json["DigitalSignatureDetails"]);
        }
        if (m_DisplayDocTitle) {
            json["DisplayDocTitle"] = *m_DisplayDocTitle;
        }
        if (m_DownsampleOptions) {
            m_DownsampleOptions->toJson(&json["DownsampleOptions"]);
        }
        if (m_EmbedFullFonts) {
            json["EmbedFullFonts"] = *m_EmbedFullFonts;
        }
        if (m_EncryptionDetails) {
            m_EncryptionDetails->toJson(&json["EncryptionDetails"]);
        }
        if (m_ExportDocumentStructure) {
            json["ExportDocumentStructure"] = *m_ExportDocumentStructure;
        }
        if (m_FontEmbeddingMode) {
            json["FontEmbeddingMode"] = convertUtf16(*m_FontEmbeddingMode);
        }
        if (m_HeaderFooterBookmarksExportMode) {
            json["HeaderFooterBookmarksExportMode"] = pdfSaveOptionsDataHeaderFooterBookmarksExportModeToString(*m_HeaderFooterBookmarksExportMode);
        }
        if (m_ImageColorSpaceExportMode) {
            json["ImageColorSpaceExportMode"] = convertUtf16(*m_ImageColorSpaceExportMode);
        }
        if (m_ImageCompression) {
            json["ImageCompression"] = convertUtf16(*m_ImageCompression);
        }
        if (m_InterpolateImages) {
            json["InterpolateImages"] = *m_InterpolateImages;
        }
        if (m_OpenHyperlinksInNewWindow) {
            json["OpenHyperlinksInNewWindow"] = *m_OpenHyperlinksInNewWindow;
        }
        if (m_OutlineOptions) {
            m_OutlineOptions->toJson(&json["OutlineOptions"]);
        }
        if (m_PageMode) {
            json["PageMode"] = convertUtf16(*m_PageMode);
        }
        if (m_PreblendImages) {
            json["PreblendImages"] = *m_PreblendImages;
        }
        if (m_PreserveFormFields) {
            json["PreserveFormFields"] = *m_PreserveFormFields;
        }
        if (m_TextCompression) {
            json["TextCompression"] = convertUtf16(*m_TextCompression);
        }
        if (m_UseBookFoldPrintingSettings) {
            json["UseBookFoldPrintingSettings"] = *m_UseBookFoldPrintingSettings;
        }
        if (m_UseCoreFonts) {
            json["UseCoreFonts"] = *m_UseCoreFonts;
        }
        if (m_ZoomBehavior) {
            json["ZoomBehavior"] = convertUtf16(*m_ZoomBehavior);
        }
        if (m_ZoomFactor) {
            json["ZoomFactor"] = *m_ZoomFactor;
        }
    }

    void PdfSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Compliance") && !json["Compliance"].is_null()) {
            m_Compliance = std::make_shared< std::wstring >(
                convertUtf8( json["Compliance"].get< std::string >() )
            );
        }
        if (json.contains("CreateNoteHyperlinks") && !json["CreateNoteHyperlinks"].is_null()) {
            m_CreateNoteHyperlinks = std::make_shared< bool >(
                json["CreateNoteHyperlinks"].get< bool >()
            );
        }
        if (json.contains("CustomPropertiesExport") && !json["CustomPropertiesExport"].is_null()) {
            m_CustomPropertiesExport = std::make_shared< std::wstring >(
                convertUtf8( json["CustomPropertiesExport"].get< std::string >() )
            );
        }
        if (json.contains("DigitalSignatureDetails") && !json["DigitalSignatureDetails"].is_null()) {
            m_DigitalSignatureDetails = std::make_shared< aspose::words::cloud::models::PdfDigitalSignatureDetailsData >();
            m_DigitalSignatureDetails->fromJson(&json["DigitalSignatureDetails"]);
        }
        if (json.contains("DisplayDocTitle") && !json["DisplayDocTitle"].is_null()) {
            m_DisplayDocTitle = std::make_shared< bool >(
                json["DisplayDocTitle"].get< bool >()
            );
        }
        if (json.contains("DownsampleOptions") && !json["DownsampleOptions"].is_null()) {
            m_DownsampleOptions = std::make_shared< aspose::words::cloud::models::DownsampleOptionsData >();
            m_DownsampleOptions->fromJson(&json["DownsampleOptions"]);
        }
        if (json.contains("EmbedFullFonts") && !json["EmbedFullFonts"].is_null()) {
            m_EmbedFullFonts = std::make_shared< bool >(
                json["EmbedFullFonts"].get< bool >()
            );
        }
        if (json.contains("EncryptionDetails") && !json["EncryptionDetails"].is_null()) {
            m_EncryptionDetails = std::make_shared< aspose::words::cloud::models::PdfEncryptionDetailsData >();
            m_EncryptionDetails->fromJson(&json["EncryptionDetails"]);
        }
        if (json.contains("ExportDocumentStructure") && !json["ExportDocumentStructure"].is_null()) {
            m_ExportDocumentStructure = std::make_shared< bool >(
                json["ExportDocumentStructure"].get< bool >()
            );
        }
        if (json.contains("FontEmbeddingMode") && !json["FontEmbeddingMode"].is_null()) {
            m_FontEmbeddingMode = std::make_shared< std::wstring >(
                convertUtf8( json["FontEmbeddingMode"].get< std::string >() )
            );
        }
        if (json.contains("HeaderFooterBookmarksExportMode") && !json["HeaderFooterBookmarksExportMode"].is_null()) {
            m_HeaderFooterBookmarksExportMode = std::make_shared< aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode >(
                pdfSaveOptionsDataHeaderFooterBookmarksExportModeFromString(json["HeaderFooterBookmarksExportMode"].get< std::string >())
            );
        }
        if (json.contains("ImageColorSpaceExportMode") && !json["ImageColorSpaceExportMode"].is_null()) {
            m_ImageColorSpaceExportMode = std::make_shared< std::wstring >(
                convertUtf8( json["ImageColorSpaceExportMode"].get< std::string >() )
            );
        }
        if (json.contains("ImageCompression") && !json["ImageCompression"].is_null()) {
            m_ImageCompression = std::make_shared< std::wstring >(
                convertUtf8( json["ImageCompression"].get< std::string >() )
            );
        }
        if (json.contains("InterpolateImages") && !json["InterpolateImages"].is_null()) {
            m_InterpolateImages = std::make_shared< bool >(
                json["InterpolateImages"].get< bool >()
            );
        }
        if (json.contains("OpenHyperlinksInNewWindow") && !json["OpenHyperlinksInNewWindow"].is_null()) {
            m_OpenHyperlinksInNewWindow = std::make_shared< bool >(
                json["OpenHyperlinksInNewWindow"].get< bool >()
            );
        }
        if (json.contains("OutlineOptions") && !json["OutlineOptions"].is_null()) {
            m_OutlineOptions = std::make_shared< aspose::words::cloud::models::OutlineOptionsData >();
            m_OutlineOptions->fromJson(&json["OutlineOptions"]);
        }
        if (json.contains("PageMode") && !json["PageMode"].is_null()) {
            m_PageMode = std::make_shared< std::wstring >(
                convertUtf8( json["PageMode"].get< std::string >() )
            );
        }
        if (json.contains("PreblendImages") && !json["PreblendImages"].is_null()) {
            m_PreblendImages = std::make_shared< bool >(
                json["PreblendImages"].get< bool >()
            );
        }
        if (json.contains("PreserveFormFields") && !json["PreserveFormFields"].is_null()) {
            m_PreserveFormFields = std::make_shared< bool >(
                json["PreserveFormFields"].get< bool >()
            );
        }
        if (json.contains("TextCompression") && !json["TextCompression"].is_null()) {
            m_TextCompression = std::make_shared< std::wstring >(
                convertUtf8( json["TextCompression"].get< std::string >() )
            );
        }
        if (json.contains("UseBookFoldPrintingSettings") && !json["UseBookFoldPrintingSettings"].is_null()) {
            m_UseBookFoldPrintingSettings = std::make_shared< bool >(
                json["UseBookFoldPrintingSettings"].get< bool >()
            );
        }
        if (json.contains("UseCoreFonts") && !json["UseCoreFonts"].is_null()) {
            m_UseCoreFonts = std::make_shared< bool >(
                json["UseCoreFonts"].get< bool >()
            );
        }
        if (json.contains("ZoomBehavior") && !json["ZoomBehavior"].is_null()) {
            m_ZoomBehavior = std::make_shared< std::wstring >(
                convertUtf8( json["ZoomBehavior"].get< std::string >() )
            );
        }
        if (json.contains("ZoomFactor") && !json["ZoomFactor"].is_null()) {
            m_ZoomFactor = std::make_shared< int32_t >(
                json["ZoomFactor"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getCompliance() const
    {
        return m_Compliance;
    }

    void PdfSaveOptionsData::setCompliance(std::shared_ptr< std::wstring > value)
    {
        m_Compliance = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getCreateNoteHyperlinks() const
    {
        return m_CreateNoteHyperlinks;
    }

    void PdfSaveOptionsData::setCreateNoteHyperlinks(std::shared_ptr< bool > value)
    {
        m_CreateNoteHyperlinks = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getCustomPropertiesExport() const
    {
        return m_CustomPropertiesExport;
    }

    void PdfSaveOptionsData::setCustomPropertiesExport(std::shared_ptr< std::wstring > value)
    {
        m_CustomPropertiesExport = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PdfDigitalSignatureDetailsData > PdfSaveOptionsData::getDigitalSignatureDetails() const
    {
        return m_DigitalSignatureDetails;
    }

    void PdfSaveOptionsData::setDigitalSignatureDetails(std::shared_ptr< aspose::words::cloud::models::PdfDigitalSignatureDetailsData > value)
    {
        m_DigitalSignatureDetails = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getDisplayDocTitle() const
    {
        return m_DisplayDocTitle;
    }

    void PdfSaveOptionsData::setDisplayDocTitle(std::shared_ptr< bool > value)
    {
        m_DisplayDocTitle = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DownsampleOptionsData > PdfSaveOptionsData::getDownsampleOptions() const
    {
        return m_DownsampleOptions;
    }

    void PdfSaveOptionsData::setDownsampleOptions(std::shared_ptr< aspose::words::cloud::models::DownsampleOptionsData > value)
    {
        m_DownsampleOptions = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getEmbedFullFonts() const
    {
        return m_EmbedFullFonts;
    }

    void PdfSaveOptionsData::setEmbedFullFonts(std::shared_ptr< bool > value)
    {
        m_EmbedFullFonts = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PdfEncryptionDetailsData > PdfSaveOptionsData::getEncryptionDetails() const
    {
        return m_EncryptionDetails;
    }

    void PdfSaveOptionsData::setEncryptionDetails(std::shared_ptr< aspose::words::cloud::models::PdfEncryptionDetailsData > value)
    {
        m_EncryptionDetails = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getExportDocumentStructure() const
    {
        return m_ExportDocumentStructure;
    }

    void PdfSaveOptionsData::setExportDocumentStructure(std::shared_ptr< bool > value)
    {
        m_ExportDocumentStructure = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getFontEmbeddingMode() const
    {
        return m_FontEmbeddingMode;
    }

    void PdfSaveOptionsData::setFontEmbeddingMode(std::shared_ptr< std::wstring > value)
    {
        m_FontEmbeddingMode = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode > PdfSaveOptionsData::getHeaderFooterBookmarksExportMode() const
    {
        return m_HeaderFooterBookmarksExportMode;
    }

    void PdfSaveOptionsData::setHeaderFooterBookmarksExportMode(std::shared_ptr< aspose::words::cloud::models::PdfSaveOptionsData::HeaderFooterBookmarksExportMode > value)
    {
        m_HeaderFooterBookmarksExportMode = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getImageColorSpaceExportMode() const
    {
        return m_ImageColorSpaceExportMode;
    }

    void PdfSaveOptionsData::setImageColorSpaceExportMode(std::shared_ptr< std::wstring > value)
    {
        m_ImageColorSpaceExportMode = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getImageCompression() const
    {
        return m_ImageCompression;
    }

    void PdfSaveOptionsData::setImageCompression(std::shared_ptr< std::wstring > value)
    {
        m_ImageCompression = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getInterpolateImages() const
    {
        return m_InterpolateImages;
    }

    void PdfSaveOptionsData::setInterpolateImages(std::shared_ptr< bool > value)
    {
        m_InterpolateImages = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getOpenHyperlinksInNewWindow() const
    {
        return m_OpenHyperlinksInNewWindow;
    }

    void PdfSaveOptionsData::setOpenHyperlinksInNewWindow(std::shared_ptr< bool > value)
    {
        m_OpenHyperlinksInNewWindow = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OutlineOptionsData > PdfSaveOptionsData::getOutlineOptions() const
    {
        return m_OutlineOptions;
    }

    void PdfSaveOptionsData::setOutlineOptions(std::shared_ptr< aspose::words::cloud::models::OutlineOptionsData > value)
    {
        m_OutlineOptions = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getPageMode() const
    {
        return m_PageMode;
    }

    void PdfSaveOptionsData::setPageMode(std::shared_ptr< std::wstring > value)
    {
        m_PageMode = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getPreblendImages() const
    {
        return m_PreblendImages;
    }

    void PdfSaveOptionsData::setPreblendImages(std::shared_ptr< bool > value)
    {
        m_PreblendImages = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getPreserveFormFields() const
    {
        return m_PreserveFormFields;
    }

    void PdfSaveOptionsData::setPreserveFormFields(std::shared_ptr< bool > value)
    {
        m_PreserveFormFields = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getTextCompression() const
    {
        return m_TextCompression;
    }

    void PdfSaveOptionsData::setTextCompression(std::shared_ptr< std::wstring > value)
    {
        m_TextCompression = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getUseBookFoldPrintingSettings() const
    {
        return m_UseBookFoldPrintingSettings;
    }

    void PdfSaveOptionsData::setUseBookFoldPrintingSettings(std::shared_ptr< bool > value)
    {
        m_UseBookFoldPrintingSettings = value;
    }

    std::shared_ptr< bool > PdfSaveOptionsData::getUseCoreFonts() const
    {
        return m_UseCoreFonts;
    }

    void PdfSaveOptionsData::setUseCoreFonts(std::shared_ptr< bool > value)
    {
        m_UseCoreFonts = value;
    }

    std::shared_ptr< std::wstring > PdfSaveOptionsData::getZoomBehavior() const
    {
        return m_ZoomBehavior;
    }

    void PdfSaveOptionsData::setZoomBehavior(std::shared_ptr< std::wstring > value)
    {
        m_ZoomBehavior = value;
    }

    std::shared_ptr< int32_t > PdfSaveOptionsData::getZoomFactor() const
    {
        return m_ZoomFactor;
    }

    void PdfSaveOptionsData::setZoomFactor(std::shared_ptr< int32_t > value)
    {
        m_ZoomFactor = value;
    }


    /*
     * PngSaveOptionsData implementation
     */
    void PngSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
    }

    void PngSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
    }




    /*
     * PreferredWidth implementation
     */
    inline std::string preferredWidthTypeToString(aspose::words::cloud::models::PreferredWidth::Type value)
    {
        if (value == aspose::words::cloud::models::PreferredWidth::Type::AUTO) return "Auto";
        if (value == aspose::words::cloud::models::PreferredWidth::Type::PERCENT) return "Percent";
        if (value == aspose::words::cloud::models::PreferredWidth::Type::POINTS) return "Points";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::PreferredWidth::Type preferredWidthTypeFromString(const std::string& value)
    {
        if (value == "Auto") return aspose::words::cloud::models::PreferredWidth::Type::AUTO;
        if (value == "Percent") return aspose::words::cloud::models::PreferredWidth::Type::PERCENT;
        if (value == "Points") return aspose::words::cloud::models::PreferredWidth::Type::POINTS;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void PreferredWidth::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Type) {
            json["Type"] = preferredWidthTypeToString(*m_Type);
        }
        if (m_Value) {
            json["Value"] = *m_Value;
        }
    }

    void PreferredWidth::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Type") && !json["Type"].is_null()) {
            m_Type = std::make_shared< aspose::words::cloud::models::PreferredWidth::Type >(
                preferredWidthTypeFromString(json["Type"].get< std::string >())
            );
        }
        if (json.contains("Value") && !json["Value"].is_null()) {
            m_Value = std::make_shared< double >(
                json["Value"].get< double >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::PreferredWidth::Type > PreferredWidth::getType() const
    {
        return m_Type;
    }

    void PreferredWidth::setType(std::shared_ptr< aspose::words::cloud::models::PreferredWidth::Type > value)
    {
        m_Type = value;
    }

    std::shared_ptr< double > PreferredWidth::getValue() const
    {
        return m_Value;
    }

    void PreferredWidth::setValue(std::shared_ptr< double > value)
    {
        m_Value = value;
    }


    /*
     * ProtectionData implementation
     */
    void ProtectionData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ProtectionType) {
            json["ProtectionType"] = convertUtf16(*m_ProtectionType);
        }
    }

    void ProtectionData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ProtectionType") && !json["ProtectionType"].is_null()) {
            m_ProtectionType = std::make_shared< std::wstring >(
                convertUtf8( json["ProtectionType"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ProtectionData::getProtectionType() const
    {
        return m_ProtectionType;
    }

    void ProtectionData::setProtectionType(std::shared_ptr< std::wstring > value)
    {
        m_ProtectionType = value;
    }


    /*
     * ProtectionDataResponse implementation
     */
    void ProtectionDataResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentLink) {
            m_DocumentLink->toJson(&json["DocumentLink"]);
        }
        if (m_ProtectionData) {
            m_ProtectionData->toJson(&json["ProtectionData"]);
        }
    }

    void ProtectionDataResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentLink") && !json["DocumentLink"].is_null()) {
            m_DocumentLink = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_DocumentLink->fromJson(&json["DocumentLink"]);
        }
        if (json.contains("ProtectionData") && !json["ProtectionData"].is_null()) {
            m_ProtectionData = std::make_shared< aspose::words::cloud::models::ProtectionData >();
            m_ProtectionData->fromJson(&json["ProtectionData"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > ProtectionDataResponse::getDocumentLink() const
    {
        return m_DocumentLink;
    }

    void ProtectionDataResponse::setDocumentLink(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_DocumentLink = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ProtectionData > ProtectionDataResponse::getProtectionData() const
    {
        return m_ProtectionData;
    }

    void ProtectionDataResponse::setProtectionData(std::shared_ptr< aspose::words::cloud::models::ProtectionData > value)
    {
        m_ProtectionData = value;
    }


    /*
     * ProtectionRequest implementation
     */
    void ProtectionRequest::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_NewPassword) {
            json["NewPassword"] = convertUtf16(*m_NewPassword);
        }
        if (m_Password) {
            json["Password"] = convertUtf16(*m_Password);
        }
        if (m_ProtectionType) {
            json["ProtectionType"] = convertUtf16(*m_ProtectionType);
        }
    }

    void ProtectionRequest::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("NewPassword") && !json["NewPassword"].is_null()) {
            m_NewPassword = std::make_shared< std::wstring >(
                convertUtf8( json["NewPassword"].get< std::string >() )
            );
        }
        if (json.contains("Password") && !json["Password"].is_null()) {
            m_Password = std::make_shared< std::wstring >(
                convertUtf8( json["Password"].get< std::string >() )
            );
        }
        if (json.contains("ProtectionType") && !json["ProtectionType"].is_null()) {
            m_ProtectionType = std::make_shared< std::wstring >(
                convertUtf8( json["ProtectionType"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > ProtectionRequest::getNewPassword() const
    {
        return m_NewPassword;
    }

    void ProtectionRequest::setNewPassword(std::shared_ptr< std::wstring > value)
    {
        m_NewPassword = value;
    }

    std::shared_ptr< std::wstring > ProtectionRequest::getPassword() const
    {
        return m_Password;
    }

    void ProtectionRequest::setPassword(std::shared_ptr< std::wstring > value)
    {
        m_Password = value;
    }

    std::shared_ptr< std::wstring > ProtectionRequest::getProtectionType() const
    {
        return m_ProtectionType;
    }

    void ProtectionRequest::setProtectionType(std::shared_ptr< std::wstring > value)
    {
        m_ProtectionType = value;
    }


    /*
     * PsSaveOptionsData implementation
     */
    void PsSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_UseBookFoldPrintingSettings) {
            json["UseBookFoldPrintingSettings"] = *m_UseBookFoldPrintingSettings;
        }
    }

    void PsSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("UseBookFoldPrintingSettings") && !json["UseBookFoldPrintingSettings"].is_null()) {
            m_UseBookFoldPrintingSettings = std::make_shared< bool >(
                json["UseBookFoldPrintingSettings"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > PsSaveOptionsData::getUseBookFoldPrintingSettings() const
    {
        return m_UseBookFoldPrintingSettings;
    }

    void PsSaveOptionsData::setUseBookFoldPrintingSettings(std::shared_ptr< bool > value)
    {
        m_UseBookFoldPrintingSettings = value;
    }


    /*
     * PublicKeyResponse implementation
     */
    void PublicKeyResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Exponent) {
            json["Exponent"] = convertUtf16(*m_Exponent);
        }
        if (m_Modulus) {
            json["Modulus"] = convertUtf16(*m_Modulus);
        }
    }

    void PublicKeyResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Exponent") && !json["Exponent"].is_null()) {
            m_Exponent = std::make_shared< std::wstring >(
                convertUtf8( json["Exponent"].get< std::string >() )
            );
        }
        if (json.contains("Modulus") && !json["Modulus"].is_null()) {
            m_Modulus = std::make_shared< std::wstring >(
                convertUtf8( json["Modulus"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > PublicKeyResponse::getExponent() const
    {
        return m_Exponent;
    }

    void PublicKeyResponse::setExponent(std::shared_ptr< std::wstring > value)
    {
        m_Exponent = value;
    }

    std::shared_ptr< std::wstring > PublicKeyResponse::getModulus() const
    {
        return m_Modulus;
    }

    void PublicKeyResponse::setModulus(std::shared_ptr< std::wstring > value)
    {
        m_Modulus = value;
    }


    /*
     * RangeDocument implementation
     */
    void RangeDocument::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentName) {
            json["DocumentName"] = convertUtf16(*m_DocumentName);
        }
    }

    void RangeDocument::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentName") && !json["DocumentName"].is_null()) {
            m_DocumentName = std::make_shared< std::wstring >(
                convertUtf8( json["DocumentName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > RangeDocument::getDocumentName() const
    {
        return m_DocumentName;
    }

    void RangeDocument::setDocumentName(std::shared_ptr< std::wstring > value)
    {
        m_DocumentName = value;
    }


    /*
     * RangeDocumentDto implementation
     */
    void RangeDocumentDto::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentName) {
            json["DocumentName"] = convertUtf16(*m_DocumentName);
        }
    }

    void RangeDocumentDto::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentName") && !json["DocumentName"].is_null()) {
            m_DocumentName = std::make_shared< std::wstring >(
                convertUtf8( json["DocumentName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > RangeDocumentDto::getDocumentName() const
    {
        return m_DocumentName;
    }

    void RangeDocumentDto::setDocumentName(std::shared_ptr< std::wstring > value)
    {
        m_DocumentName = value;
    }


    /*
     * RangeTextResponse implementation
     */
    void RangeTextResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void RangeTextResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > RangeTextResponse::getText() const
    {
        return m_Text;
    }

    void RangeTextResponse::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * ReplaceRange implementation
     */
    inline std::string replaceRangeTextTypeToString(aspose::words::cloud::models::ReplaceRange::TextType value)
    {
        if (value == aspose::words::cloud::models::ReplaceRange::TextType::TEXT) return "Text";
        if (value == aspose::words::cloud::models::ReplaceRange::TextType::HTML) return "Html";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ReplaceRange::TextType replaceRangeTextTypeFromString(const std::string& value)
    {
        if (value == "Text") return aspose::words::cloud::models::ReplaceRange::TextType::TEXT;
        if (value == "Html") return aspose::words::cloud::models::ReplaceRange::TextType::HTML;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ReplaceRange::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
        if (m_TextType) {
            json["TextType"] = replaceRangeTextTypeToString(*m_TextType);
        }
    }

    void ReplaceRange::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
        if (json.contains("TextType") && !json["TextType"].is_null()) {
            m_TextType = std::make_shared< aspose::words::cloud::models::ReplaceRange::TextType >(
                replaceRangeTextTypeFromString(json["TextType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< std::wstring > ReplaceRange::getText() const
    {
        return m_Text;
    }

    void ReplaceRange::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ReplaceRange::TextType > ReplaceRange::getTextType() const
    {
        return m_TextType;
    }

    void ReplaceRange::setTextType(std::shared_ptr< aspose::words::cloud::models::ReplaceRange::TextType > value)
    {
        m_TextType = value;
    }


    /*
     * ReplaceRangeDto implementation
     */
    inline std::string replaceRangeDtoTextTypeToString(aspose::words::cloud::models::ReplaceRangeDto::TextType value)
    {
        if (value == aspose::words::cloud::models::ReplaceRangeDto::TextType::TEXT) return "Text";
        if (value == aspose::words::cloud::models::ReplaceRangeDto::TextType::HTML) return "Html";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ReplaceRangeDto::TextType replaceRangeDtoTextTypeFromString(const std::string& value)
    {
        if (value == "Text") return aspose::words::cloud::models::ReplaceRangeDto::TextType::TEXT;
        if (value == "Html") return aspose::words::cloud::models::ReplaceRangeDto::TextType::HTML;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ReplaceRangeDto::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
        if (m_TextType) {
            json["TextType"] = replaceRangeDtoTextTypeToString(*m_TextType);
        }
    }

    void ReplaceRangeDto::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
        if (json.contains("TextType") && !json["TextType"].is_null()) {
            m_TextType = std::make_shared< aspose::words::cloud::models::ReplaceRangeDto::TextType >(
                replaceRangeDtoTextTypeFromString(json["TextType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< std::wstring > ReplaceRangeDto::getText() const
    {
        return m_Text;
    }

    void ReplaceRangeDto::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ReplaceRangeDto::TextType > ReplaceRangeDto::getTextType() const
    {
        return m_TextType;
    }

    void ReplaceRangeDto::setTextType(std::shared_ptr< aspose::words::cloud::models::ReplaceRangeDto::TextType > value)
    {
        m_TextType = value;
    }


    /*
     * ReplaceTextParameters implementation
     */
    void ReplaceTextParameters::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsMatchCase) {
            json["IsMatchCase"] = *m_IsMatchCase;
        }
        if (m_IsMatchWholeWord) {
            json["IsMatchWholeWord"] = *m_IsMatchWholeWord;
        }
        if (m_IsOldValueRegex) {
            json["IsOldValueRegex"] = *m_IsOldValueRegex;
        }
        if (m_NewValue) {
            json["NewValue"] = convertUtf16(*m_NewValue);
        }
        if (m_OldValue) {
            json["OldValue"] = convertUtf16(*m_OldValue);
        }
    }

    void ReplaceTextParameters::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsMatchCase") && !json["IsMatchCase"].is_null()) {
            m_IsMatchCase = std::make_shared< bool >(
                json["IsMatchCase"].get< bool >()
            );
        }
        if (json.contains("IsMatchWholeWord") && !json["IsMatchWholeWord"].is_null()) {
            m_IsMatchWholeWord = std::make_shared< bool >(
                json["IsMatchWholeWord"].get< bool >()
            );
        }
        if (json.contains("IsOldValueRegex") && !json["IsOldValueRegex"].is_null()) {
            m_IsOldValueRegex = std::make_shared< bool >(
                json["IsOldValueRegex"].get< bool >()
            );
        }
        if (json.contains("NewValue") && !json["NewValue"].is_null()) {
            m_NewValue = std::make_shared< std::wstring >(
                convertUtf8( json["NewValue"].get< std::string >() )
            );
        }
        if (json.contains("OldValue") && !json["OldValue"].is_null()) {
            m_OldValue = std::make_shared< std::wstring >(
                convertUtf8( json["OldValue"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< bool > ReplaceTextParameters::getIsMatchCase() const
    {
        return m_IsMatchCase;
    }

    void ReplaceTextParameters::setIsMatchCase(std::shared_ptr< bool > value)
    {
        m_IsMatchCase = value;
    }

    std::shared_ptr< bool > ReplaceTextParameters::getIsMatchWholeWord() const
    {
        return m_IsMatchWholeWord;
    }

    void ReplaceTextParameters::setIsMatchWholeWord(std::shared_ptr< bool > value)
    {
        m_IsMatchWholeWord = value;
    }

    std::shared_ptr< bool > ReplaceTextParameters::getIsOldValueRegex() const
    {
        return m_IsOldValueRegex;
    }

    void ReplaceTextParameters::setIsOldValueRegex(std::shared_ptr< bool > value)
    {
        m_IsOldValueRegex = value;
    }

    std::shared_ptr< std::wstring > ReplaceTextParameters::getNewValue() const
    {
        return m_NewValue;
    }

    void ReplaceTextParameters::setNewValue(std::shared_ptr< std::wstring > value)
    {
        m_NewValue = value;
    }

    std::shared_ptr< std::wstring > ReplaceTextParameters::getOldValue() const
    {
        return m_OldValue;
    }

    void ReplaceTextParameters::setOldValue(std::shared_ptr< std::wstring > value)
    {
        m_OldValue = value;
    }


    /*
     * ReplaceTextResponse implementation
     */
    void ReplaceTextResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentLink) {
            m_DocumentLink->toJson(&json["DocumentLink"]);
        }
        if (m_Matches) {
            json["Matches"] = *m_Matches;
        }
    }

    void ReplaceTextResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentLink") && !json["DocumentLink"].is_null()) {
            m_DocumentLink = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_DocumentLink->fromJson(&json["DocumentLink"]);
        }
        if (json.contains("Matches") && !json["Matches"].is_null()) {
            m_Matches = std::make_shared< int32_t >(
                json["Matches"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > ReplaceTextResponse::getDocumentLink() const
    {
        return m_DocumentLink;
    }

    void ReplaceTextResponse::setDocumentLink(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_DocumentLink = value;
    }

    std::shared_ptr< int32_t > ReplaceTextResponse::getMatches() const
    {
        return m_Matches;
    }

    void ReplaceTextResponse::setMatches(std::shared_ptr< int32_t > value)
    {
        m_Matches = value;
    }


    /*
     * ReportEngineSettings implementation
     */
    inline std::string reportEngineSettingsDataSourceTypeToString(aspose::words::cloud::models::ReportEngineSettings::DataSourceType value)
    {
        if (value == aspose::words::cloud::models::ReportEngineSettings::DataSourceType::XML) return "Xml";
        if (value == aspose::words::cloud::models::ReportEngineSettings::DataSourceType::JSON) return "Json";
        if (value == aspose::words::cloud::models::ReportEngineSettings::DataSourceType::CSV) return "Csv";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ReportEngineSettings::DataSourceType reportEngineSettingsDataSourceTypeFromString(const std::string& value)
    {
        if (value == "Xml") return aspose::words::cloud::models::ReportEngineSettings::DataSourceType::XML;
        if (value == "Json") return aspose::words::cloud::models::ReportEngineSettings::DataSourceType::JSON;
        if (value == "Csv") return aspose::words::cloud::models::ReportEngineSettings::DataSourceType::CSV;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string reportEngineSettingsReportBuildOptionsToString(aspose::words::cloud::models::ReportBuildOptions value)
    {
        if (value == aspose::words::cloud::models::ReportBuildOptions::NONE) return "None";
        if (value == aspose::words::cloud::models::ReportBuildOptions::ALLOW_MISSING_MEMBERS) return "AllowMissingMembers";
        if (value == aspose::words::cloud::models::ReportBuildOptions::REMOVE_EMPTY_PARAGRAPHS) return "RemoveEmptyParagraphs";
        if (value == aspose::words::cloud::models::ReportBuildOptions::INLINE_ERROR_MESSAGES) return "InlineErrorMessages";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::ReportBuildOptions reportEngineSettingsReportBuildOptionsFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::ReportBuildOptions::NONE;
        if (value == "AllowMissingMembers") return aspose::words::cloud::models::ReportBuildOptions::ALLOW_MISSING_MEMBERS;
        if (value == "RemoveEmptyParagraphs") return aspose::words::cloud::models::ReportBuildOptions::REMOVE_EMPTY_PARAGRAPHS;
        if (value == "InlineErrorMessages") return aspose::words::cloud::models::ReportBuildOptions::INLINE_ERROR_MESSAGES;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void ReportEngineSettings::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CsvDataLoadOptions) {
            m_CsvDataLoadOptions->toJson(&json["CsvDataLoadOptions"]);
        }
        if (m_DataSourceName) {
            json["DataSourceName"] = convertUtf16(*m_DataSourceName);
        }
        if (m_DataSourceType) {
            json["DataSourceType"] = reportEngineSettingsDataSourceTypeToString(*m_DataSourceType);
        }
        if (m_ReportBuildOptions) {
            json["ReportBuildOptions"] = ::nlohmann::json::array();
            for (auto& element : *m_ReportBuildOptions) {
                json["ReportBuildOptions"].push_back(reportBuildOptionsToString(*element));
            }
        }
    }

    void ReportEngineSettings::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CsvDataLoadOptions") && !json["CsvDataLoadOptions"].is_null()) {
            m_CsvDataLoadOptions = std::make_shared< aspose::words::cloud::models::CsvDataLoadOptions >();
            m_CsvDataLoadOptions->fromJson(&json["CsvDataLoadOptions"]);
        }
        if (json.contains("DataSourceName") && !json["DataSourceName"].is_null()) {
            m_DataSourceName = std::make_shared< std::wstring >(
                convertUtf8( json["DataSourceName"].get< std::string >() )
            );
        }
        if (json.contains("DataSourceType") && !json["DataSourceType"].is_null()) {
            m_DataSourceType = std::make_shared< aspose::words::cloud::models::ReportEngineSettings::DataSourceType >(
                reportEngineSettingsDataSourceTypeFromString(json["DataSourceType"].get< std::string >())
            );
        }
        if (json.contains("ReportBuildOptions") && !json["ReportBuildOptions"].is_null()) {
            m_ReportBuildOptions = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::ReportBuildOptions>> >();
            for (auto& element : json["ReportBuildOptions"]) {
                m_ReportBuildOptions->push_back(std::make_shared< aspose::words::cloud::models::ReportBuildOptions >(reportBuildOptionsFromString(element.get< std::string >())));
            }
        }
    }

    std::shared_ptr< aspose::words::cloud::models::CsvDataLoadOptions > ReportEngineSettings::getCsvDataLoadOptions() const
    {
        return m_CsvDataLoadOptions;
    }

    void ReportEngineSettings::setCsvDataLoadOptions(std::shared_ptr< aspose::words::cloud::models::CsvDataLoadOptions > value)
    {
        m_CsvDataLoadOptions = value;
    }

    std::shared_ptr< std::wstring > ReportEngineSettings::getDataSourceName() const
    {
        return m_DataSourceName;
    }

    void ReportEngineSettings::setDataSourceName(std::shared_ptr< std::wstring > value)
    {
        m_DataSourceName = value;
    }

    std::shared_ptr< aspose::words::cloud::models::ReportEngineSettings::DataSourceType > ReportEngineSettings::getDataSourceType() const
    {
        return m_DataSourceType;
    }

    void ReportEngineSettings::setDataSourceType(std::shared_ptr< aspose::words::cloud::models::ReportEngineSettings::DataSourceType > value)
    {
        m_DataSourceType = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ReportBuildOptions>> > ReportEngineSettings::getReportBuildOptions() const
    {
        return m_ReportBuildOptions;
    }

    void ReportEngineSettings::setReportBuildOptions(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::ReportBuildOptions>> > value)
    {
        m_ReportBuildOptions = value;
    }


    /*
     * RevisionsModificationResponse implementation
     */
    void RevisionsModificationResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Result) {
            m_Result->toJson(&json["Result"]);
        }
    }

    void RevisionsModificationResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Result") && !json["Result"].is_null()) {
            m_Result = std::make_shared< aspose::words::cloud::models::ModificationOperationResult >();
            m_Result->fromJson(&json["Result"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ModificationOperationResult > RevisionsModificationResponse::getResult() const
    {
        return m_Result;
    }

    void RevisionsModificationResponse::setResult(std::shared_ptr< aspose::words::cloud::models::ModificationOperationResult > value)
    {
        m_Result = value;
    }


    /*
     * RtfSaveOptionsData implementation
     */
    void RtfSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ExportCompactSize) {
            json["ExportCompactSize"] = *m_ExportCompactSize;
        }
        if (m_ExportImagesForOldReaders) {
            json["ExportImagesForOldReaders"] = *m_ExportImagesForOldReaders;
        }
        if (m_PrettyFormat) {
            json["PrettyFormat"] = *m_PrettyFormat;
        }
        if (m_SaveImagesAsWmf) {
            json["SaveImagesAsWmf"] = *m_SaveImagesAsWmf;
        }
    }

    void RtfSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ExportCompactSize") && !json["ExportCompactSize"].is_null()) {
            m_ExportCompactSize = std::make_shared< bool >(
                json["ExportCompactSize"].get< bool >()
            );
        }
        if (json.contains("ExportImagesForOldReaders") && !json["ExportImagesForOldReaders"].is_null()) {
            m_ExportImagesForOldReaders = std::make_shared< bool >(
                json["ExportImagesForOldReaders"].get< bool >()
            );
        }
        if (json.contains("PrettyFormat") && !json["PrettyFormat"].is_null()) {
            m_PrettyFormat = std::make_shared< bool >(
                json["PrettyFormat"].get< bool >()
            );
        }
        if (json.contains("SaveImagesAsWmf") && !json["SaveImagesAsWmf"].is_null()) {
            m_SaveImagesAsWmf = std::make_shared< bool >(
                json["SaveImagesAsWmf"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > RtfSaveOptionsData::getExportCompactSize() const
    {
        return m_ExportCompactSize;
    }

    void RtfSaveOptionsData::setExportCompactSize(std::shared_ptr< bool > value)
    {
        m_ExportCompactSize = value;
    }

    std::shared_ptr< bool > RtfSaveOptionsData::getExportImagesForOldReaders() const
    {
        return m_ExportImagesForOldReaders;
    }

    void RtfSaveOptionsData::setExportImagesForOldReaders(std::shared_ptr< bool > value)
    {
        m_ExportImagesForOldReaders = value;
    }

    std::shared_ptr< bool > RtfSaveOptionsData::getPrettyFormat() const
    {
        return m_PrettyFormat;
    }

    void RtfSaveOptionsData::setPrettyFormat(std::shared_ptr< bool > value)
    {
        m_PrettyFormat = value;
    }

    std::shared_ptr< bool > RtfSaveOptionsData::getSaveImagesAsWmf() const
    {
        return m_SaveImagesAsWmf;
    }

    void RtfSaveOptionsData::setSaveImagesAsWmf(std::shared_ptr< bool > value)
    {
        m_SaveImagesAsWmf = value;
    }


    /*
     * Run implementation
     */
    void Run::toJson(void* jsonIfc) const
    {
        RunLink::toJson(jsonIfc);
    }

    void Run::fromJson(const void* jsonIfc)
    {
        RunLink::fromJson(jsonIfc);
    }




    /*
     * RunBase implementation
     */
    void RunBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void RunBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > RunBase::getText() const
    {
        return m_Text;
    }

    void RunBase::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * RunInsert implementation
     */
    void RunInsert::toJson(void* jsonIfc) const
    {
        RunBase::toJson(jsonIfc);
    }

    void RunInsert::fromJson(const void* jsonIfc)
    {
        RunBase::fromJson(jsonIfc);
    }




    /*
     * RunLink implementation
     */
    void RunLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void RunLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > RunLink::getText() const
    {
        return m_Text;
    }

    void RunLink::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * RunResponse implementation
     */
    void RunResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Run) {
            m_Run->toJson(&json["Run"]);
        }
    }

    void RunResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Run") && !json["Run"].is_null()) {
            m_Run = std::make_shared< aspose::words::cloud::models::Run >();
            m_Run->fromJson(&json["Run"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Run > RunResponse::getRun() const
    {
        return m_Run;
    }

    void RunResponse::setRun(std::shared_ptr< aspose::words::cloud::models::Run > value)
    {
        m_Run = value;
    }


    /*
     * Runs implementation
     */
    void Runs::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_List) {
            json["List"] = ::nlohmann::json::array();
            for (auto& element : *m_List) {
                element->toJson(&json["List"].emplace_back());
            }
        }
    }

    void Runs::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("List") && !json["List"].is_null()) {
            m_List = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Run>> >();
            for (auto& element : json["List"]) {
                m_List->emplace_back(std::make_shared< aspose::words::cloud::models::Run >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Run>> > Runs::getList() const
    {
        return m_List;
    }

    void Runs::setList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Run>> > value)
    {
        m_List = value;
    }


    /*
     * RunsResponse implementation
     */
    void RunsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Runs) {
            m_Runs->toJson(&json["Runs"]);
        }
    }

    void RunsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Runs") && !json["Runs"].is_null()) {
            m_Runs = std::make_shared< aspose::words::cloud::models::Runs >();
            m_Runs->fromJson(&json["Runs"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Runs > RunsResponse::getRuns() const
    {
        return m_Runs;
    }

    void RunsResponse::setRuns(std::shared_ptr< aspose::words::cloud::models::Runs > value)
    {
        m_Runs = value;
    }


    /*
     * RunUpdate implementation
     */
    void RunUpdate::toJson(void* jsonIfc) const
    {
        RunBase::toJson(jsonIfc);
    }

    void RunUpdate::fromJson(const void* jsonIfc)
    {
        RunBase::fromJson(jsonIfc);
    }




    /*
     * SaveOptionsData implementation
     */
    inline std::string saveOptionsDataDml3DEffectsRenderingModeToString(aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode value)
    {
        if (value == aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode::BASIC) return "Basic";
        if (value == aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode::ADVANCED) return "Advanced";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode saveOptionsDataDml3DEffectsRenderingModeFromString(const std::string& value)
    {
        if (value == "Basic") return aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode::BASIC;
        if (value == "Advanced") return aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode::ADVANCED;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void SaveOptionsData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AllowEmbeddingPostScriptFonts) {
            json["AllowEmbeddingPostScriptFonts"] = *m_AllowEmbeddingPostScriptFonts;
        }
        if (m_CustomTimeZoneInfoData) {
            m_CustomTimeZoneInfoData->toJson(&json["CustomTimeZoneInfoData"]);
        }
        if (m_Dml3DEffectsRenderingMode) {
            json["Dml3DEffectsRenderingMode"] = saveOptionsDataDml3DEffectsRenderingModeToString(*m_Dml3DEffectsRenderingMode);
        }
        if (m_DmlEffectsRenderingMode) {
            json["DmlEffectsRenderingMode"] = convertUtf16(*m_DmlEffectsRenderingMode);
        }
        if (m_DmlRenderingMode) {
            json["DmlRenderingMode"] = convertUtf16(*m_DmlRenderingMode);
        }
        if (m_FileName) {
            json["FileName"] = convertUtf16(*m_FileName);
        }
        if (m_ImlRenderingMode) {
            json["ImlRenderingMode"] = convertUtf16(*m_ImlRenderingMode);
        }
        if (m_SaveFormat) {
            json["SaveFormat"] = convertUtf16(*m_SaveFormat);
        }
        if (m_UpdateCreatedTimeProperty) {
            json["UpdateCreatedTimeProperty"] = *m_UpdateCreatedTimeProperty;
        }
        if (m_UpdateFields) {
            json["UpdateFields"] = *m_UpdateFields;
        }
        if (m_UpdateLastPrintedProperty) {
            json["UpdateLastPrintedProperty"] = *m_UpdateLastPrintedProperty;
        }
        if (m_UpdateLastSavedTimeProperty) {
            json["UpdateLastSavedTimeProperty"] = *m_UpdateLastSavedTimeProperty;
        }
        if (m_UpdateSdtContent) {
            json["UpdateSdtContent"] = *m_UpdateSdtContent;
        }
        if (m_ZipOutput) {
            json["ZipOutput"] = *m_ZipOutput;
        }
    }

    void SaveOptionsData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AllowEmbeddingPostScriptFonts") && !json["AllowEmbeddingPostScriptFonts"].is_null()) {
            m_AllowEmbeddingPostScriptFonts = std::make_shared< bool >(
                json["AllowEmbeddingPostScriptFonts"].get< bool >()
            );
        }
        if (json.contains("CustomTimeZoneInfoData") && !json["CustomTimeZoneInfoData"].is_null()) {
            m_CustomTimeZoneInfoData = std::make_shared< aspose::words::cloud::models::TimeZoneInfoData >();
            m_CustomTimeZoneInfoData->fromJson(&json["CustomTimeZoneInfoData"]);
        }
        if (json.contains("Dml3DEffectsRenderingMode") && !json["Dml3DEffectsRenderingMode"].is_null()) {
            m_Dml3DEffectsRenderingMode = std::make_shared< aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode >(
                saveOptionsDataDml3DEffectsRenderingModeFromString(json["Dml3DEffectsRenderingMode"].get< std::string >())
            );
        }
        if (json.contains("DmlEffectsRenderingMode") && !json["DmlEffectsRenderingMode"].is_null()) {
            m_DmlEffectsRenderingMode = std::make_shared< std::wstring >(
                convertUtf8( json["DmlEffectsRenderingMode"].get< std::string >() )
            );
        }
        if (json.contains("DmlRenderingMode") && !json["DmlRenderingMode"].is_null()) {
            m_DmlRenderingMode = std::make_shared< std::wstring >(
                convertUtf8( json["DmlRenderingMode"].get< std::string >() )
            );
        }
        if (json.contains("FileName") && !json["FileName"].is_null()) {
            m_FileName = std::make_shared< std::wstring >(
                convertUtf8( json["FileName"].get< std::string >() )
            );
        }
        if (json.contains("ImlRenderingMode") && !json["ImlRenderingMode"].is_null()) {
            m_ImlRenderingMode = std::make_shared< std::wstring >(
                convertUtf8( json["ImlRenderingMode"].get< std::string >() )
            );
        }
        if (json.contains("SaveFormat") && !json["SaveFormat"].is_null()) {
            m_SaveFormat = std::make_shared< std::wstring >(
                convertUtf8( json["SaveFormat"].get< std::string >() )
            );
        }
        if (json.contains("UpdateCreatedTimeProperty") && !json["UpdateCreatedTimeProperty"].is_null()) {
            m_UpdateCreatedTimeProperty = std::make_shared< bool >(
                json["UpdateCreatedTimeProperty"].get< bool >()
            );
        }
        if (json.contains("UpdateFields") && !json["UpdateFields"].is_null()) {
            m_UpdateFields = std::make_shared< bool >(
                json["UpdateFields"].get< bool >()
            );
        }
        if (json.contains("UpdateLastPrintedProperty") && !json["UpdateLastPrintedProperty"].is_null()) {
            m_UpdateLastPrintedProperty = std::make_shared< bool >(
                json["UpdateLastPrintedProperty"].get< bool >()
            );
        }
        if (json.contains("UpdateLastSavedTimeProperty") && !json["UpdateLastSavedTimeProperty"].is_null()) {
            m_UpdateLastSavedTimeProperty = std::make_shared< bool >(
                json["UpdateLastSavedTimeProperty"].get< bool >()
            );
        }
        if (json.contains("UpdateSdtContent") && !json["UpdateSdtContent"].is_null()) {
            m_UpdateSdtContent = std::make_shared< bool >(
                json["UpdateSdtContent"].get< bool >()
            );
        }
        if (json.contains("ZipOutput") && !json["ZipOutput"].is_null()) {
            m_ZipOutput = std::make_shared< bool >(
                json["ZipOutput"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > SaveOptionsData::getAllowEmbeddingPostScriptFonts() const
    {
        return m_AllowEmbeddingPostScriptFonts;
    }

    void SaveOptionsData::setAllowEmbeddingPostScriptFonts(std::shared_ptr< bool > value)
    {
        m_AllowEmbeddingPostScriptFonts = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TimeZoneInfoData > SaveOptionsData::getCustomTimeZoneInfoData() const
    {
        return m_CustomTimeZoneInfoData;
    }

    void SaveOptionsData::setCustomTimeZoneInfoData(std::shared_ptr< aspose::words::cloud::models::TimeZoneInfoData > value)
    {
        m_CustomTimeZoneInfoData = value;
    }

    std::shared_ptr< aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode > SaveOptionsData::getDml3DEffectsRenderingMode() const
    {
        return m_Dml3DEffectsRenderingMode;
    }

    void SaveOptionsData::setDml3DEffectsRenderingMode(std::shared_ptr< aspose::words::cloud::models::SaveOptionsData::Dml3DEffectsRenderingMode > value)
    {
        m_Dml3DEffectsRenderingMode = value;
    }

    std::shared_ptr< std::wstring > SaveOptionsData::getDmlEffectsRenderingMode() const
    {
        return m_DmlEffectsRenderingMode;
    }

    void SaveOptionsData::setDmlEffectsRenderingMode(std::shared_ptr< std::wstring > value)
    {
        m_DmlEffectsRenderingMode = value;
    }

    std::shared_ptr< std::wstring > SaveOptionsData::getDmlRenderingMode() const
    {
        return m_DmlRenderingMode;
    }

    void SaveOptionsData::setDmlRenderingMode(std::shared_ptr< std::wstring > value)
    {
        m_DmlRenderingMode = value;
    }

    std::shared_ptr< std::wstring > SaveOptionsData::getFileName() const
    {
        return m_FileName;
    }

    void SaveOptionsData::setFileName(std::shared_ptr< std::wstring > value)
    {
        m_FileName = value;
    }

    std::shared_ptr< std::wstring > SaveOptionsData::getImlRenderingMode() const
    {
        return m_ImlRenderingMode;
    }

    void SaveOptionsData::setImlRenderingMode(std::shared_ptr< std::wstring > value)
    {
        m_ImlRenderingMode = value;
    }

    std::shared_ptr< std::wstring > SaveOptionsData::getSaveFormat() const
    {
        return m_SaveFormat;
    }

    void SaveOptionsData::setSaveFormat(std::shared_ptr< std::wstring > value)
    {
        m_SaveFormat = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getUpdateCreatedTimeProperty() const
    {
        return m_UpdateCreatedTimeProperty;
    }

    void SaveOptionsData::setUpdateCreatedTimeProperty(std::shared_ptr< bool > value)
    {
        m_UpdateCreatedTimeProperty = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getUpdateFields() const
    {
        return m_UpdateFields;
    }

    void SaveOptionsData::setUpdateFields(std::shared_ptr< bool > value)
    {
        m_UpdateFields = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getUpdateLastPrintedProperty() const
    {
        return m_UpdateLastPrintedProperty;
    }

    void SaveOptionsData::setUpdateLastPrintedProperty(std::shared_ptr< bool > value)
    {
        m_UpdateLastPrintedProperty = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getUpdateLastSavedTimeProperty() const
    {
        return m_UpdateLastSavedTimeProperty;
    }

    void SaveOptionsData::setUpdateLastSavedTimeProperty(std::shared_ptr< bool > value)
    {
        m_UpdateLastSavedTimeProperty = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getUpdateSdtContent() const
    {
        return m_UpdateSdtContent;
    }

    void SaveOptionsData::setUpdateSdtContent(std::shared_ptr< bool > value)
    {
        m_UpdateSdtContent = value;
    }

    std::shared_ptr< bool > SaveOptionsData::getZipOutput() const
    {
        return m_ZipOutput;
    }

    void SaveOptionsData::setZipOutput(std::shared_ptr< bool > value)
    {
        m_ZipOutput = value;
    }


    /*
     * SaveResponse implementation
     */
    void SaveResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_SaveResult) {
            m_SaveResult->toJson(&json["SaveResult"]);
        }
    }

    void SaveResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("SaveResult") && !json["SaveResult"].is_null()) {
            m_SaveResult = std::make_shared< aspose::words::cloud::models::SaveResult >();
            m_SaveResult->fromJson(&json["SaveResult"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::SaveResult > SaveResponse::getSaveResult() const
    {
        return m_SaveResult;
    }

    void SaveResponse::setSaveResult(std::shared_ptr< aspose::words::cloud::models::SaveResult > value)
    {
        m_SaveResult = value;
    }


    /*
     * SaveResult implementation
     */
    void SaveResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AdditionalItems) {
            json["AdditionalItems"] = ::nlohmann::json::array();
            for (auto& element : *m_AdditionalItems) {
                element->toJson(&json["AdditionalItems"].emplace_back());
            }
        }
        if (m_DestDocument) {
            m_DestDocument->toJson(&json["DestDocument"]);
        }
        if (m_SourceDocument) {
            m_SourceDocument->toJson(&json["SourceDocument"]);
        }
    }

    void SaveResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AdditionalItems") && !json["AdditionalItems"].is_null()) {
            m_AdditionalItems = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> >();
            for (auto& element : json["AdditionalItems"]) {
                m_AdditionalItems->emplace_back(std::make_shared< aspose::words::cloud::models::FileLink >())->fromJson(&element);
            }
        }
        if (json.contains("DestDocument") && !json["DestDocument"].is_null()) {
            m_DestDocument = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_DestDocument->fromJson(&json["DestDocument"]);
        }
        if (json.contains("SourceDocument") && !json["SourceDocument"].is_null()) {
            m_SourceDocument = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_SourceDocument->fromJson(&json["SourceDocument"]);
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> > SaveResult::getAdditionalItems() const
    {
        return m_AdditionalItems;
    }

    void SaveResult::setAdditionalItems(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> > value)
    {
        m_AdditionalItems = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > SaveResult::getDestDocument() const
    {
        return m_DestDocument;
    }

    void SaveResult::setDestDocument(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_DestDocument = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > SaveResult::getSourceDocument() const
    {
        return m_SourceDocument;
    }

    void SaveResult::setSourceDocument(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_SourceDocument = value;
    }


    /*
     * SearchResponse implementation
     */
    void SearchResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_SearchingPattern) {
            json["SearchingPattern"] = convertUtf16(*m_SearchingPattern);
        }
        if (m_SearchResults) {
            m_SearchResults->toJson(&json["SearchResults"]);
        }
    }

    void SearchResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("SearchingPattern") && !json["SearchingPattern"].is_null()) {
            m_SearchingPattern = std::make_shared< std::wstring >(
                convertUtf8( json["SearchingPattern"].get< std::string >() )
            );
        }
        if (json.contains("SearchResults") && !json["SearchResults"].is_null()) {
            m_SearchResults = std::make_shared< aspose::words::cloud::models::SearchResultsCollection >();
            m_SearchResults->fromJson(&json["SearchResults"]);
        }
    }

    std::shared_ptr< std::wstring > SearchResponse::getSearchingPattern() const
    {
        return m_SearchingPattern;
    }

    void SearchResponse::setSearchingPattern(std::shared_ptr< std::wstring > value)
    {
        m_SearchingPattern = value;
    }

    std::shared_ptr< aspose::words::cloud::models::SearchResultsCollection > SearchResponse::getSearchResults() const
    {
        return m_SearchResults;
    }

    void SearchResponse::setSearchResults(std::shared_ptr< aspose::words::cloud::models::SearchResultsCollection > value)
    {
        m_SearchResults = value;
    }


    /*
     * SearchResult implementation
     */
    void SearchResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_RangeEnd) {
            m_RangeEnd->toJson(&json["RangeEnd"]);
        }
        if (m_RangeStart) {
            m_RangeStart->toJson(&json["RangeStart"]);
        }
    }

    void SearchResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("RangeEnd") && !json["RangeEnd"].is_null()) {
            m_RangeEnd = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeEnd->fromJson(&json["RangeEnd"]);
        }
        if (json.contains("RangeStart") && !json["RangeStart"].is_null()) {
            m_RangeStart = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_RangeStart->fromJson(&json["RangeStart"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > SearchResult::getRangeEnd() const
    {
        return m_RangeEnd;
    }

    void SearchResult::setRangeEnd(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeEnd = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > SearchResult::getRangeStart() const
    {
        return m_RangeStart;
    }

    void SearchResult::setRangeStart(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_RangeStart = value;
    }


    /*
     * SearchResultsCollection implementation
     */
    void SearchResultsCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ResultsList) {
            json["ResultsList"] = ::nlohmann::json::array();
            for (auto& element : *m_ResultsList) {
                element->toJson(&json["ResultsList"].emplace_back());
            }
        }
    }

    void SearchResultsCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ResultsList") && !json["ResultsList"].is_null()) {
            m_ResultsList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::SearchResult>> >();
            for (auto& element : json["ResultsList"]) {
                m_ResultsList->emplace_back(std::make_shared< aspose::words::cloud::models::SearchResult >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::SearchResult>> > SearchResultsCollection::getResultsList() const
    {
        return m_ResultsList;
    }

    void SearchResultsCollection::setResultsList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::SearchResult>> > value)
    {
        m_ResultsList = value;
    }


    /*
     * Section implementation
     */
    void Section::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ChildNodes) {
            json["ChildNodes"] = ::nlohmann::json::array();
            for (auto& element : *m_ChildNodes) {
                element->toJson(&json["ChildNodes"].emplace_back());
            }
        }
        if (m_HeaderFooters) {
            m_HeaderFooters->toJson(&json["HeaderFooters"]);
        }
        if (m_PageSetup) {
            m_PageSetup->toJson(&json["PageSetup"]);
        }
        if (m_Paragraphs) {
            m_Paragraphs->toJson(&json["Paragraphs"]);
        }
        if (m_Tables) {
            m_Tables->toJson(&json["Tables"]);
        }
    }

    void Section::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ChildNodes") && !json["ChildNodes"].is_null()) {
            m_ChildNodes = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> >();
            for (auto& element : json["ChildNodes"]) {
                m_ChildNodes->emplace_back(std::make_shared< aspose::words::cloud::models::NodeLink >())->fromJson(&element);
            }
        }
        if (json.contains("HeaderFooters") && !json["HeaderFooters"].is_null()) {
            m_HeaderFooters = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_HeaderFooters->fromJson(&json["HeaderFooters"]);
        }
        if (json.contains("PageSetup") && !json["PageSetup"].is_null()) {
            m_PageSetup = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_PageSetup->fromJson(&json["PageSetup"]);
        }
        if (json.contains("Paragraphs") && !json["Paragraphs"].is_null()) {
            m_Paragraphs = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_Paragraphs->fromJson(&json["Paragraphs"]);
        }
        if (json.contains("Tables") && !json["Tables"].is_null()) {
            m_Tables = std::make_shared< aspose::words::cloud::models::LinkElement >();
            m_Tables->fromJson(&json["Tables"]);
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > Section::getChildNodes() const
    {
        return m_ChildNodes;
    }

    void Section::setChildNodes(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > value)
    {
        m_ChildNodes = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > Section::getHeaderFooters() const
    {
        return m_HeaderFooters;
    }

    void Section::setHeaderFooters(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_HeaderFooters = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > Section::getPageSetup() const
    {
        return m_PageSetup;
    }

    void Section::setPageSetup(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_PageSetup = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > Section::getParagraphs() const
    {
        return m_Paragraphs;
    }

    void Section::setParagraphs(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_Paragraphs = value;
    }

    std::shared_ptr< aspose::words::cloud::models::LinkElement > Section::getTables() const
    {
        return m_Tables;
    }

    void Section::setTables(std::shared_ptr< aspose::words::cloud::models::LinkElement > value)
    {
        m_Tables = value;
    }


    /*
     * SectionLink implementation
     */
    void SectionLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
    }

    void SectionLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
    }




    /*
     * SectionLinkCollection implementation
     */
    void SectionLinkCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_SectionLinkList) {
            json["SectionLinkList"] = ::nlohmann::json::array();
            for (auto& element : *m_SectionLinkList) {
                element->toJson(&json["SectionLinkList"].emplace_back());
            }
        }
    }

    void SectionLinkCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("SectionLinkList") && !json["SectionLinkList"].is_null()) {
            m_SectionLinkList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::SectionLink>> >();
            for (auto& element : json["SectionLinkList"]) {
                m_SectionLinkList->emplace_back(std::make_shared< aspose::words::cloud::models::SectionLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::SectionLink>> > SectionLinkCollection::getSectionLinkList() const
    {
        return m_SectionLinkList;
    }

    void SectionLinkCollection::setSectionLinkList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::SectionLink>> > value)
    {
        m_SectionLinkList = value;
    }


    /*
     * SectionLinkCollectionResponse implementation
     */
    void SectionLinkCollectionResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Sections) {
            m_Sections->toJson(&json["Sections"]);
        }
    }

    void SectionLinkCollectionResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Sections") && !json["Sections"].is_null()) {
            m_Sections = std::make_shared< aspose::words::cloud::models::SectionLinkCollection >();
            m_Sections->fromJson(&json["Sections"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::SectionLinkCollection > SectionLinkCollectionResponse::getSections() const
    {
        return m_Sections;
    }

    void SectionLinkCollectionResponse::setSections(std::shared_ptr< aspose::words::cloud::models::SectionLinkCollection > value)
    {
        m_Sections = value;
    }


    /*
     * SectionPageSetupResponse implementation
     */
    void SectionPageSetupResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_PageSetup) {
            m_PageSetup->toJson(&json["PageSetup"]);
        }
    }

    void SectionPageSetupResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("PageSetup") && !json["PageSetup"].is_null()) {
            m_PageSetup = std::make_shared< aspose::words::cloud::models::PageSetup >();
            m_PageSetup->fromJson(&json["PageSetup"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::PageSetup > SectionPageSetupResponse::getPageSetup() const
    {
        return m_PageSetup;
    }

    void SectionPageSetupResponse::setPageSetup(std::shared_ptr< aspose::words::cloud::models::PageSetup > value)
    {
        m_PageSetup = value;
    }


    /*
     * SectionResponse implementation
     */
    void SectionResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Section) {
            m_Section->toJson(&json["Section"]);
        }
    }

    void SectionResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Section") && !json["Section"].is_null()) {
            m_Section = std::make_shared< aspose::words::cloud::models::Section >();
            m_Section->fromJson(&json["Section"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Section > SectionResponse::getSection() const
    {
        return m_Section;
    }

    void SectionResponse::setSection(std::shared_ptr< aspose::words::cloud::models::Section > value)
    {
        m_Section = value;
    }


    /*
     * Shading implementation
     */
    inline std::string shadingTextureToString(aspose::words::cloud::models::Shading::Texture value)
    {
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_NONE) return "TextureNone";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_SOLID) return "TextureSolid";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE5_PERCENT) return "Texture5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE10_PERCENT) return "Texture10Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE20_PERCENT) return "Texture20Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE25_PERCENT) return "Texture25Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE30_PERCENT) return "Texture30Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE40_PERCENT) return "Texture40Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE50_PERCENT) return "Texture50Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE60_PERCENT) return "Texture60Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE70_PERCENT) return "Texture70Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE75_PERCENT) return "Texture75Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE80_PERCENT) return "Texture80Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE90_PERCENT) return "Texture90Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_HORIZONTAL) return "TextureDarkHorizontal";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_VERTICAL) return "TextureDarkVertical";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_DOWN) return "TextureDarkDiagonalDown";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_UP) return "TextureDarkDiagonalUp";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_CROSS) return "TextureDarkCross";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_CROSS) return "TextureDarkDiagonalCross";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_HORIZONTAL) return "TextureHorizontal";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_VERTICAL) return "TextureVertical";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_DOWN) return "TextureDiagonalDown";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_UP) return "TextureDiagonalUp";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_CROSS) return "TextureCross";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_CROSS) return "TextureDiagonalCross";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE2_PT5_PERCENT) return "Texture2Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE7_PT5_PERCENT) return "Texture7Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE12_PT5_PERCENT) return "Texture12Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE15_PERCENT) return "Texture15Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE17_PT5_PERCENT) return "Texture17Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE22_PT5_PERCENT) return "Texture22Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE27_PT5_PERCENT) return "Texture27Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE32_PT5_PERCENT) return "Texture32Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE35_PERCENT) return "Texture35Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE37_PT5_PERCENT) return "Texture37Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE42_PT5_PERCENT) return "Texture42Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE45_PERCENT) return "Texture45Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE47_PT5_PERCENT) return "Texture47Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE52_PT5_PERCENT) return "Texture52Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE55_PERCENT) return "Texture55Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE57_PT5_PERCENT) return "Texture57Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE62_PT5_PERCENT) return "Texture62Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE65_PERCENT) return "Texture65Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE67_PT5_PERCENT) return "Texture67Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE72_PT5_PERCENT) return "Texture72Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE77_PT5_PERCENT) return "Texture77Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE82_PT5_PERCENT) return "Texture82Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE85_PERCENT) return "Texture85Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE87_PT5_PERCENT) return "Texture87Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE92_PT5_PERCENT) return "Texture92Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE95_PERCENT) return "Texture95Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE97_PT5_PERCENT) return "Texture97Pt5Percent";
        if (value == aspose::words::cloud::models::Shading::Texture::TEXTURE_NIL) return "TextureNil";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Shading::Texture shadingTextureFromString(const std::string& value)
    {
        if (value == "TextureNone") return aspose::words::cloud::models::Shading::Texture::TEXTURE_NONE;
        if (value == "TextureSolid") return aspose::words::cloud::models::Shading::Texture::TEXTURE_SOLID;
        if (value == "Texture5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE5_PERCENT;
        if (value == "Texture10Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE10_PERCENT;
        if (value == "Texture20Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE20_PERCENT;
        if (value == "Texture25Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE25_PERCENT;
        if (value == "Texture30Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE30_PERCENT;
        if (value == "Texture40Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE40_PERCENT;
        if (value == "Texture50Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE50_PERCENT;
        if (value == "Texture60Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE60_PERCENT;
        if (value == "Texture70Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE70_PERCENT;
        if (value == "Texture75Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE75_PERCENT;
        if (value == "Texture80Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE80_PERCENT;
        if (value == "Texture90Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE90_PERCENT;
        if (value == "TextureDarkHorizontal") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_HORIZONTAL;
        if (value == "TextureDarkVertical") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_VERTICAL;
        if (value == "TextureDarkDiagonalDown") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_DOWN;
        if (value == "TextureDarkDiagonalUp") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_UP;
        if (value == "TextureDarkCross") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_CROSS;
        if (value == "TextureDarkDiagonalCross") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DARK_DIAGONAL_CROSS;
        if (value == "TextureHorizontal") return aspose::words::cloud::models::Shading::Texture::TEXTURE_HORIZONTAL;
        if (value == "TextureVertical") return aspose::words::cloud::models::Shading::Texture::TEXTURE_VERTICAL;
        if (value == "TextureDiagonalDown") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_DOWN;
        if (value == "TextureDiagonalUp") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_UP;
        if (value == "TextureCross") return aspose::words::cloud::models::Shading::Texture::TEXTURE_CROSS;
        if (value == "TextureDiagonalCross") return aspose::words::cloud::models::Shading::Texture::TEXTURE_DIAGONAL_CROSS;
        if (value == "Texture2Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE2_PT5_PERCENT;
        if (value == "Texture7Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE7_PT5_PERCENT;
        if (value == "Texture12Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE12_PT5_PERCENT;
        if (value == "Texture15Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE15_PERCENT;
        if (value == "Texture17Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE17_PT5_PERCENT;
        if (value == "Texture22Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE22_PT5_PERCENT;
        if (value == "Texture27Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE27_PT5_PERCENT;
        if (value == "Texture32Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE32_PT5_PERCENT;
        if (value == "Texture35Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE35_PERCENT;
        if (value == "Texture37Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE37_PT5_PERCENT;
        if (value == "Texture42Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE42_PT5_PERCENT;
        if (value == "Texture45Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE45_PERCENT;
        if (value == "Texture47Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE47_PT5_PERCENT;
        if (value == "Texture52Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE52_PT5_PERCENT;
        if (value == "Texture55Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE55_PERCENT;
        if (value == "Texture57Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE57_PT5_PERCENT;
        if (value == "Texture62Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE62_PT5_PERCENT;
        if (value == "Texture65Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE65_PERCENT;
        if (value == "Texture67Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE67_PT5_PERCENT;
        if (value == "Texture72Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE72_PT5_PERCENT;
        if (value == "Texture77Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE77_PT5_PERCENT;
        if (value == "Texture82Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE82_PT5_PERCENT;
        if (value == "Texture85Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE85_PERCENT;
        if (value == "Texture87Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE87_PT5_PERCENT;
        if (value == "Texture92Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE92_PT5_PERCENT;
        if (value == "Texture95Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE95_PERCENT;
        if (value == "Texture97Pt5Percent") return aspose::words::cloud::models::Shading::Texture::TEXTURE97_PT5_PERCENT;
        if (value == "TextureNil") return aspose::words::cloud::models::Shading::Texture::TEXTURE_NIL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Shading::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BackgroundPatternColor) {
            m_BackgroundPatternColor->toJson(&json["BackgroundPatternColor"]);
        }
        if (m_ForegroundPatternColor) {
            m_ForegroundPatternColor->toJson(&json["ForegroundPatternColor"]);
        }
        if (m_Texture) {
            json["Texture"] = shadingTextureToString(*m_Texture);
        }
    }

    void Shading::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BackgroundPatternColor") && !json["BackgroundPatternColor"].is_null()) {
            m_BackgroundPatternColor = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_BackgroundPatternColor->fromJson(&json["BackgroundPatternColor"]);
        }
        if (json.contains("ForegroundPatternColor") && !json["ForegroundPatternColor"].is_null()) {
            m_ForegroundPatternColor = std::make_shared< aspose::words::cloud::models::XmlColor >();
            m_ForegroundPatternColor->fromJson(&json["ForegroundPatternColor"]);
        }
        if (json.contains("Texture") && !json["Texture"].is_null()) {
            m_Texture = std::make_shared< aspose::words::cloud::models::Shading::Texture >(
                shadingTextureFromString(json["Texture"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Shading::getBackgroundPatternColor() const
    {
        return m_BackgroundPatternColor;
    }

    void Shading::setBackgroundPatternColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_BackgroundPatternColor = value;
    }

    std::shared_ptr< aspose::words::cloud::models::XmlColor > Shading::getForegroundPatternColor() const
    {
        return m_ForegroundPatternColor;
    }

    void Shading::setForegroundPatternColor(std::shared_ptr< aspose::words::cloud::models::XmlColor > value)
    {
        m_ForegroundPatternColor = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Shading::Texture > Shading::getTexture() const
    {
        return m_Texture;
    }

    void Shading::setTexture(std::shared_ptr< aspose::words::cloud::models::Shading::Texture > value)
    {
        m_Texture = value;
    }


    /*
     * SplitDocumentResponse implementation
     */
    void SplitDocumentResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_SplitResult) {
            m_SplitResult->toJson(&json["SplitResult"]);
        }
    }

    void SplitDocumentResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("SplitResult") && !json["SplitResult"].is_null()) {
            m_SplitResult = std::make_shared< aspose::words::cloud::models::SplitDocumentResult >();
            m_SplitResult->fromJson(&json["SplitResult"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::SplitDocumentResult > SplitDocumentResponse::getSplitResult() const
    {
        return m_SplitResult;
    }

    void SplitDocumentResponse::setSplitResult(std::shared_ptr< aspose::words::cloud::models::SplitDocumentResult > value)
    {
        m_SplitResult = value;
    }


    /*
     * SplitDocumentResult implementation
     */
    void SplitDocumentResult::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Pages) {
            json["Pages"] = ::nlohmann::json::array();
            for (auto& element : *m_Pages) {
                element->toJson(&json["Pages"].emplace_back());
            }
        }
        if (m_SourceDocument) {
            m_SourceDocument->toJson(&json["SourceDocument"]);
        }
        if (m_ZippedPages) {
            m_ZippedPages->toJson(&json["ZippedPages"]);
        }
    }

    void SplitDocumentResult::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Pages") && !json["Pages"].is_null()) {
            m_Pages = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> >();
            for (auto& element : json["Pages"]) {
                m_Pages->emplace_back(std::make_shared< aspose::words::cloud::models::FileLink >())->fromJson(&element);
            }
        }
        if (json.contains("SourceDocument") && !json["SourceDocument"].is_null()) {
            m_SourceDocument = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_SourceDocument->fromJson(&json["SourceDocument"]);
        }
        if (json.contains("ZippedPages") && !json["ZippedPages"].is_null()) {
            m_ZippedPages = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_ZippedPages->fromJson(&json["ZippedPages"]);
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> > SplitDocumentResult::getPages() const
    {
        return m_Pages;
    }

    void SplitDocumentResult::setPages(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::FileLink>> > value)
    {
        m_Pages = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > SplitDocumentResult::getSourceDocument() const
    {
        return m_SourceDocument;
    }

    void SplitDocumentResult::setSourceDocument(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_SourceDocument = value;
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > SplitDocumentResult::getZippedPages() const
    {
        return m_ZippedPages;
    }

    void SplitDocumentResult::setZippedPages(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_ZippedPages = value;
    }


    /*
     * StatDataResponse implementation
     */
    void StatDataResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_DocumentLink) {
            m_DocumentLink->toJson(&json["DocumentLink"]);
        }
        if (m_StatData) {
            m_StatData->toJson(&json["StatData"]);
        }
    }

    void StatDataResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("DocumentLink") && !json["DocumentLink"].is_null()) {
            m_DocumentLink = std::make_shared< aspose::words::cloud::models::FileLink >();
            m_DocumentLink->fromJson(&json["DocumentLink"]);
        }
        if (json.contains("StatData") && !json["StatData"].is_null()) {
            m_StatData = std::make_shared< aspose::words::cloud::models::DocumentStatData >();
            m_StatData->fromJson(&json["StatData"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::FileLink > StatDataResponse::getDocumentLink() const
    {
        return m_DocumentLink;
    }

    void StatDataResponse::setDocumentLink(std::shared_ptr< aspose::words::cloud::models::FileLink > value)
    {
        m_DocumentLink = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentStatData > StatDataResponse::getStatData() const
    {
        return m_StatData;
    }

    void StatDataResponse::setStatData(std::shared_ptr< aspose::words::cloud::models::DocumentStatData > value)
    {
        m_StatData = value;
    }


    /*
     * StorageFile implementation
     */
    void StorageFile::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsFolder) {
            json["IsFolder"] = *m_IsFolder;
        }
        if (m_ModifiedDate) {
            json["ModifiedDate"] = convertUtf16(*m_ModifiedDate);
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_Path) {
            json["Path"] = convertUtf16(*m_Path);
        }
        if (m_Size) {
            json["Size"] = *m_Size;
        }
    }

    void StorageFile::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsFolder") && !json["IsFolder"].is_null()) {
            m_IsFolder = std::make_shared< bool >(
                json["IsFolder"].get< bool >()
            );
        }
        if (json.contains("ModifiedDate") && !json["ModifiedDate"].is_null()) {
            m_ModifiedDate = std::make_shared< std::wstring >(
                convertUtf8( json["ModifiedDate"].get< std::string >() )
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("Path") && !json["Path"].is_null()) {
            m_Path = std::make_shared< std::wstring >(
                convertUtf8( json["Path"].get< std::string >() )
            );
        }
        if (json.contains("Size") && !json["Size"].is_null()) {
            m_Size = std::make_shared< int32_t >(
                json["Size"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< bool > StorageFile::getIsFolder() const
    {
        return m_IsFolder;
    }

    void StorageFile::setIsFolder(std::shared_ptr< bool > value)
    {
        m_IsFolder = value;
    }

    std::shared_ptr< std::wstring > StorageFile::getModifiedDate() const
    {
        return m_ModifiedDate;
    }

    void StorageFile::setModifiedDate(std::shared_ptr< std::wstring > value)
    {
        m_ModifiedDate = value;
    }

    std::shared_ptr< std::wstring > StorageFile::getName() const
    {
        return m_Name;
    }

    void StorageFile::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > StorageFile::getPath() const
    {
        return m_Path;
    }

    void StorageFile::setPath(std::shared_ptr< std::wstring > value)
    {
        m_Path = value;
    }

    std::shared_ptr< int32_t > StorageFile::getSize() const
    {
        return m_Size;
    }

    void StorageFile::setSize(std::shared_ptr< int32_t > value)
    {
        m_Size = value;
    }


    /*
     * StoryChildNodes implementation
     */
    void StoryChildNodes::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ChildNodes) {
            json["ChildNodes"] = ::nlohmann::json::array();
            for (auto& element : *m_ChildNodes) {
                element->toJson(&json["ChildNodes"].emplace_back());
            }
        }
    }

    void StoryChildNodes::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ChildNodes") && !json["ChildNodes"].is_null()) {
            m_ChildNodes = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> >();
            for (auto& element : json["ChildNodes"]) {
                m_ChildNodes->emplace_back(std::make_shared< aspose::words::cloud::models::NodeLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > StoryChildNodes::getChildNodes() const
    {
        return m_ChildNodes;
    }

    void StoryChildNodes::setChildNodes(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > value)
    {
        m_ChildNodes = value;
    }


    /*
     * StringFormatData implementation
     */
    inline std::string stringFormatDataAlignmentToString(aspose::words::cloud::models::StringFormatData::Alignment value)
    {
        if (value == aspose::words::cloud::models::StringFormatData::Alignment::_NEAR) return "Near";
        if (value == aspose::words::cloud::models::StringFormatData::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::StringFormatData::Alignment::_FAR) return "Far";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StringFormatData::Alignment stringFormatDataAlignmentFromString(const std::string& value)
    {
        if (value == "Near") return aspose::words::cloud::models::StringFormatData::Alignment::_NEAR;
        if (value == "Center") return aspose::words::cloud::models::StringFormatData::Alignment::CENTER;
        if (value == "Far") return aspose::words::cloud::models::StringFormatData::Alignment::_FAR;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string stringFormatDataFormatFlagsToString(aspose::words::cloud::models::StringFormatData::FormatFlags value)
    {
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::DIRECTION_RIGHT_TO_LEFT) return "DirectionRightToLeft";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::DIRECTION_VERTICAL) return "DirectionVertical";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::FIT_BLACK_BOX) return "FitBlackBox";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::DISPLAY_FORMAT_CONTROL) return "DisplayFormatControl";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::NO_FONT_FALLBACK) return "NoFontFallback";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::MEASURE_TRAILING_SPACES) return "MeasureTrailingSpaces";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::NO_WRAP) return "NoWrap";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::LINE_LIMIT) return "LineLimit";
        if (value == aspose::words::cloud::models::StringFormatData::FormatFlags::NO_CLIP) return "NoClip";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StringFormatData::FormatFlags stringFormatDataFormatFlagsFromString(const std::string& value)
    {
        if (value == "DirectionRightToLeft") return aspose::words::cloud::models::StringFormatData::FormatFlags::DIRECTION_RIGHT_TO_LEFT;
        if (value == "DirectionVertical") return aspose::words::cloud::models::StringFormatData::FormatFlags::DIRECTION_VERTICAL;
        if (value == "FitBlackBox") return aspose::words::cloud::models::StringFormatData::FormatFlags::FIT_BLACK_BOX;
        if (value == "DisplayFormatControl") return aspose::words::cloud::models::StringFormatData::FormatFlags::DISPLAY_FORMAT_CONTROL;
        if (value == "NoFontFallback") return aspose::words::cloud::models::StringFormatData::FormatFlags::NO_FONT_FALLBACK;
        if (value == "MeasureTrailingSpaces") return aspose::words::cloud::models::StringFormatData::FormatFlags::MEASURE_TRAILING_SPACES;
        if (value == "NoWrap") return aspose::words::cloud::models::StringFormatData::FormatFlags::NO_WRAP;
        if (value == "LineLimit") return aspose::words::cloud::models::StringFormatData::FormatFlags::LINE_LIMIT;
        if (value == "NoClip") return aspose::words::cloud::models::StringFormatData::FormatFlags::NO_CLIP;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string stringFormatDataHotkeyPrefixToString(aspose::words::cloud::models::StringFormatData::HotkeyPrefix value)
    {
        if (value == aspose::words::cloud::models::StringFormatData::HotkeyPrefix::NONE) return "None";
        if (value == aspose::words::cloud::models::StringFormatData::HotkeyPrefix::SHOW) return "Show";
        if (value == aspose::words::cloud::models::StringFormatData::HotkeyPrefix::HIDE) return "Hide";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StringFormatData::HotkeyPrefix stringFormatDataHotkeyPrefixFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::StringFormatData::HotkeyPrefix::NONE;
        if (value == "Show") return aspose::words::cloud::models::StringFormatData::HotkeyPrefix::SHOW;
        if (value == "Hide") return aspose::words::cloud::models::StringFormatData::HotkeyPrefix::HIDE;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string stringFormatDataLineAlignmentToString(aspose::words::cloud::models::StringFormatData::LineAlignment value)
    {
        if (value == aspose::words::cloud::models::StringFormatData::LineAlignment::_NEAR) return "Near";
        if (value == aspose::words::cloud::models::StringFormatData::LineAlignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::StringFormatData::LineAlignment::_FAR) return "Far";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StringFormatData::LineAlignment stringFormatDataLineAlignmentFromString(const std::string& value)
    {
        if (value == "Near") return aspose::words::cloud::models::StringFormatData::LineAlignment::_NEAR;
        if (value == "Center") return aspose::words::cloud::models::StringFormatData::LineAlignment::CENTER;
        if (value == "Far") return aspose::words::cloud::models::StringFormatData::LineAlignment::_FAR;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string stringFormatDataTrimmingToString(aspose::words::cloud::models::StringFormatData::Trimming value)
    {
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::NONE) return "None";
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::WORD) return "Word";
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_CHARACTER) return "EllipsisCharacter";
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_WORD) return "EllipsisWord";
        if (value == aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_PATH) return "EllipsisPath";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StringFormatData::Trimming stringFormatDataTrimmingFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::StringFormatData::Trimming::NONE;
        if (value == "Character") return aspose::words::cloud::models::StringFormatData::Trimming::CHARACTER;
        if (value == "Word") return aspose::words::cloud::models::StringFormatData::Trimming::WORD;
        if (value == "EllipsisCharacter") return aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_CHARACTER;
        if (value == "EllipsisWord") return aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_WORD;
        if (value == "EllipsisPath") return aspose::words::cloud::models::StringFormatData::Trimming::ELLIPSIS_PATH;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void StringFormatData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = stringFormatDataAlignmentToString(*m_Alignment);
        }
        if (m_FormatFlags) {
            json["FormatFlags"] = stringFormatDataFormatFlagsToString(*m_FormatFlags);
        }
        if (m_HotkeyPrefix) {
            json["HotkeyPrefix"] = stringFormatDataHotkeyPrefixToString(*m_HotkeyPrefix);
        }
        if (m_LineAlignment) {
            json["LineAlignment"] = stringFormatDataLineAlignmentToString(*m_LineAlignment);
        }
        if (m_Trimming) {
            json["Trimming"] = stringFormatDataTrimmingToString(*m_Trimming);
        }
    }

    void StringFormatData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::StringFormatData::Alignment >(
                stringFormatDataAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("FormatFlags") && !json["FormatFlags"].is_null()) {
            m_FormatFlags = std::make_shared< aspose::words::cloud::models::StringFormatData::FormatFlags >(
                stringFormatDataFormatFlagsFromString(json["FormatFlags"].get< std::string >())
            );
        }
        if (json.contains("HotkeyPrefix") && !json["HotkeyPrefix"].is_null()) {
            m_HotkeyPrefix = std::make_shared< aspose::words::cloud::models::StringFormatData::HotkeyPrefix >(
                stringFormatDataHotkeyPrefixFromString(json["HotkeyPrefix"].get< std::string >())
            );
        }
        if (json.contains("LineAlignment") && !json["LineAlignment"].is_null()) {
            m_LineAlignment = std::make_shared< aspose::words::cloud::models::StringFormatData::LineAlignment >(
                stringFormatDataLineAlignmentFromString(json["LineAlignment"].get< std::string >())
            );
        }
        if (json.contains("Trimming") && !json["Trimming"].is_null()) {
            m_Trimming = std::make_shared< aspose::words::cloud::models::StringFormatData::Trimming >(
                stringFormatDataTrimmingFromString(json["Trimming"].get< std::string >())
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData::Alignment > StringFormatData::getAlignment() const
    {
        return m_Alignment;
    }

    void StringFormatData::setAlignment(std::shared_ptr< aspose::words::cloud::models::StringFormatData::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData::FormatFlags > StringFormatData::getFormatFlags() const
    {
        return m_FormatFlags;
    }

    void StringFormatData::setFormatFlags(std::shared_ptr< aspose::words::cloud::models::StringFormatData::FormatFlags > value)
    {
        m_FormatFlags = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData::HotkeyPrefix > StringFormatData::getHotkeyPrefix() const
    {
        return m_HotkeyPrefix;
    }

    void StringFormatData::setHotkeyPrefix(std::shared_ptr< aspose::words::cloud::models::StringFormatData::HotkeyPrefix > value)
    {
        m_HotkeyPrefix = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData::LineAlignment > StringFormatData::getLineAlignment() const
    {
        return m_LineAlignment;
    }

    void StringFormatData::setLineAlignment(std::shared_ptr< aspose::words::cloud::models::StringFormatData::LineAlignment > value)
    {
        m_LineAlignment = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StringFormatData::Trimming > StringFormatData::getTrimming() const
    {
        return m_Trimming;
    }

    void StringFormatData::setTrimming(std::shared_ptr< aspose::words::cloud::models::StringFormatData::Trimming > value)
    {
        m_Trimming = value;
    }


    /*
     * Style implementation
     */
    inline std::string styleStyleIdentifierToString(aspose::words::cloud::models::Style::StyleIdentifier value)
    {
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING1) return "Heading1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING2) return "Heading2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING3) return "Heading3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING4) return "Heading4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING5) return "Heading5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING6) return "Heading6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING7) return "Heading7";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING8) return "Heading8";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADING9) return "Heading9";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX1) return "Index1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX2) return "Index2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX3) return "Index3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX4) return "Index4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX5) return "Index5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX6) return "Index6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX7) return "Index7";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX8) return "Index8";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX9) return "Index9";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC1) return "Toc1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC2) return "Toc2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC3) return "Toc3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC4) return "Toc4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC5) return "Toc5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC6) return "Toc6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC7) return "Toc7";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC8) return "Toc8";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC9) return "Toc9";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NORMAL_INDENT) return "NormalIndent";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::FOOTNOTE_TEXT) return "FootnoteText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_TEXT) return "CommentText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HEADER) return "Header";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::FOOTER) return "Footer";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INDEX_HEADING) return "IndexHeading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::CAPTION) return "Caption";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_OF_FIGURES) return "TableOfFigures";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::ENVELOPE_ADDRESS) return "EnvelopeAddress";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::ENVELOPE_RETURN) return "EnvelopeReturn";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::FOOTNOTE_REFERENCE) return "FootnoteReference";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_REFERENCE) return "CommentReference";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LINE_NUMBER) return "LineNumber";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PAGE_NUMBER) return "PageNumber";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::ENDNOTE_REFERENCE) return "EndnoteReference";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::ENDNOTE_TEXT) return "EndnoteText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_OF_AUTHORITIES) return "TableOfAuthorities";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MACRO) return "Macro";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOA_HEADING) return "ToaHeading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST) return "List";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET) return "ListBullet";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER) return "ListNumber";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST2) return "List2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST3) return "List3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST4) return "List4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST5) return "List5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET2) return "ListBullet2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET3) return "ListBullet3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET4) return "ListBullet4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET5) return "ListBullet5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER2) return "ListNumber2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER3) return "ListNumber3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER4) return "ListNumber4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER5) return "ListNumber5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TITLE) return "Title";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::CLOSING) return "Closing";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SIGNATURE) return "Signature";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DEFAULT_PARAGRAPH_FONT) return "DefaultParagraphFont";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT) return "BodyText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND) return "BodyTextInd";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE) return "ListContinue";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE2) return "ListContinue2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE3) return "ListContinue3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE4) return "ListContinue4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE5) return "ListContinue5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MESSAGE_HEADER) return "MessageHeader";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SUBTITLE) return "Subtitle";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SALUTATION) return "Salutation";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DATE) return "Date";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT1_I) return "BodyText1I";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT1_I2) return "BodyText1I2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NOTE_HEADING) return "NoteHeading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT2) return "BodyText2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT3) return "BodyText3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND2) return "BodyTextInd2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND3) return "BodyTextInd3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BLOCK_TEXT) return "BlockText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HYPERLINK) return "Hyperlink";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::FOLLOWED_HYPERLINK) return "FollowedHyperlink";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::STRONG) return "Strong";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::EMPHASIS) return "Emphasis";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DOCUMENT_MAP) return "DocumentMap";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TEXT) return "PlainText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::EMAIL_SIGNATURE) return "EmailSignature";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_TOP_OF_FORM) return "HtmlTopOfForm";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_BOTTOM_OF_FORM) return "HtmlBottomOfForm";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NORMAL_WEB) return "NormalWeb";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_ACRONYM) return "HtmlAcronym";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_ADDRESS) return "HtmlAddress";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_CITE) return "HtmlCite";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_CODE) return "HtmlCode";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_DEFINITION) return "HtmlDefinition";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_KEYBOARD) return "HtmlKeyboard";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_PREFORMATTED) return "HtmlPreformatted";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_SAMPLE) return "HtmlSample";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_TYPEWRITER) return "HtmlTypewriter";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::HTML_VARIABLE) return "HtmlVariable";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_NORMAL) return "TableNormal";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_SUBJECT) return "CommentSubject";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NO_LIST) return "NoList";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST1) return "OutlineList1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST2) return "OutlineList2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST3) return "OutlineList3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE1) return "TableSimple1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE2) return "TableSimple2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE3) return "TableSimple3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC1) return "TableClassic1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC2) return "TableClassic2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC3) return "TableClassic3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC4) return "TableClassic4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL1) return "TableColorful1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL2) return "TableColorful2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL3) return "TableColorful3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS1) return "TableColumns1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS2) return "TableColumns2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS3) return "TableColumns3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS4) return "TableColumns4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS5) return "TableColumns5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID1) return "TableGrid1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID2) return "TableGrid2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID3) return "TableGrid3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID4) return "TableGrid4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID5) return "TableGrid5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID6) return "TableGrid6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID7) return "TableGrid7";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID8) return "TableGrid8";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST1) return "TableList1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST2) return "TableList2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST3) return "TableList3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST4) return "TableList4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST5) return "TableList5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST6) return "TableList6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST7) return "TableList7";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST8) return "TableList8";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS1) return "Table3DEffects1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS2) return "Table3DEffects2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS3) return "Table3DEffects3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CONTEMPORARY) return "TableContemporary";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_ELEGANT) return "TableElegant";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_PROFESSIONAL) return "TableProfessional";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SUBTLE1) return "TableSubtle1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SUBTLE2) return "TableSubtle2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB1) return "TableWeb1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB2) return "TableWeb2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB3) return "TableWeb3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BALLOON_TEXT) return "BalloonText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID) return "TableGrid";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_THEME) return "TableTheme";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLACEHOLDER_TEXT) return "PlaceholderText";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NO_SPACING) return "NoSpacing";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING) return "LightShading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST) return "LightList";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID) return "LightGrid";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1) return "MediumShading1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2) return "MediumShading2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1) return "MediumList1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2) return "MediumList2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1) return "MediumGrid1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2) return "MediumGrid2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3) return "MediumGrid3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST) return "DarkList";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING) return "ColorfulShading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST) return "ColorfulList";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID) return "ColorfulGrid";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT1) return "LightShadingAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT1) return "LightListAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT1) return "LightGridAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT1) return "MediumShading1Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT1) return "MediumShading2Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT1) return "MediumList1Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::REVISION) return "Revision";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_PARAGRAPH) return "ListParagraph";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::QUOTE) return "Quote";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_QUOTE) return "IntenseQuote";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT1) return "MediumList2Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT1) return "MediumGrid1Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT1) return "MediumGrid2Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT1) return "MediumGrid3Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT1) return "DarkListAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT1) return "ColorfulShadingAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT1) return "ColorfulListAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT1) return "ColorfulGridAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT2) return "LightShadingAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT2) return "LightListAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT2) return "LightGridAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT2) return "MediumShading1Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT2) return "MediumShading2Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT2) return "MediumList1Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT2) return "MediumList2Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT2) return "MediumGrid1Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT2) return "MediumGrid2Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT2) return "MediumGrid3Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT2) return "DarkListAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT2) return "ColorfulShadingAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT2) return "ColorfulListAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT2) return "ColorfulGridAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT3) return "LightShadingAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT3) return "LightListAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT3) return "LightGridAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT3) return "MediumShading1Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT3) return "MediumShading2Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT3) return "MediumList1Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT3) return "MediumList2Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT3) return "MediumGrid1Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT3) return "MediumGrid2Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT3) return "MediumGrid3Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT3) return "DarkListAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT3) return "ColorfulShadingAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT3) return "ColorfulListAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT3) return "ColorfulGridAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT4) return "LightShadingAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT4) return "LightListAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT4) return "LightGridAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT4) return "MediumShading1Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT4) return "MediumShading2Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT4) return "MediumList1Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT4) return "MediumList2Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT4) return "MediumGrid1Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT4) return "MediumGrid2Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT4) return "MediumGrid3Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT4) return "DarkListAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT4) return "ColorfulShadingAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT4) return "ColorfulListAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT4) return "ColorfulGridAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT5) return "LightShadingAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT5) return "LightListAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT5) return "LightGridAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT5) return "MediumShading1Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT5) return "MediumShading2Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT5) return "MediumList1Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT5) return "MediumList2Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT5) return "MediumGrid1Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT5) return "MediumGrid2Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT5) return "MediumGrid3Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT5) return "DarkListAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT5) return "ColorfulShadingAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT5) return "ColorfulListAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT5) return "ColorfulGridAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT6) return "LightShadingAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT6) return "LightListAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT6) return "LightGridAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT6) return "MediumShading1Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT6) return "MediumShading2Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT6) return "MediumList1Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT6) return "MediumList2Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT6) return "MediumGrid1Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT6) return "MediumGrid2Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT6) return "MediumGrid3Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT6) return "DarkListAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT6) return "ColorfulShadingAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT6) return "ColorfulListAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT6) return "ColorfulGridAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SUBTLE_EMPHASIS) return "SubtleEmphasis";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_EMPHASIS) return "IntenseEmphasis";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SUBTLE_REFERENCE) return "SubtleReference";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_REFERENCE) return "IntenseReference";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BOOK_TITLE) return "BookTitle";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::BIBLIOGRAPHY) return "Bibliography";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TOC_HEADING) return "TocHeading";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE1) return "PlainTable1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE2) return "PlainTable2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE3) return "PlainTable3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE4) return "PlainTable4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE5) return "PlainTable5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID_LIGHT) return "TableGridLight";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT) return "GridTable1Light";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2) return "GridTable2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3) return "GridTable3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4) return "GridTable4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK) return "GridTable5Dark";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL) return "GridTable6Colorful";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL) return "GridTable7Colorful";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1) return "GridTable1LightAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT1) return "GridTable2Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT1) return "GridTable3Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT1) return "GridTable4Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1) return "GridTable5DarkAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1) return "GridTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1) return "GridTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2) return "GridTable1LightAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT2) return "GridTable2Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT2) return "GridTable3Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT2) return "GridTable4Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2) return "GridTable5DarkAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2) return "GridTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2) return "GridTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3) return "GridTable1LightAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT3) return "GridTable2Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT3) return "GridTable3Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT3) return "GridTable4Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3) return "GridTable5DarkAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3) return "GridTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3) return "GridTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4) return "GridTable1LightAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT4) return "GridTable2Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT4) return "GridTable3Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT4) return "GridTable4Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4) return "GridTable5DarkAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4) return "GridTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4) return "GridTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5) return "GridTable1LightAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT5) return "GridTable2Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT5) return "GridTable3Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT5) return "GridTable4Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5) return "GridTable5DarkAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5) return "GridTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5) return "GridTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6) return "GridTable1LightAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT6) return "GridTable2Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT6) return "GridTable3Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT6) return "GridTable4Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6) return "GridTable5DarkAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6) return "GridTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6) return "GridTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT) return "ListTable1Light";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2) return "ListTable2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3) return "ListTable3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4) return "ListTable4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK) return "ListTable5Dark";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL) return "ListTable6Colorful";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL) return "ListTable7Colorful";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1) return "ListTable1LightAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT1) return "ListTable2Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT1) return "ListTable3Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT1) return "ListTable4Accent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1) return "ListTable5DarkAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1) return "ListTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1) return "ListTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2) return "ListTable1LightAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT2) return "ListTable2Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT2) return "ListTable3Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT2) return "ListTable4Accent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2) return "ListTable5DarkAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2) return "ListTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2) return "ListTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3) return "ListTable1LightAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT3) return "ListTable2Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT3) return "ListTable3Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT3) return "ListTable4Accent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3) return "ListTable5DarkAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3) return "ListTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3) return "ListTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4) return "ListTable1LightAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT4) return "ListTable2Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT4) return "ListTable3Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT4) return "ListTable4Accent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4) return "ListTable5DarkAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4) return "ListTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4) return "ListTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5) return "ListTable1LightAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT5) return "ListTable2Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT5) return "ListTable3Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT5) return "ListTable4Accent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5) return "ListTable5DarkAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5) return "ListTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5) return "ListTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6) return "ListTable1LightAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT6) return "ListTable2Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT6) return "ListTable3Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT6) return "ListTable4Accent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6) return "ListTable5DarkAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6) return "ListTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6) return "ListTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::SMART_LINK) return "SmartLink";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::USER) return "User";
        if (value == aspose::words::cloud::models::Style::StyleIdentifier::NIL) return "Nil";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Style::StyleIdentifier styleStyleIdentifierFromString(const std::string& value)
    {
        if (value == "Normal") return aspose::words::cloud::models::Style::StyleIdentifier::NORMAL;
        if (value == "Heading1") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING1;
        if (value == "Heading2") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING2;
        if (value == "Heading3") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING3;
        if (value == "Heading4") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING4;
        if (value == "Heading5") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING5;
        if (value == "Heading6") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING6;
        if (value == "Heading7") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING7;
        if (value == "Heading8") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING8;
        if (value == "Heading9") return aspose::words::cloud::models::Style::StyleIdentifier::HEADING9;
        if (value == "Index1") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX1;
        if (value == "Index2") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX2;
        if (value == "Index3") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX3;
        if (value == "Index4") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX4;
        if (value == "Index5") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX5;
        if (value == "Index6") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX6;
        if (value == "Index7") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX7;
        if (value == "Index8") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX8;
        if (value == "Index9") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX9;
        if (value == "Toc1") return aspose::words::cloud::models::Style::StyleIdentifier::TOC1;
        if (value == "Toc2") return aspose::words::cloud::models::Style::StyleIdentifier::TOC2;
        if (value == "Toc3") return aspose::words::cloud::models::Style::StyleIdentifier::TOC3;
        if (value == "Toc4") return aspose::words::cloud::models::Style::StyleIdentifier::TOC4;
        if (value == "Toc5") return aspose::words::cloud::models::Style::StyleIdentifier::TOC5;
        if (value == "Toc6") return aspose::words::cloud::models::Style::StyleIdentifier::TOC6;
        if (value == "Toc7") return aspose::words::cloud::models::Style::StyleIdentifier::TOC7;
        if (value == "Toc8") return aspose::words::cloud::models::Style::StyleIdentifier::TOC8;
        if (value == "Toc9") return aspose::words::cloud::models::Style::StyleIdentifier::TOC9;
        if (value == "NormalIndent") return aspose::words::cloud::models::Style::StyleIdentifier::NORMAL_INDENT;
        if (value == "FootnoteText") return aspose::words::cloud::models::Style::StyleIdentifier::FOOTNOTE_TEXT;
        if (value == "CommentText") return aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_TEXT;
        if (value == "Header") return aspose::words::cloud::models::Style::StyleIdentifier::HEADER;
        if (value == "Footer") return aspose::words::cloud::models::Style::StyleIdentifier::FOOTER;
        if (value == "IndexHeading") return aspose::words::cloud::models::Style::StyleIdentifier::INDEX_HEADING;
        if (value == "Caption") return aspose::words::cloud::models::Style::StyleIdentifier::CAPTION;
        if (value == "TableOfFigures") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_OF_FIGURES;
        if (value == "EnvelopeAddress") return aspose::words::cloud::models::Style::StyleIdentifier::ENVELOPE_ADDRESS;
        if (value == "EnvelopeReturn") return aspose::words::cloud::models::Style::StyleIdentifier::ENVELOPE_RETURN;
        if (value == "FootnoteReference") return aspose::words::cloud::models::Style::StyleIdentifier::FOOTNOTE_REFERENCE;
        if (value == "CommentReference") return aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_REFERENCE;
        if (value == "LineNumber") return aspose::words::cloud::models::Style::StyleIdentifier::LINE_NUMBER;
        if (value == "PageNumber") return aspose::words::cloud::models::Style::StyleIdentifier::PAGE_NUMBER;
        if (value == "EndnoteReference") return aspose::words::cloud::models::Style::StyleIdentifier::ENDNOTE_REFERENCE;
        if (value == "EndnoteText") return aspose::words::cloud::models::Style::StyleIdentifier::ENDNOTE_TEXT;
        if (value == "TableOfAuthorities") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_OF_AUTHORITIES;
        if (value == "Macro") return aspose::words::cloud::models::Style::StyleIdentifier::MACRO;
        if (value == "ToaHeading") return aspose::words::cloud::models::Style::StyleIdentifier::TOA_HEADING;
        if (value == "List") return aspose::words::cloud::models::Style::StyleIdentifier::LIST;
        if (value == "ListBullet") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET;
        if (value == "ListNumber") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER;
        if (value == "List2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST2;
        if (value == "List3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST3;
        if (value == "List4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST4;
        if (value == "List5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST5;
        if (value == "ListBullet2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET2;
        if (value == "ListBullet3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET3;
        if (value == "ListBullet4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET4;
        if (value == "ListBullet5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_BULLET5;
        if (value == "ListNumber2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER2;
        if (value == "ListNumber3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER3;
        if (value == "ListNumber4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER4;
        if (value == "ListNumber5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_NUMBER5;
        if (value == "Title") return aspose::words::cloud::models::Style::StyleIdentifier::TITLE;
        if (value == "Closing") return aspose::words::cloud::models::Style::StyleIdentifier::CLOSING;
        if (value == "Signature") return aspose::words::cloud::models::Style::StyleIdentifier::SIGNATURE;
        if (value == "DefaultParagraphFont") return aspose::words::cloud::models::Style::StyleIdentifier::DEFAULT_PARAGRAPH_FONT;
        if (value == "BodyText") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT;
        if (value == "BodyTextInd") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND;
        if (value == "ListContinue") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE;
        if (value == "ListContinue2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE2;
        if (value == "ListContinue3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE3;
        if (value == "ListContinue4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE4;
        if (value == "ListContinue5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_CONTINUE5;
        if (value == "MessageHeader") return aspose::words::cloud::models::Style::StyleIdentifier::MESSAGE_HEADER;
        if (value == "Subtitle") return aspose::words::cloud::models::Style::StyleIdentifier::SUBTITLE;
        if (value == "Salutation") return aspose::words::cloud::models::Style::StyleIdentifier::SALUTATION;
        if (value == "Date") return aspose::words::cloud::models::Style::StyleIdentifier::DATE;
        if (value == "BodyText1I") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT1_I;
        if (value == "BodyText1I2") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT1_I2;
        if (value == "NoteHeading") return aspose::words::cloud::models::Style::StyleIdentifier::NOTE_HEADING;
        if (value == "BodyText2") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT2;
        if (value == "BodyText3") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT3;
        if (value == "BodyTextInd2") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND2;
        if (value == "BodyTextInd3") return aspose::words::cloud::models::Style::StyleIdentifier::BODY_TEXT_IND3;
        if (value == "BlockText") return aspose::words::cloud::models::Style::StyleIdentifier::BLOCK_TEXT;
        if (value == "Hyperlink") return aspose::words::cloud::models::Style::StyleIdentifier::HYPERLINK;
        if (value == "FollowedHyperlink") return aspose::words::cloud::models::Style::StyleIdentifier::FOLLOWED_HYPERLINK;
        if (value == "Strong") return aspose::words::cloud::models::Style::StyleIdentifier::STRONG;
        if (value == "Emphasis") return aspose::words::cloud::models::Style::StyleIdentifier::EMPHASIS;
        if (value == "DocumentMap") return aspose::words::cloud::models::Style::StyleIdentifier::DOCUMENT_MAP;
        if (value == "PlainText") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TEXT;
        if (value == "EmailSignature") return aspose::words::cloud::models::Style::StyleIdentifier::EMAIL_SIGNATURE;
        if (value == "HtmlTopOfForm") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_TOP_OF_FORM;
        if (value == "HtmlBottomOfForm") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_BOTTOM_OF_FORM;
        if (value == "NormalWeb") return aspose::words::cloud::models::Style::StyleIdentifier::NORMAL_WEB;
        if (value == "HtmlAcronym") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_ACRONYM;
        if (value == "HtmlAddress") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_ADDRESS;
        if (value == "HtmlCite") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_CITE;
        if (value == "HtmlCode") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_CODE;
        if (value == "HtmlDefinition") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_DEFINITION;
        if (value == "HtmlKeyboard") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_KEYBOARD;
        if (value == "HtmlPreformatted") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_PREFORMATTED;
        if (value == "HtmlSample") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_SAMPLE;
        if (value == "HtmlTypewriter") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_TYPEWRITER;
        if (value == "HtmlVariable") return aspose::words::cloud::models::Style::StyleIdentifier::HTML_VARIABLE;
        if (value == "TableNormal") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_NORMAL;
        if (value == "CommentSubject") return aspose::words::cloud::models::Style::StyleIdentifier::COMMENT_SUBJECT;
        if (value == "NoList") return aspose::words::cloud::models::Style::StyleIdentifier::NO_LIST;
        if (value == "OutlineList1") return aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST1;
        if (value == "OutlineList2") return aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST2;
        if (value == "OutlineList3") return aspose::words::cloud::models::Style::StyleIdentifier::OUTLINE_LIST3;
        if (value == "TableSimple1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE1;
        if (value == "TableSimple2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE2;
        if (value == "TableSimple3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SIMPLE3;
        if (value == "TableClassic1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC1;
        if (value == "TableClassic2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC2;
        if (value == "TableClassic3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC3;
        if (value == "TableClassic4") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CLASSIC4;
        if (value == "TableColorful1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL1;
        if (value == "TableColorful2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL2;
        if (value == "TableColorful3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLORFUL3;
        if (value == "TableColumns1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS1;
        if (value == "TableColumns2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS2;
        if (value == "TableColumns3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS3;
        if (value == "TableColumns4") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS4;
        if (value == "TableColumns5") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_COLUMNS5;
        if (value == "TableGrid1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID1;
        if (value == "TableGrid2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID2;
        if (value == "TableGrid3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID3;
        if (value == "TableGrid4") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID4;
        if (value == "TableGrid5") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID5;
        if (value == "TableGrid6") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID6;
        if (value == "TableGrid7") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID7;
        if (value == "TableGrid8") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID8;
        if (value == "TableList1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST1;
        if (value == "TableList2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST2;
        if (value == "TableList3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST3;
        if (value == "TableList4") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST4;
        if (value == "TableList5") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST5;
        if (value == "TableList6") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST6;
        if (value == "TableList7") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST7;
        if (value == "TableList8") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_LIST8;
        if (value == "Table3DEffects1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS1;
        if (value == "Table3DEffects2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS2;
        if (value == "Table3DEffects3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE3_D_EFFECTS3;
        if (value == "TableContemporary") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_CONTEMPORARY;
        if (value == "TableElegant") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_ELEGANT;
        if (value == "TableProfessional") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_PROFESSIONAL;
        if (value == "TableSubtle1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SUBTLE1;
        if (value == "TableSubtle2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_SUBTLE2;
        if (value == "TableWeb1") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB1;
        if (value == "TableWeb2") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB2;
        if (value == "TableWeb3") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_WEB3;
        if (value == "BalloonText") return aspose::words::cloud::models::Style::StyleIdentifier::BALLOON_TEXT;
        if (value == "TableGrid") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID;
        if (value == "TableTheme") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_THEME;
        if (value == "PlaceholderText") return aspose::words::cloud::models::Style::StyleIdentifier::PLACEHOLDER_TEXT;
        if (value == "NoSpacing") return aspose::words::cloud::models::Style::StyleIdentifier::NO_SPACING;
        if (value == "LightShading") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING;
        if (value == "LightList") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST;
        if (value == "LightGrid") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID;
        if (value == "MediumShading1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1;
        if (value == "MediumShading2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2;
        if (value == "MediumList1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1;
        if (value == "MediumList2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2;
        if (value == "MediumGrid1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1;
        if (value == "MediumGrid2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2;
        if (value == "MediumGrid3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3;
        if (value == "DarkList") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST;
        if (value == "ColorfulShading") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING;
        if (value == "ColorfulList") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST;
        if (value == "ColorfulGrid") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID;
        if (value == "LightShadingAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT1;
        if (value == "LightListAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT1;
        if (value == "LightGridAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT1;
        if (value == "MediumShading1Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT1;
        if (value == "MediumShading2Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT1;
        if (value == "MediumList1Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT1;
        if (value == "Revision") return aspose::words::cloud::models::Style::StyleIdentifier::REVISION;
        if (value == "ListParagraph") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_PARAGRAPH;
        if (value == "Quote") return aspose::words::cloud::models::Style::StyleIdentifier::QUOTE;
        if (value == "IntenseQuote") return aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_QUOTE;
        if (value == "MediumList2Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT1;
        if (value == "MediumGrid1Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT1;
        if (value == "MediumGrid2Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT1;
        if (value == "MediumGrid3Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT1;
        if (value == "DarkListAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT1;
        if (value == "ColorfulShadingAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT1;
        if (value == "ColorfulListAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT1;
        if (value == "ColorfulGridAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT1;
        if (value == "LightShadingAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT2;
        if (value == "LightListAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT2;
        if (value == "LightGridAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT2;
        if (value == "MediumShading1Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT2;
        if (value == "MediumShading2Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT2;
        if (value == "MediumList1Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT2;
        if (value == "MediumList2Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT2;
        if (value == "MediumGrid1Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT2;
        if (value == "MediumGrid2Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT2;
        if (value == "MediumGrid3Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT2;
        if (value == "DarkListAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT2;
        if (value == "ColorfulShadingAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT2;
        if (value == "ColorfulListAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT2;
        if (value == "ColorfulGridAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT2;
        if (value == "LightShadingAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT3;
        if (value == "LightListAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT3;
        if (value == "LightGridAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT3;
        if (value == "MediumShading1Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT3;
        if (value == "MediumShading2Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT3;
        if (value == "MediumList1Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT3;
        if (value == "MediumList2Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT3;
        if (value == "MediumGrid1Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT3;
        if (value == "MediumGrid2Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT3;
        if (value == "MediumGrid3Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT3;
        if (value == "DarkListAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT3;
        if (value == "ColorfulShadingAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT3;
        if (value == "ColorfulListAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT3;
        if (value == "ColorfulGridAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT3;
        if (value == "LightShadingAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT4;
        if (value == "LightListAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT4;
        if (value == "LightGridAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT4;
        if (value == "MediumShading1Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT4;
        if (value == "MediumShading2Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT4;
        if (value == "MediumList1Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT4;
        if (value == "MediumList2Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT4;
        if (value == "MediumGrid1Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT4;
        if (value == "MediumGrid2Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT4;
        if (value == "MediumGrid3Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT4;
        if (value == "DarkListAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT4;
        if (value == "ColorfulShadingAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT4;
        if (value == "ColorfulListAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT4;
        if (value == "ColorfulGridAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT4;
        if (value == "LightShadingAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT5;
        if (value == "LightListAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT5;
        if (value == "LightGridAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT5;
        if (value == "MediumShading1Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT5;
        if (value == "MediumShading2Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT5;
        if (value == "MediumList1Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT5;
        if (value == "MediumList2Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT5;
        if (value == "MediumGrid1Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT5;
        if (value == "MediumGrid2Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT5;
        if (value == "MediumGrid3Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT5;
        if (value == "DarkListAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT5;
        if (value == "ColorfulShadingAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT5;
        if (value == "ColorfulListAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT5;
        if (value == "ColorfulGridAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT5;
        if (value == "LightShadingAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_SHADING_ACCENT6;
        if (value == "LightListAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_LIST_ACCENT6;
        if (value == "LightGridAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIGHT_GRID_ACCENT6;
        if (value == "MediumShading1Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING1_ACCENT6;
        if (value == "MediumShading2Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_SHADING2_ACCENT6;
        if (value == "MediumList1Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST1_ACCENT6;
        if (value == "MediumList2Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_LIST2_ACCENT6;
        if (value == "MediumGrid1Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID1_ACCENT6;
        if (value == "MediumGrid2Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID2_ACCENT6;
        if (value == "MediumGrid3Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::MEDIUM_GRID3_ACCENT6;
        if (value == "DarkListAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::DARK_LIST_ACCENT6;
        if (value == "ColorfulShadingAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_SHADING_ACCENT6;
        if (value == "ColorfulListAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_LIST_ACCENT6;
        if (value == "ColorfulGridAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::COLORFUL_GRID_ACCENT6;
        if (value == "SubtleEmphasis") return aspose::words::cloud::models::Style::StyleIdentifier::SUBTLE_EMPHASIS;
        if (value == "IntenseEmphasis") return aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_EMPHASIS;
        if (value == "SubtleReference") return aspose::words::cloud::models::Style::StyleIdentifier::SUBTLE_REFERENCE;
        if (value == "IntenseReference") return aspose::words::cloud::models::Style::StyleIdentifier::INTENSE_REFERENCE;
        if (value == "BookTitle") return aspose::words::cloud::models::Style::StyleIdentifier::BOOK_TITLE;
        if (value == "Bibliography") return aspose::words::cloud::models::Style::StyleIdentifier::BIBLIOGRAPHY;
        if (value == "TocHeading") return aspose::words::cloud::models::Style::StyleIdentifier::TOC_HEADING;
        if (value == "PlainTable1") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE1;
        if (value == "PlainTable2") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE2;
        if (value == "PlainTable3") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE3;
        if (value == "PlainTable4") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE4;
        if (value == "PlainTable5") return aspose::words::cloud::models::Style::StyleIdentifier::PLAIN_TABLE5;
        if (value == "TableGridLight") return aspose::words::cloud::models::Style::StyleIdentifier::TABLE_GRID_LIGHT;
        if (value == "GridTable1Light") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT;
        if (value == "GridTable2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2;
        if (value == "GridTable3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3;
        if (value == "GridTable4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4;
        if (value == "GridTable5Dark") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK;
        if (value == "GridTable6Colorful") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL;
        if (value == "GridTable7Colorful") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL;
        if (value == "GridTable1LightAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1;
        if (value == "GridTable2Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT1;
        if (value == "GridTable3Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT1;
        if (value == "GridTable4Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT1;
        if (value == "GridTable5DarkAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1;
        if (value == "GridTable6ColorfulAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1;
        if (value == "GridTable7ColorfulAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1;
        if (value == "GridTable1LightAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2;
        if (value == "GridTable2Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT2;
        if (value == "GridTable3Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT2;
        if (value == "GridTable4Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT2;
        if (value == "GridTable5DarkAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2;
        if (value == "GridTable6ColorfulAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2;
        if (value == "GridTable7ColorfulAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2;
        if (value == "GridTable1LightAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3;
        if (value == "GridTable2Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT3;
        if (value == "GridTable3Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT3;
        if (value == "GridTable4Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT3;
        if (value == "GridTable5DarkAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3;
        if (value == "GridTable6ColorfulAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3;
        if (value == "GridTable7ColorfulAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3;
        if (value == "GridTable1LightAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4;
        if (value == "GridTable2Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT4;
        if (value == "GridTable3Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT4;
        if (value == "GridTable4Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT4;
        if (value == "GridTable5DarkAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4;
        if (value == "GridTable6ColorfulAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4;
        if (value == "GridTable7ColorfulAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4;
        if (value == "GridTable1LightAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5;
        if (value == "GridTable2Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT5;
        if (value == "GridTable3Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT5;
        if (value == "GridTable4Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT5;
        if (value == "GridTable5DarkAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5;
        if (value == "GridTable6ColorfulAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5;
        if (value == "GridTable7ColorfulAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5;
        if (value == "GridTable1LightAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6;
        if (value == "GridTable2Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE2_ACCENT6;
        if (value == "GridTable3Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE3_ACCENT6;
        if (value == "GridTable4Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE4_ACCENT6;
        if (value == "GridTable5DarkAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6;
        if (value == "GridTable6ColorfulAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6;
        if (value == "GridTable7ColorfulAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6;
        if (value == "ListTable1Light") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT;
        if (value == "ListTable2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2;
        if (value == "ListTable3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3;
        if (value == "ListTable4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4;
        if (value == "ListTable5Dark") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK;
        if (value == "ListTable6Colorful") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL;
        if (value == "ListTable7Colorful") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL;
        if (value == "ListTable1LightAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1;
        if (value == "ListTable2Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT1;
        if (value == "ListTable3Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT1;
        if (value == "ListTable4Accent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT1;
        if (value == "ListTable5DarkAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1;
        if (value == "ListTable6ColorfulAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1;
        if (value == "ListTable7ColorfulAccent1") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1;
        if (value == "ListTable1LightAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2;
        if (value == "ListTable2Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT2;
        if (value == "ListTable3Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT2;
        if (value == "ListTable4Accent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT2;
        if (value == "ListTable5DarkAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2;
        if (value == "ListTable6ColorfulAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2;
        if (value == "ListTable7ColorfulAccent2") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2;
        if (value == "ListTable1LightAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3;
        if (value == "ListTable2Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT3;
        if (value == "ListTable3Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT3;
        if (value == "ListTable4Accent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT3;
        if (value == "ListTable5DarkAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3;
        if (value == "ListTable6ColorfulAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3;
        if (value == "ListTable7ColorfulAccent3") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3;
        if (value == "ListTable1LightAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4;
        if (value == "ListTable2Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT4;
        if (value == "ListTable3Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT4;
        if (value == "ListTable4Accent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT4;
        if (value == "ListTable5DarkAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4;
        if (value == "ListTable6ColorfulAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4;
        if (value == "ListTable7ColorfulAccent4") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4;
        if (value == "ListTable1LightAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5;
        if (value == "ListTable2Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT5;
        if (value == "ListTable3Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT5;
        if (value == "ListTable4Accent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT5;
        if (value == "ListTable5DarkAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5;
        if (value == "ListTable6ColorfulAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5;
        if (value == "ListTable7ColorfulAccent5") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5;
        if (value == "ListTable1LightAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6;
        if (value == "ListTable2Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE2_ACCENT6;
        if (value == "ListTable3Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE3_ACCENT6;
        if (value == "ListTable4Accent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE4_ACCENT6;
        if (value == "ListTable5DarkAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6;
        if (value == "ListTable6ColorfulAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6;
        if (value == "ListTable7ColorfulAccent6") return aspose::words::cloud::models::Style::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6;
        if (value == "SmartLink") return aspose::words::cloud::models::Style::StyleIdentifier::SMART_LINK;
        if (value == "User") return aspose::words::cloud::models::Style::StyleIdentifier::USER;
        if (value == "Nil") return aspose::words::cloud::models::Style::StyleIdentifier::NIL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string styleTypeToString(aspose::words::cloud::models::Style::Type value)
    {
        if (value == aspose::words::cloud::models::Style::Type::PARAGRAPH) return "Paragraph";
        if (value == aspose::words::cloud::models::Style::Type::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::Style::Type::TABLE) return "Table";
        if (value == aspose::words::cloud::models::Style::Type::LIST) return "List";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::Style::Type styleTypeFromString(const std::string& value)
    {
        if (value == "Paragraph") return aspose::words::cloud::models::Style::Type::PARAGRAPH;
        if (value == "Character") return aspose::words::cloud::models::Style::Type::CHARACTER;
        if (value == "Table") return aspose::words::cloud::models::Style::Type::TABLE;
        if (value == "List") return aspose::words::cloud::models::Style::Type::LIST;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void Style::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Aliases) {
            json["Aliases"] = ::nlohmann::json::array();
            for (auto& element : *m_Aliases) {
                json["Aliases"].push_back(convertUtf16(*element));
            }
        }
        if (m_BaseStyleName) {
            json["BaseStyleName"] = convertUtf16(*m_BaseStyleName);
        }
        if (m_BuiltIn) {
            json["BuiltIn"] = *m_BuiltIn;
        }
        if (m_Font) {
            m_Font->toJson(&json["Font"]);
        }
        if (m_IsHeading) {
            json["IsHeading"] = *m_IsHeading;
        }
        if (m_IsQuickStyle) {
            json["IsQuickStyle"] = *m_IsQuickStyle;
        }
        if (m_LinkedStyleName) {
            json["LinkedStyleName"] = convertUtf16(*m_LinkedStyleName);
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_NextParagraphStyleName) {
            json["NextParagraphStyleName"] = convertUtf16(*m_NextParagraphStyleName);
        }
        if (m_StyleIdentifier) {
            json["StyleIdentifier"] = styleStyleIdentifierToString(*m_StyleIdentifier);
        }
        if (m_Type) {
            json["Type"] = styleTypeToString(*m_Type);
        }
    }

    void Style::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Aliases") && !json["Aliases"].is_null()) {
            m_Aliases = std::make_shared< std::vector<std::shared_ptr<std::wstring>> >();
            for (auto& element : json["Aliases"]) {
                m_Aliases->push_back(std::make_shared< std::wstring >(convertUtf8( element.get< std::string >() )));
            }
        }
        if (json.contains("BaseStyleName") && !json["BaseStyleName"].is_null()) {
            m_BaseStyleName = std::make_shared< std::wstring >(
                convertUtf8( json["BaseStyleName"].get< std::string >() )
            );
        }
        if (json.contains("BuiltIn") && !json["BuiltIn"].is_null()) {
            m_BuiltIn = std::make_shared< bool >(
                json["BuiltIn"].get< bool >()
            );
        }
        if (json.contains("Font") && !json["Font"].is_null()) {
            m_Font = std::make_shared< aspose::words::cloud::models::Font >();
            m_Font->fromJson(&json["Font"]);
        }
        if (json.contains("IsHeading") && !json["IsHeading"].is_null()) {
            m_IsHeading = std::make_shared< bool >(
                json["IsHeading"].get< bool >()
            );
        }
        if (json.contains("IsQuickStyle") && !json["IsQuickStyle"].is_null()) {
            m_IsQuickStyle = std::make_shared< bool >(
                json["IsQuickStyle"].get< bool >()
            );
        }
        if (json.contains("LinkedStyleName") && !json["LinkedStyleName"].is_null()) {
            m_LinkedStyleName = std::make_shared< std::wstring >(
                convertUtf8( json["LinkedStyleName"].get< std::string >() )
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("NextParagraphStyleName") && !json["NextParagraphStyleName"].is_null()) {
            m_NextParagraphStyleName = std::make_shared< std::wstring >(
                convertUtf8( json["NextParagraphStyleName"].get< std::string >() )
            );
        }
        if (json.contains("StyleIdentifier") && !json["StyleIdentifier"].is_null()) {
            m_StyleIdentifier = std::make_shared< aspose::words::cloud::models::Style::StyleIdentifier >(
                styleStyleIdentifierFromString(json["StyleIdentifier"].get< std::string >())
            );
        }
        if (json.contains("Type") && !json["Type"].is_null()) {
            m_Type = std::make_shared< aspose::words::cloud::models::Style::Type >(
                styleTypeFromString(json["Type"].get< std::string >())
            );
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > Style::getAliases() const
    {
        return m_Aliases;
    }

    void Style::setAliases(std::shared_ptr< std::vector<std::shared_ptr<std::wstring>> > value)
    {
        m_Aliases = value;
    }

    std::shared_ptr< std::wstring > Style::getBaseStyleName() const
    {
        return m_BaseStyleName;
    }

    void Style::setBaseStyleName(std::shared_ptr< std::wstring > value)
    {
        m_BaseStyleName = value;
    }

    std::shared_ptr< bool > Style::getBuiltIn() const
    {
        return m_BuiltIn;
    }

    void Style::setBuiltIn(std::shared_ptr< bool > value)
    {
        m_BuiltIn = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Font > Style::getFont() const
    {
        return m_Font;
    }

    void Style::setFont(std::shared_ptr< aspose::words::cloud::models::Font > value)
    {
        m_Font = value;
    }

    std::shared_ptr< bool > Style::getIsHeading() const
    {
        return m_IsHeading;
    }

    void Style::setIsHeading(std::shared_ptr< bool > value)
    {
        m_IsHeading = value;
    }

    std::shared_ptr< bool > Style::getIsQuickStyle() const
    {
        return m_IsQuickStyle;
    }

    void Style::setIsQuickStyle(std::shared_ptr< bool > value)
    {
        m_IsQuickStyle = value;
    }

    std::shared_ptr< std::wstring > Style::getLinkedStyleName() const
    {
        return m_LinkedStyleName;
    }

    void Style::setLinkedStyleName(std::shared_ptr< std::wstring > value)
    {
        m_LinkedStyleName = value;
    }

    std::shared_ptr< std::wstring > Style::getName() const
    {
        return m_Name;
    }

    void Style::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > Style::getNextParagraphStyleName() const
    {
        return m_NextParagraphStyleName;
    }

    void Style::setNextParagraphStyleName(std::shared_ptr< std::wstring > value)
    {
        m_NextParagraphStyleName = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Style::StyleIdentifier > Style::getStyleIdentifier() const
    {
        return m_StyleIdentifier;
    }

    void Style::setStyleIdentifier(std::shared_ptr< aspose::words::cloud::models::Style::StyleIdentifier > value)
    {
        m_StyleIdentifier = value;
    }

    std::shared_ptr< aspose::words::cloud::models::Style::Type > Style::getType() const
    {
        return m_Type;
    }

    void Style::setType(std::shared_ptr< aspose::words::cloud::models::Style::Type > value)
    {
        m_Type = value;
    }


    /*
     * StyleApply implementation
     */
    void StyleApply::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
    }

    void StyleApply::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > StyleApply::getStyleName() const
    {
        return m_StyleName;
    }

    void StyleApply::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }


    /*
     * StyleCopy implementation
     */
    void StyleCopy::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
    }

    void StyleCopy::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > StyleCopy::getStyleName() const
    {
        return m_StyleName;
    }

    void StyleCopy::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }


    /*
     * StyleInsert implementation
     */
    inline std::string styleInsertStyleTypeToString(aspose::words::cloud::models::StyleInsert::StyleType value)
    {
        if (value == aspose::words::cloud::models::StyleInsert::StyleType::PARAGRAPH) return "Paragraph";
        if (value == aspose::words::cloud::models::StyleInsert::StyleType::CHARACTER) return "Character";
        if (value == aspose::words::cloud::models::StyleInsert::StyleType::TABLE) return "Table";
        if (value == aspose::words::cloud::models::StyleInsert::StyleType::LIST) return "List";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::StyleInsert::StyleType styleInsertStyleTypeFromString(const std::string& value)
    {
        if (value == "Paragraph") return aspose::words::cloud::models::StyleInsert::StyleType::PARAGRAPH;
        if (value == "Character") return aspose::words::cloud::models::StyleInsert::StyleType::CHARACTER;
        if (value == "Table") return aspose::words::cloud::models::StyleInsert::StyleType::TABLE;
        if (value == "List") return aspose::words::cloud::models::StyleInsert::StyleType::LIST;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void StyleInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
        if (m_StyleType) {
            json["StyleType"] = styleInsertStyleTypeToString(*m_StyleType);
        }
    }

    void StyleInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
        if (json.contains("StyleType") && !json["StyleType"].is_null()) {
            m_StyleType = std::make_shared< aspose::words::cloud::models::StyleInsert::StyleType >(
                styleInsertStyleTypeFromString(json["StyleType"].get< std::string >())
            );
        }
    }

    std::shared_ptr< std::wstring > StyleInsert::getStyleName() const
    {
        return m_StyleName;
    }

    void StyleInsert::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }

    std::shared_ptr< aspose::words::cloud::models::StyleInsert::StyleType > StyleInsert::getStyleType() const
    {
        return m_StyleType;
    }

    void StyleInsert::setStyleType(std::shared_ptr< aspose::words::cloud::models::StyleInsert::StyleType > value)
    {
        m_StyleType = value;
    }


    /*
     * StyleResponse implementation
     */
    void StyleResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Style) {
            m_Style->toJson(&json["Style"]);
        }
    }

    void StyleResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Style") && !json["Style"].is_null()) {
            m_Style = std::make_shared< aspose::words::cloud::models::Style >();
            m_Style->fromJson(&json["Style"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Style > StyleResponse::getStyle() const
    {
        return m_Style;
    }

    void StyleResponse::setStyle(std::shared_ptr< aspose::words::cloud::models::Style > value)
    {
        m_Style = value;
    }


    /*
     * StylesResponse implementation
     */
    void StylesResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Styles) {
            json["Styles"] = ::nlohmann::json::array();
            for (auto& element : *m_Styles) {
                element->toJson(&json["Styles"].emplace_back());
            }
        }
    }

    void StylesResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Styles") && !json["Styles"].is_null()) {
            m_Styles = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::Style>> >();
            for (auto& element : json["Styles"]) {
                m_Styles->emplace_back(std::make_shared< aspose::words::cloud::models::Style >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Style>> > StylesResponse::getStyles() const
    {
        return m_Styles;
    }

    void StylesResponse::setStyles(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::Style>> > value)
    {
        m_Styles = value;
    }


    /*
     * StyleUpdate implementation
     */
    void StyleUpdate::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BaseStyleName) {
            json["BaseStyleName"] = convertUtf16(*m_BaseStyleName);
        }
        if (m_IsQuickStyle) {
            json["IsQuickStyle"] = *m_IsQuickStyle;
        }
        if (m_Name) {
            json["Name"] = convertUtf16(*m_Name);
        }
        if (m_NextParagraphStyleName) {
            json["NextParagraphStyleName"] = convertUtf16(*m_NextParagraphStyleName);
        }
    }

    void StyleUpdate::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BaseStyleName") && !json["BaseStyleName"].is_null()) {
            m_BaseStyleName = std::make_shared< std::wstring >(
                convertUtf8( json["BaseStyleName"].get< std::string >() )
            );
        }
        if (json.contains("IsQuickStyle") && !json["IsQuickStyle"].is_null()) {
            m_IsQuickStyle = std::make_shared< bool >(
                json["IsQuickStyle"].get< bool >()
            );
        }
        if (json.contains("Name") && !json["Name"].is_null()) {
            m_Name = std::make_shared< std::wstring >(
                convertUtf8( json["Name"].get< std::string >() )
            );
        }
        if (json.contains("NextParagraphStyleName") && !json["NextParagraphStyleName"].is_null()) {
            m_NextParagraphStyleName = std::make_shared< std::wstring >(
                convertUtf8( json["NextParagraphStyleName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > StyleUpdate::getBaseStyleName() const
    {
        return m_BaseStyleName;
    }

    void StyleUpdate::setBaseStyleName(std::shared_ptr< std::wstring > value)
    {
        m_BaseStyleName = value;
    }

    std::shared_ptr< bool > StyleUpdate::getIsQuickStyle() const
    {
        return m_IsQuickStyle;
    }

    void StyleUpdate::setIsQuickStyle(std::shared_ptr< bool > value)
    {
        m_IsQuickStyle = value;
    }

    std::shared_ptr< std::wstring > StyleUpdate::getName() const
    {
        return m_Name;
    }

    void StyleUpdate::setName(std::shared_ptr< std::wstring > value)
    {
        m_Name = value;
    }

    std::shared_ptr< std::wstring > StyleUpdate::getNextParagraphStyleName() const
    {
        return m_NextParagraphStyleName;
    }

    void StyleUpdate::setNextParagraphStyleName(std::shared_ptr< std::wstring > value)
    {
        m_NextParagraphStyleName = value;
    }


    /*
     * SvgSaveOptionsData implementation
     */
    void SvgSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ExportEmbeddedImages) {
            json["ExportEmbeddedImages"] = *m_ExportEmbeddedImages;
        }
        if (m_FitToViewPort) {
            json["FitToViewPort"] = *m_FitToViewPort;
        }
        if (m_ResourcesFolder) {
            json["ResourcesFolder"] = convertUtf16(*m_ResourcesFolder);
        }
        if (m_ResourcesFolderAlias) {
            json["ResourcesFolderAlias"] = convertUtf16(*m_ResourcesFolderAlias);
        }
        if (m_ShowPageBorder) {
            json["ShowPageBorder"] = *m_ShowPageBorder;
        }
        if (m_TextOutputMode) {
            json["TextOutputMode"] = convertUtf16(*m_TextOutputMode);
        }
    }

    void SvgSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ExportEmbeddedImages") && !json["ExportEmbeddedImages"].is_null()) {
            m_ExportEmbeddedImages = std::make_shared< bool >(
                json["ExportEmbeddedImages"].get< bool >()
            );
        }
        if (json.contains("FitToViewPort") && !json["FitToViewPort"].is_null()) {
            m_FitToViewPort = std::make_shared< bool >(
                json["FitToViewPort"].get< bool >()
            );
        }
        if (json.contains("ResourcesFolder") && !json["ResourcesFolder"].is_null()) {
            m_ResourcesFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolder"].get< std::string >() )
            );
        }
        if (json.contains("ResourcesFolderAlias") && !json["ResourcesFolderAlias"].is_null()) {
            m_ResourcesFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolderAlias"].get< std::string >() )
            );
        }
        if (json.contains("ShowPageBorder") && !json["ShowPageBorder"].is_null()) {
            m_ShowPageBorder = std::make_shared< bool >(
                json["ShowPageBorder"].get< bool >()
            );
        }
        if (json.contains("TextOutputMode") && !json["TextOutputMode"].is_null()) {
            m_TextOutputMode = std::make_shared< std::wstring >(
                convertUtf8( json["TextOutputMode"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< bool > SvgSaveOptionsData::getExportEmbeddedImages() const
    {
        return m_ExportEmbeddedImages;
    }

    void SvgSaveOptionsData::setExportEmbeddedImages(std::shared_ptr< bool > value)
    {
        m_ExportEmbeddedImages = value;
    }

    std::shared_ptr< bool > SvgSaveOptionsData::getFitToViewPort() const
    {
        return m_FitToViewPort;
    }

    void SvgSaveOptionsData::setFitToViewPort(std::shared_ptr< bool > value)
    {
        m_FitToViewPort = value;
    }

    std::shared_ptr< std::wstring > SvgSaveOptionsData::getResourcesFolder() const
    {
        return m_ResourcesFolder;
    }

    void SvgSaveOptionsData::setResourcesFolder(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolder = value;
    }

    std::shared_ptr< std::wstring > SvgSaveOptionsData::getResourcesFolderAlias() const
    {
        return m_ResourcesFolderAlias;
    }

    void SvgSaveOptionsData::setResourcesFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolderAlias = value;
    }

    std::shared_ptr< bool > SvgSaveOptionsData::getShowPageBorder() const
    {
        return m_ShowPageBorder;
    }

    void SvgSaveOptionsData::setShowPageBorder(std::shared_ptr< bool > value)
    {
        m_ShowPageBorder = value;
    }

    std::shared_ptr< std::wstring > SvgSaveOptionsData::getTextOutputMode() const
    {
        return m_TextOutputMode;
    }

    void SvgSaveOptionsData::setTextOutputMode(std::shared_ptr< std::wstring > value)
    {
        m_TextOutputMode = value;
    }


    /*
     * Table implementation
     */
    void Table::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_TableProperties) {
            m_TableProperties->toJson(&json["TableProperties"]);
        }
        if (m_TableRowList) {
            json["TableRowList"] = ::nlohmann::json::array();
            for (auto& element : *m_TableRowList) {
                element->toJson(&json["TableRowList"].emplace_back());
            }
        }
    }

    void Table::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("TableProperties") && !json["TableProperties"].is_null()) {
            m_TableProperties = std::make_shared< aspose::words::cloud::models::TableProperties >();
            m_TableProperties->fromJson(&json["TableProperties"]);
        }
        if (json.contains("TableRowList") && !json["TableRowList"].is_null()) {
            m_TableRowList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::TableRow>> >();
            for (auto& element : json["TableRowList"]) {
                m_TableRowList->emplace_back(std::make_shared< aspose::words::cloud::models::TableRow >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties > Table::getTableProperties() const
    {
        return m_TableProperties;
    }

    void Table::setTableProperties(std::shared_ptr< aspose::words::cloud::models::TableProperties > value)
    {
        m_TableProperties = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableRow>> > Table::getTableRowList() const
    {
        return m_TableRowList;
    }

    void Table::setTableRowList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableRow>> > value)
    {
        m_TableRowList = value;
    }


    /*
     * TableCell implementation
     */
    void TableCell::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ChildNodes) {
            json["ChildNodes"] = ::nlohmann::json::array();
            for (auto& element : *m_ChildNodes) {
                element->toJson(&json["ChildNodes"].emplace_back());
            }
        }
    }

    void TableCell::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ChildNodes") && !json["ChildNodes"].is_null()) {
            m_ChildNodes = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> >();
            for (auto& element : json["ChildNodes"]) {
                m_ChildNodes->emplace_back(std::make_shared< aspose::words::cloud::models::NodeLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > TableCell::getChildNodes() const
    {
        return m_ChildNodes;
    }

    void TableCell::setChildNodes(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::NodeLink>> > value)
    {
        m_ChildNodes = value;
    }


    /*
     * TableCellFormat implementation
     */
    inline std::string tableCellFormatHorizontalMergeToString(aspose::words::cloud::models::TableCellFormat::HorizontalMerge value)
    {
        if (value == aspose::words::cloud::models::TableCellFormat::HorizontalMerge::NONE) return "None";
        if (value == aspose::words::cloud::models::TableCellFormat::HorizontalMerge::FIRST) return "First";
        if (value == aspose::words::cloud::models::TableCellFormat::HorizontalMerge::PREVIOUS) return "Previous";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableCellFormat::HorizontalMerge tableCellFormatHorizontalMergeFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::TableCellFormat::HorizontalMerge::NONE;
        if (value == "First") return aspose::words::cloud::models::TableCellFormat::HorizontalMerge::FIRST;
        if (value == "Previous") return aspose::words::cloud::models::TableCellFormat::HorizontalMerge::PREVIOUS;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tableCellFormatOrientationToString(aspose::words::cloud::models::TableCellFormat::Orientation value)
    {
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::HORIZONTAL) return "Horizontal";
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::DOWNWARD) return "Downward";
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::UPWARD) return "Upward";
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::HORIZONTAL_ROTATED_FAR_EAST) return "HorizontalRotatedFarEast";
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::VERTICAL_FAR_EAST) return "VerticalFarEast";
        if (value == aspose::words::cloud::models::TableCellFormat::Orientation::VERTICAL_ROTATED_FAR_EAST) return "VerticalRotatedFarEast";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableCellFormat::Orientation tableCellFormatOrientationFromString(const std::string& value)
    {
        if (value == "Horizontal") return aspose::words::cloud::models::TableCellFormat::Orientation::HORIZONTAL;
        if (value == "Downward") return aspose::words::cloud::models::TableCellFormat::Orientation::DOWNWARD;
        if (value == "Upward") return aspose::words::cloud::models::TableCellFormat::Orientation::UPWARD;
        if (value == "HorizontalRotatedFarEast") return aspose::words::cloud::models::TableCellFormat::Orientation::HORIZONTAL_ROTATED_FAR_EAST;
        if (value == "VerticalFarEast") return aspose::words::cloud::models::TableCellFormat::Orientation::VERTICAL_FAR_EAST;
        if (value == "VerticalRotatedFarEast") return aspose::words::cloud::models::TableCellFormat::Orientation::VERTICAL_ROTATED_FAR_EAST;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tableCellFormatVerticalAlignmentToString(aspose::words::cloud::models::TableCellFormat::VerticalAlignment value)
    {
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalAlignment::TOP) return "Top";
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalAlignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalAlignment::BOTTOM) return "Bottom";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableCellFormat::VerticalAlignment tableCellFormatVerticalAlignmentFromString(const std::string& value)
    {
        if (value == "Top") return aspose::words::cloud::models::TableCellFormat::VerticalAlignment::TOP;
        if (value == "Center") return aspose::words::cloud::models::TableCellFormat::VerticalAlignment::CENTER;
        if (value == "Bottom") return aspose::words::cloud::models::TableCellFormat::VerticalAlignment::BOTTOM;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tableCellFormatVerticalMergeToString(aspose::words::cloud::models::TableCellFormat::VerticalMerge value)
    {
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalMerge::NONE) return "None";
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalMerge::FIRST) return "First";
        if (value == aspose::words::cloud::models::TableCellFormat::VerticalMerge::PREVIOUS) return "Previous";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableCellFormat::VerticalMerge tableCellFormatVerticalMergeFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::TableCellFormat::VerticalMerge::NONE;
        if (value == "First") return aspose::words::cloud::models::TableCellFormat::VerticalMerge::FIRST;
        if (value == "Previous") return aspose::words::cloud::models::TableCellFormat::VerticalMerge::PREVIOUS;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void TableCellFormat::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BottomPadding) {
            json["BottomPadding"] = *m_BottomPadding;
        }
        if (m_FitText) {
            json["FitText"] = *m_FitText;
        }
        if (m_HorizontalMerge) {
            json["HorizontalMerge"] = tableCellFormatHorizontalMergeToString(*m_HorizontalMerge);
        }
        if (m_LeftPadding) {
            json["LeftPadding"] = *m_LeftPadding;
        }
        if (m_Orientation) {
            json["Orientation"] = tableCellFormatOrientationToString(*m_Orientation);
        }
        if (m_PreferredWidth) {
            m_PreferredWidth->toJson(&json["PreferredWidth"]);
        }
        if (m_RightPadding) {
            json["RightPadding"] = *m_RightPadding;
        }
        if (m_TopPadding) {
            json["TopPadding"] = *m_TopPadding;
        }
        if (m_VerticalAlignment) {
            json["VerticalAlignment"] = tableCellFormatVerticalAlignmentToString(*m_VerticalAlignment);
        }
        if (m_VerticalMerge) {
            json["VerticalMerge"] = tableCellFormatVerticalMergeToString(*m_VerticalMerge);
        }
        if (m_Width) {
            json["Width"] = *m_Width;
        }
        if (m_WrapText) {
            json["WrapText"] = *m_WrapText;
        }
    }

    void TableCellFormat::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BottomPadding") && !json["BottomPadding"].is_null()) {
            m_BottomPadding = std::make_shared< double >(
                json["BottomPadding"].get< double >()
            );
        }
        if (json.contains("FitText") && !json["FitText"].is_null()) {
            m_FitText = std::make_shared< bool >(
                json["FitText"].get< bool >()
            );
        }
        if (json.contains("HorizontalMerge") && !json["HorizontalMerge"].is_null()) {
            m_HorizontalMerge = std::make_shared< aspose::words::cloud::models::TableCellFormat::HorizontalMerge >(
                tableCellFormatHorizontalMergeFromString(json["HorizontalMerge"].get< std::string >())
            );
        }
        if (json.contains("LeftPadding") && !json["LeftPadding"].is_null()) {
            m_LeftPadding = std::make_shared< double >(
                json["LeftPadding"].get< double >()
            );
        }
        if (json.contains("Orientation") && !json["Orientation"].is_null()) {
            m_Orientation = std::make_shared< aspose::words::cloud::models::TableCellFormat::Orientation >(
                tableCellFormatOrientationFromString(json["Orientation"].get< std::string >())
            );
        }
        if (json.contains("PreferredWidth") && !json["PreferredWidth"].is_null()) {
            m_PreferredWidth = std::make_shared< aspose::words::cloud::models::PreferredWidth >();
            m_PreferredWidth->fromJson(&json["PreferredWidth"]);
        }
        if (json.contains("RightPadding") && !json["RightPadding"].is_null()) {
            m_RightPadding = std::make_shared< double >(
                json["RightPadding"].get< double >()
            );
        }
        if (json.contains("TopPadding") && !json["TopPadding"].is_null()) {
            m_TopPadding = std::make_shared< double >(
                json["TopPadding"].get< double >()
            );
        }
        if (json.contains("VerticalAlignment") && !json["VerticalAlignment"].is_null()) {
            m_VerticalAlignment = std::make_shared< aspose::words::cloud::models::TableCellFormat::VerticalAlignment >(
                tableCellFormatVerticalAlignmentFromString(json["VerticalAlignment"].get< std::string >())
            );
        }
        if (json.contains("VerticalMerge") && !json["VerticalMerge"].is_null()) {
            m_VerticalMerge = std::make_shared< aspose::words::cloud::models::TableCellFormat::VerticalMerge >(
                tableCellFormatVerticalMergeFromString(json["VerticalMerge"].get< std::string >())
            );
        }
        if (json.contains("Width") && !json["Width"].is_null()) {
            m_Width = std::make_shared< double >(
                json["Width"].get< double >()
            );
        }
        if (json.contains("WrapText") && !json["WrapText"].is_null()) {
            m_WrapText = std::make_shared< bool >(
                json["WrapText"].get< bool >()
            );
        }
    }

    std::shared_ptr< double > TableCellFormat::getBottomPadding() const
    {
        return m_BottomPadding;
    }

    void TableCellFormat::setBottomPadding(std::shared_ptr< double > value)
    {
        m_BottomPadding = value;
    }

    std::shared_ptr< bool > TableCellFormat::getFitText() const
    {
        return m_FitText;
    }

    void TableCellFormat::setFitText(std::shared_ptr< bool > value)
    {
        m_FitText = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableCellFormat::HorizontalMerge > TableCellFormat::getHorizontalMerge() const
    {
        return m_HorizontalMerge;
    }

    void TableCellFormat::setHorizontalMerge(std::shared_ptr< aspose::words::cloud::models::TableCellFormat::HorizontalMerge > value)
    {
        m_HorizontalMerge = value;
    }

    std::shared_ptr< double > TableCellFormat::getLeftPadding() const
    {
        return m_LeftPadding;
    }

    void TableCellFormat::setLeftPadding(std::shared_ptr< double > value)
    {
        m_LeftPadding = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableCellFormat::Orientation > TableCellFormat::getOrientation() const
    {
        return m_Orientation;
    }

    void TableCellFormat::setOrientation(std::shared_ptr< aspose::words::cloud::models::TableCellFormat::Orientation > value)
    {
        m_Orientation = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PreferredWidth > TableCellFormat::getPreferredWidth() const
    {
        return m_PreferredWidth;
    }

    void TableCellFormat::setPreferredWidth(std::shared_ptr< aspose::words::cloud::models::PreferredWidth > value)
    {
        m_PreferredWidth = value;
    }

    std::shared_ptr< double > TableCellFormat::getRightPadding() const
    {
        return m_RightPadding;
    }

    void TableCellFormat::setRightPadding(std::shared_ptr< double > value)
    {
        m_RightPadding = value;
    }

    std::shared_ptr< double > TableCellFormat::getTopPadding() const
    {
        return m_TopPadding;
    }

    void TableCellFormat::setTopPadding(std::shared_ptr< double > value)
    {
        m_TopPadding = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableCellFormat::VerticalAlignment > TableCellFormat::getVerticalAlignment() const
    {
        return m_VerticalAlignment;
    }

    void TableCellFormat::setVerticalAlignment(std::shared_ptr< aspose::words::cloud::models::TableCellFormat::VerticalAlignment > value)
    {
        m_VerticalAlignment = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableCellFormat::VerticalMerge > TableCellFormat::getVerticalMerge() const
    {
        return m_VerticalMerge;
    }

    void TableCellFormat::setVerticalMerge(std::shared_ptr< aspose::words::cloud::models::TableCellFormat::VerticalMerge > value)
    {
        m_VerticalMerge = value;
    }

    std::shared_ptr< double > TableCellFormat::getWidth() const
    {
        return m_Width;
    }

    void TableCellFormat::setWidth(std::shared_ptr< double > value)
    {
        m_Width = value;
    }

    std::shared_ptr< bool > TableCellFormat::getWrapText() const
    {
        return m_WrapText;
    }

    void TableCellFormat::setWrapText(std::shared_ptr< bool > value)
    {
        m_WrapText = value;
    }


    /*
     * TableCellFormatDto implementation
     */
    void TableCellFormatDto::toJson(void* jsonIfc) const
    {
    }

    void TableCellFormatDto::fromJson(const void* jsonIfc)
    {
    }




    /*
     * TableCellFormatResponse implementation
     */
    void TableCellFormatResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_CellFormat) {
            m_CellFormat->toJson(&json["CellFormat"]);
        }
    }

    void TableCellFormatResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("CellFormat") && !json["CellFormat"].is_null()) {
            m_CellFormat = std::make_shared< aspose::words::cloud::models::TableCellFormat >();
            m_CellFormat->fromJson(&json["CellFormat"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableCellFormat > TableCellFormatResponse::getCellFormat() const
    {
        return m_CellFormat;
    }

    void TableCellFormatResponse::setCellFormat(std::shared_ptr< aspose::words::cloud::models::TableCellFormat > value)
    {
        m_CellFormat = value;
    }


    /*
     * TableCellInsert implementation
     */
    void TableCellInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_InsertAfter) {
            json["InsertAfter"] = *m_InsertAfter;
        }
    }

    void TableCellInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("InsertAfter") && !json["InsertAfter"].is_null()) {
            m_InsertAfter = std::make_shared< int32_t >(
                json["InsertAfter"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableCellInsert::getInsertAfter() const
    {
        return m_InsertAfter;
    }

    void TableCellInsert::setInsertAfter(std::shared_ptr< int32_t > value)
    {
        m_InsertAfter = value;
    }


    /*
     * TableCellInsertDto implementation
     */
    void TableCellInsertDto::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_InsertAfter) {
            json["InsertAfter"] = *m_InsertAfter;
        }
    }

    void TableCellInsertDto::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("InsertAfter") && !json["InsertAfter"].is_null()) {
            m_InsertAfter = std::make_shared< int32_t >(
                json["InsertAfter"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableCellInsertDto::getInsertAfter() const
    {
        return m_InsertAfter;
    }

    void TableCellInsertDto::setInsertAfter(std::shared_ptr< int32_t > value)
    {
        m_InsertAfter = value;
    }


    /*
     * TableCellResponse implementation
     */
    void TableCellResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Cell) {
            m_Cell->toJson(&json["Cell"]);
        }
    }

    void TableCellResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Cell") && !json["Cell"].is_null()) {
            m_Cell = std::make_shared< aspose::words::cloud::models::TableCell >();
            m_Cell->fromJson(&json["Cell"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableCell > TableCellResponse::getCell() const
    {
        return m_Cell;
    }

    void TableCellResponse::setCell(std::shared_ptr< aspose::words::cloud::models::TableCell > value)
    {
        m_Cell = value;
    }


    /*
     * TableInsert implementation
     */
    void TableInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ColumnsCount) {
            json["ColumnsCount"] = *m_ColumnsCount;
        }
        if (m_Position) {
            m_Position->toJson(&json["Position"]);
        }
        if (m_RowsCount) {
            json["RowsCount"] = *m_RowsCount;
        }
    }

    void TableInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ColumnsCount") && !json["ColumnsCount"].is_null()) {
            m_ColumnsCount = std::make_shared< int32_t >(
                json["ColumnsCount"].get< int32_t >()
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_Position->fromJson(&json["Position"]);
        }
        if (json.contains("RowsCount") && !json["RowsCount"].is_null()) {
            m_RowsCount = std::make_shared< int32_t >(
                json["RowsCount"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableInsert::getColumnsCount() const
    {
        return m_ColumnsCount;
    }

    void TableInsert::setColumnsCount(std::shared_ptr< int32_t > value)
    {
        m_ColumnsCount = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > TableInsert::getPosition() const
    {
        return m_Position;
    }

    void TableInsert::setPosition(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_Position = value;
    }

    std::shared_ptr< int32_t > TableInsert::getRowsCount() const
    {
        return m_RowsCount;
    }

    void TableInsert::setRowsCount(std::shared_ptr< int32_t > value)
    {
        m_RowsCount = value;
    }


    /*
     * TableInsertDto implementation
     */
    void TableInsertDto::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ColumnsCount) {
            json["ColumnsCount"] = *m_ColumnsCount;
        }
        if (m_Position) {
            m_Position->toJson(&json["Position"]);
        }
        if (m_RowsCount) {
            json["RowsCount"] = *m_RowsCount;
        }
    }

    void TableInsertDto::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ColumnsCount") && !json["ColumnsCount"].is_null()) {
            m_ColumnsCount = std::make_shared< int32_t >(
                json["ColumnsCount"].get< int32_t >()
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< aspose::words::cloud::models::DocumentPosition >();
            m_Position->fromJson(&json["Position"]);
        }
        if (json.contains("RowsCount") && !json["RowsCount"].is_null()) {
            m_RowsCount = std::make_shared< int32_t >(
                json["RowsCount"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableInsertDto::getColumnsCount() const
    {
        return m_ColumnsCount;
    }

    void TableInsertDto::setColumnsCount(std::shared_ptr< int32_t > value)
    {
        m_ColumnsCount = value;
    }

    std::shared_ptr< aspose::words::cloud::models::DocumentPosition > TableInsertDto::getPosition() const
    {
        return m_Position;
    }

    void TableInsertDto::setPosition(std::shared_ptr< aspose::words::cloud::models::DocumentPosition > value)
    {
        m_Position = value;
    }

    std::shared_ptr< int32_t > TableInsertDto::getRowsCount() const
    {
        return m_RowsCount;
    }

    void TableInsertDto::setRowsCount(std::shared_ptr< int32_t > value)
    {
        m_RowsCount = value;
    }


    /*
     * TableLink implementation
     */
    void TableLink::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
    }

    void TableLink::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
    }




    /*
     * TableLinkCollection implementation
     */
    void TableLinkCollection::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_TableLinkList) {
            json["TableLinkList"] = ::nlohmann::json::array();
            for (auto& element : *m_TableLinkList) {
                element->toJson(&json["TableLinkList"].emplace_back());
            }
        }
    }

    void TableLinkCollection::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("TableLinkList") && !json["TableLinkList"].is_null()) {
            m_TableLinkList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::TableLink>> >();
            for (auto& element : json["TableLinkList"]) {
                m_TableLinkList->emplace_back(std::make_shared< aspose::words::cloud::models::TableLink >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableLink>> > TableLinkCollection::getTableLinkList() const
    {
        return m_TableLinkList;
    }

    void TableLinkCollection::setTableLinkList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableLink>> > value)
    {
        m_TableLinkList = value;
    }


    /*
     * TableLinkCollectionResponse implementation
     */
    void TableLinkCollectionResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Tables) {
            m_Tables->toJson(&json["Tables"]);
        }
    }

    void TableLinkCollectionResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Tables") && !json["Tables"].is_null()) {
            m_Tables = std::make_shared< aspose::words::cloud::models::TableLinkCollection >();
            m_Tables->fromJson(&json["Tables"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableLinkCollection > TableLinkCollectionResponse::getTables() const
    {
        return m_Tables;
    }

    void TableLinkCollectionResponse::setTables(std::shared_ptr< aspose::words::cloud::models::TableLinkCollection > value)
    {
        m_Tables = value;
    }


    /*
     * TableProperties implementation
     */
    inline std::string tablePropertiesAlignmentToString(aspose::words::cloud::models::TableProperties::Alignment value)
    {
        if (value == aspose::words::cloud::models::TableProperties::Alignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::TableProperties::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::TableProperties::Alignment::RIGHT) return "Right";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableProperties::Alignment tablePropertiesAlignmentFromString(const std::string& value)
    {
        if (value == "Left") return aspose::words::cloud::models::TableProperties::Alignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::TableProperties::Alignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::TableProperties::Alignment::RIGHT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tablePropertiesStyleIdentifierToString(aspose::words::cloud::models::TableProperties::StyleIdentifier value)
    {
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL) return "Normal";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING1) return "Heading1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING2) return "Heading2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING3) return "Heading3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING4) return "Heading4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING5) return "Heading5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING6) return "Heading6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING7) return "Heading7";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING8) return "Heading8";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING9) return "Heading9";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX1) return "Index1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX2) return "Index2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX3) return "Index3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX4) return "Index4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX5) return "Index5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX6) return "Index6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX7) return "Index7";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX8) return "Index8";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX9) return "Index9";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC1) return "Toc1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC2) return "Toc2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC3) return "Toc3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC4) return "Toc4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC5) return "Toc5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC6) return "Toc6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC7) return "Toc7";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC8) return "Toc8";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC9) return "Toc9";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL_INDENT) return "NormalIndent";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTNOTE_TEXT) return "FootnoteText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_TEXT) return "CommentText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADER) return "Header";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTER) return "Footer";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX_HEADING) return "IndexHeading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::CAPTION) return "Caption";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_OF_FIGURES) return "TableOfFigures";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::ENVELOPE_ADDRESS) return "EnvelopeAddress";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::ENVELOPE_RETURN) return "EnvelopeReturn";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTNOTE_REFERENCE) return "FootnoteReference";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_REFERENCE) return "CommentReference";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LINE_NUMBER) return "LineNumber";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PAGE_NUMBER) return "PageNumber";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::ENDNOTE_REFERENCE) return "EndnoteReference";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::ENDNOTE_TEXT) return "EndnoteText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_OF_AUTHORITIES) return "TableOfAuthorities";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MACRO) return "Macro";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOA_HEADING) return "ToaHeading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST) return "List";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET) return "ListBullet";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER) return "ListNumber";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST2) return "List2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST3) return "List3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST4) return "List4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST5) return "List5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET2) return "ListBullet2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET3) return "ListBullet3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET4) return "ListBullet4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET5) return "ListBullet5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER2) return "ListNumber2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER3) return "ListNumber3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER4) return "ListNumber4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER5) return "ListNumber5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TITLE) return "Title";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::CLOSING) return "Closing";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SIGNATURE) return "Signature";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DEFAULT_PARAGRAPH_FONT) return "DefaultParagraphFont";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT) return "BodyText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND) return "BodyTextInd";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE) return "ListContinue";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE2) return "ListContinue2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE3) return "ListContinue3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE4) return "ListContinue4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE5) return "ListContinue5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MESSAGE_HEADER) return "MessageHeader";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTITLE) return "Subtitle";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SALUTATION) return "Salutation";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DATE) return "Date";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT1_I) return "BodyText1I";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT1_I2) return "BodyText1I2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NOTE_HEADING) return "NoteHeading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT2) return "BodyText2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT3) return "BodyText3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND2) return "BodyTextInd2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND3) return "BodyTextInd3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BLOCK_TEXT) return "BlockText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HYPERLINK) return "Hyperlink";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::FOLLOWED_HYPERLINK) return "FollowedHyperlink";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::STRONG) return "Strong";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::EMPHASIS) return "Emphasis";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DOCUMENT_MAP) return "DocumentMap";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TEXT) return "PlainText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::EMAIL_SIGNATURE) return "EmailSignature";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_TOP_OF_FORM) return "HtmlTopOfForm";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_BOTTOM_OF_FORM) return "HtmlBottomOfForm";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL_WEB) return "NormalWeb";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_ACRONYM) return "HtmlAcronym";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_ADDRESS) return "HtmlAddress";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_CITE) return "HtmlCite";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_CODE) return "HtmlCode";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_DEFINITION) return "HtmlDefinition";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_KEYBOARD) return "HtmlKeyboard";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_PREFORMATTED) return "HtmlPreformatted";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_SAMPLE) return "HtmlSample";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_TYPEWRITER) return "HtmlTypewriter";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_VARIABLE) return "HtmlVariable";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_NORMAL) return "TableNormal";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_SUBJECT) return "CommentSubject";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NO_LIST) return "NoList";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST1) return "OutlineList1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST2) return "OutlineList2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST3) return "OutlineList3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE1) return "TableSimple1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE2) return "TableSimple2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE3) return "TableSimple3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC1) return "TableClassic1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC2) return "TableClassic2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC3) return "TableClassic3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC4) return "TableClassic4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL1) return "TableColorful1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL2) return "TableColorful2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL3) return "TableColorful3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS1) return "TableColumns1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS2) return "TableColumns2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS3) return "TableColumns3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS4) return "TableColumns4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS5) return "TableColumns5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID1) return "TableGrid1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID2) return "TableGrid2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID3) return "TableGrid3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID4) return "TableGrid4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID5) return "TableGrid5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID6) return "TableGrid6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID7) return "TableGrid7";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID8) return "TableGrid8";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST1) return "TableList1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST2) return "TableList2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST3) return "TableList3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST4) return "TableList4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST5) return "TableList5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST6) return "TableList6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST7) return "TableList7";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST8) return "TableList8";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS1) return "Table3DEffects1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS2) return "Table3DEffects2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS3) return "Table3DEffects3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CONTEMPORARY) return "TableContemporary";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_ELEGANT) return "TableElegant";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_PROFESSIONAL) return "TableProfessional";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SUBTLE1) return "TableSubtle1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SUBTLE2) return "TableSubtle2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB1) return "TableWeb1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB2) return "TableWeb2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB3) return "TableWeb3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BALLOON_TEXT) return "BalloonText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID) return "TableGrid";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_THEME) return "TableTheme";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLACEHOLDER_TEXT) return "PlaceholderText";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NO_SPACING) return "NoSpacing";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING) return "LightShading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST) return "LightList";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID) return "LightGrid";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1) return "MediumShading1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2) return "MediumShading2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1) return "MediumList1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2) return "MediumList2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1) return "MediumGrid1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2) return "MediumGrid2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3) return "MediumGrid3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST) return "DarkList";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING) return "ColorfulShading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST) return "ColorfulList";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID) return "ColorfulGrid";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT1) return "LightShadingAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT1) return "LightListAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT1) return "LightGridAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT1) return "MediumShading1Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT1) return "MediumShading2Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT1) return "MediumList1Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::REVISION) return "Revision";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_PARAGRAPH) return "ListParagraph";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::QUOTE) return "Quote";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_QUOTE) return "IntenseQuote";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT1) return "MediumList2Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT1) return "MediumGrid1Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT1) return "MediumGrid2Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT1) return "MediumGrid3Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT1) return "DarkListAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT1) return "ColorfulShadingAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT1) return "ColorfulListAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT1) return "ColorfulGridAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT2) return "LightShadingAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT2) return "LightListAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT2) return "LightGridAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT2) return "MediumShading1Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT2) return "MediumShading2Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT2) return "MediumList1Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT2) return "MediumList2Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT2) return "MediumGrid1Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT2) return "MediumGrid2Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT2) return "MediumGrid3Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT2) return "DarkListAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT2) return "ColorfulShadingAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT2) return "ColorfulListAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT2) return "ColorfulGridAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT3) return "LightShadingAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT3) return "LightListAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT3) return "LightGridAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT3) return "MediumShading1Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT3) return "MediumShading2Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT3) return "MediumList1Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT3) return "MediumList2Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT3) return "MediumGrid1Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT3) return "MediumGrid2Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT3) return "MediumGrid3Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT3) return "DarkListAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT3) return "ColorfulShadingAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT3) return "ColorfulListAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT3) return "ColorfulGridAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT4) return "LightShadingAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT4) return "LightListAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT4) return "LightGridAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT4) return "MediumShading1Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT4) return "MediumShading2Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT4) return "MediumList1Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT4) return "MediumList2Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT4) return "MediumGrid1Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT4) return "MediumGrid2Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT4) return "MediumGrid3Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT4) return "DarkListAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT4) return "ColorfulShadingAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT4) return "ColorfulListAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT4) return "ColorfulGridAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT5) return "LightShadingAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT5) return "LightListAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT5) return "LightGridAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT5) return "MediumShading1Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT5) return "MediumShading2Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT5) return "MediumList1Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT5) return "MediumList2Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT5) return "MediumGrid1Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT5) return "MediumGrid2Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT5) return "MediumGrid3Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT5) return "DarkListAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT5) return "ColorfulShadingAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT5) return "ColorfulListAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT5) return "ColorfulGridAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT6) return "LightShadingAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT6) return "LightListAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT6) return "LightGridAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT6) return "MediumShading1Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT6) return "MediumShading2Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT6) return "MediumList1Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT6) return "MediumList2Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT6) return "MediumGrid1Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT6) return "MediumGrid2Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT6) return "MediumGrid3Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT6) return "DarkListAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT6) return "ColorfulShadingAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT6) return "ColorfulListAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT6) return "ColorfulGridAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTLE_EMPHASIS) return "SubtleEmphasis";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_EMPHASIS) return "IntenseEmphasis";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTLE_REFERENCE) return "SubtleReference";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_REFERENCE) return "IntenseReference";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BOOK_TITLE) return "BookTitle";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::BIBLIOGRAPHY) return "Bibliography";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC_HEADING) return "TocHeading";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE1) return "PlainTable1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE2) return "PlainTable2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE3) return "PlainTable3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE4) return "PlainTable4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE5) return "PlainTable5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID_LIGHT) return "TableGridLight";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT) return "GridTable1Light";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2) return "GridTable2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3) return "GridTable3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4) return "GridTable4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK) return "GridTable5Dark";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL) return "GridTable6Colorful";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL) return "GridTable7Colorful";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1) return "GridTable1LightAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT1) return "GridTable2Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT1) return "GridTable3Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT1) return "GridTable4Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1) return "GridTable5DarkAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1) return "GridTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1) return "GridTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2) return "GridTable1LightAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT2) return "GridTable2Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT2) return "GridTable3Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT2) return "GridTable4Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2) return "GridTable5DarkAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2) return "GridTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2) return "GridTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3) return "GridTable1LightAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT3) return "GridTable2Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT3) return "GridTable3Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT3) return "GridTable4Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3) return "GridTable5DarkAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3) return "GridTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3) return "GridTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4) return "GridTable1LightAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT4) return "GridTable2Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT4) return "GridTable3Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT4) return "GridTable4Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4) return "GridTable5DarkAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4) return "GridTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4) return "GridTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5) return "GridTable1LightAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT5) return "GridTable2Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT5) return "GridTable3Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT5) return "GridTable4Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5) return "GridTable5DarkAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5) return "GridTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5) return "GridTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6) return "GridTable1LightAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT6) return "GridTable2Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT6) return "GridTable3Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT6) return "GridTable4Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6) return "GridTable5DarkAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6) return "GridTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6) return "GridTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT) return "ListTable1Light";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2) return "ListTable2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3) return "ListTable3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4) return "ListTable4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK) return "ListTable5Dark";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL) return "ListTable6Colorful";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL) return "ListTable7Colorful";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1) return "ListTable1LightAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT1) return "ListTable2Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT1) return "ListTable3Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT1) return "ListTable4Accent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1) return "ListTable5DarkAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1) return "ListTable6ColorfulAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1) return "ListTable7ColorfulAccent1";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2) return "ListTable1LightAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT2) return "ListTable2Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT2) return "ListTable3Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT2) return "ListTable4Accent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2) return "ListTable5DarkAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2) return "ListTable6ColorfulAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2) return "ListTable7ColorfulAccent2";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3) return "ListTable1LightAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT3) return "ListTable2Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT3) return "ListTable3Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT3) return "ListTable4Accent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3) return "ListTable5DarkAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3) return "ListTable6ColorfulAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3) return "ListTable7ColorfulAccent3";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4) return "ListTable1LightAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT4) return "ListTable2Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT4) return "ListTable3Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT4) return "ListTable4Accent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4) return "ListTable5DarkAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4) return "ListTable6ColorfulAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4) return "ListTable7ColorfulAccent4";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5) return "ListTable1LightAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT5) return "ListTable2Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT5) return "ListTable3Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT5) return "ListTable4Accent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5) return "ListTable5DarkAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5) return "ListTable6ColorfulAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5) return "ListTable7ColorfulAccent5";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6) return "ListTable1LightAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT6) return "ListTable2Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT6) return "ListTable3Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT6) return "ListTable4Accent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6) return "ListTable5DarkAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6) return "ListTable6ColorfulAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6) return "ListTable7ColorfulAccent6";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::SMART_LINK) return "SmartLink";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::USER) return "User";
        if (value == aspose::words::cloud::models::TableProperties::StyleIdentifier::NIL) return "Nil";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableProperties::StyleIdentifier tablePropertiesStyleIdentifierFromString(const std::string& value)
    {
        if (value == "Normal") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL;
        if (value == "Heading1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING1;
        if (value == "Heading2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING2;
        if (value == "Heading3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING3;
        if (value == "Heading4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING4;
        if (value == "Heading5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING5;
        if (value == "Heading6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING6;
        if (value == "Heading7") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING7;
        if (value == "Heading8") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING8;
        if (value == "Heading9") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADING9;
        if (value == "Index1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX1;
        if (value == "Index2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX2;
        if (value == "Index3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX3;
        if (value == "Index4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX4;
        if (value == "Index5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX5;
        if (value == "Index6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX6;
        if (value == "Index7") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX7;
        if (value == "Index8") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX8;
        if (value == "Index9") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX9;
        if (value == "Toc1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC1;
        if (value == "Toc2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC2;
        if (value == "Toc3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC3;
        if (value == "Toc4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC4;
        if (value == "Toc5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC5;
        if (value == "Toc6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC6;
        if (value == "Toc7") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC7;
        if (value == "Toc8") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC8;
        if (value == "Toc9") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC9;
        if (value == "NormalIndent") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL_INDENT;
        if (value == "FootnoteText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTNOTE_TEXT;
        if (value == "CommentText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_TEXT;
        if (value == "Header") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HEADER;
        if (value == "Footer") return aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTER;
        if (value == "IndexHeading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INDEX_HEADING;
        if (value == "Caption") return aspose::words::cloud::models::TableProperties::StyleIdentifier::CAPTION;
        if (value == "TableOfFigures") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_OF_FIGURES;
        if (value == "EnvelopeAddress") return aspose::words::cloud::models::TableProperties::StyleIdentifier::ENVELOPE_ADDRESS;
        if (value == "EnvelopeReturn") return aspose::words::cloud::models::TableProperties::StyleIdentifier::ENVELOPE_RETURN;
        if (value == "FootnoteReference") return aspose::words::cloud::models::TableProperties::StyleIdentifier::FOOTNOTE_REFERENCE;
        if (value == "CommentReference") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_REFERENCE;
        if (value == "LineNumber") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LINE_NUMBER;
        if (value == "PageNumber") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PAGE_NUMBER;
        if (value == "EndnoteReference") return aspose::words::cloud::models::TableProperties::StyleIdentifier::ENDNOTE_REFERENCE;
        if (value == "EndnoteText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::ENDNOTE_TEXT;
        if (value == "TableOfAuthorities") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_OF_AUTHORITIES;
        if (value == "Macro") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MACRO;
        if (value == "ToaHeading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOA_HEADING;
        if (value == "List") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST;
        if (value == "ListBullet") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET;
        if (value == "ListNumber") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER;
        if (value == "List2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST2;
        if (value == "List3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST3;
        if (value == "List4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST4;
        if (value == "List5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST5;
        if (value == "ListBullet2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET2;
        if (value == "ListBullet3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET3;
        if (value == "ListBullet4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET4;
        if (value == "ListBullet5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_BULLET5;
        if (value == "ListNumber2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER2;
        if (value == "ListNumber3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER3;
        if (value == "ListNumber4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER4;
        if (value == "ListNumber5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_NUMBER5;
        if (value == "Title") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TITLE;
        if (value == "Closing") return aspose::words::cloud::models::TableProperties::StyleIdentifier::CLOSING;
        if (value == "Signature") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SIGNATURE;
        if (value == "DefaultParagraphFont") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DEFAULT_PARAGRAPH_FONT;
        if (value == "BodyText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT;
        if (value == "BodyTextInd") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND;
        if (value == "ListContinue") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE;
        if (value == "ListContinue2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE2;
        if (value == "ListContinue3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE3;
        if (value == "ListContinue4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE4;
        if (value == "ListContinue5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_CONTINUE5;
        if (value == "MessageHeader") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MESSAGE_HEADER;
        if (value == "Subtitle") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTITLE;
        if (value == "Salutation") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SALUTATION;
        if (value == "Date") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DATE;
        if (value == "BodyText1I") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT1_I;
        if (value == "BodyText1I2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT1_I2;
        if (value == "NoteHeading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NOTE_HEADING;
        if (value == "BodyText2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT2;
        if (value == "BodyText3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT3;
        if (value == "BodyTextInd2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND2;
        if (value == "BodyTextInd3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BODY_TEXT_IND3;
        if (value == "BlockText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BLOCK_TEXT;
        if (value == "Hyperlink") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HYPERLINK;
        if (value == "FollowedHyperlink") return aspose::words::cloud::models::TableProperties::StyleIdentifier::FOLLOWED_HYPERLINK;
        if (value == "Strong") return aspose::words::cloud::models::TableProperties::StyleIdentifier::STRONG;
        if (value == "Emphasis") return aspose::words::cloud::models::TableProperties::StyleIdentifier::EMPHASIS;
        if (value == "DocumentMap") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DOCUMENT_MAP;
        if (value == "PlainText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TEXT;
        if (value == "EmailSignature") return aspose::words::cloud::models::TableProperties::StyleIdentifier::EMAIL_SIGNATURE;
        if (value == "HtmlTopOfForm") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_TOP_OF_FORM;
        if (value == "HtmlBottomOfForm") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_BOTTOM_OF_FORM;
        if (value == "NormalWeb") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NORMAL_WEB;
        if (value == "HtmlAcronym") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_ACRONYM;
        if (value == "HtmlAddress") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_ADDRESS;
        if (value == "HtmlCite") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_CITE;
        if (value == "HtmlCode") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_CODE;
        if (value == "HtmlDefinition") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_DEFINITION;
        if (value == "HtmlKeyboard") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_KEYBOARD;
        if (value == "HtmlPreformatted") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_PREFORMATTED;
        if (value == "HtmlSample") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_SAMPLE;
        if (value == "HtmlTypewriter") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_TYPEWRITER;
        if (value == "HtmlVariable") return aspose::words::cloud::models::TableProperties::StyleIdentifier::HTML_VARIABLE;
        if (value == "TableNormal") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_NORMAL;
        if (value == "CommentSubject") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COMMENT_SUBJECT;
        if (value == "NoList") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NO_LIST;
        if (value == "OutlineList1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST1;
        if (value == "OutlineList2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST2;
        if (value == "OutlineList3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::OUTLINE_LIST3;
        if (value == "TableSimple1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE1;
        if (value == "TableSimple2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE2;
        if (value == "TableSimple3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SIMPLE3;
        if (value == "TableClassic1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC1;
        if (value == "TableClassic2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC2;
        if (value == "TableClassic3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC3;
        if (value == "TableClassic4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CLASSIC4;
        if (value == "TableColorful1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL1;
        if (value == "TableColorful2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL2;
        if (value == "TableColorful3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLORFUL3;
        if (value == "TableColumns1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS1;
        if (value == "TableColumns2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS2;
        if (value == "TableColumns3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS3;
        if (value == "TableColumns4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS4;
        if (value == "TableColumns5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_COLUMNS5;
        if (value == "TableGrid1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID1;
        if (value == "TableGrid2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID2;
        if (value == "TableGrid3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID3;
        if (value == "TableGrid4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID4;
        if (value == "TableGrid5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID5;
        if (value == "TableGrid6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID6;
        if (value == "TableGrid7") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID7;
        if (value == "TableGrid8") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID8;
        if (value == "TableList1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST1;
        if (value == "TableList2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST2;
        if (value == "TableList3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST3;
        if (value == "TableList4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST4;
        if (value == "TableList5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST5;
        if (value == "TableList6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST6;
        if (value == "TableList7") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST7;
        if (value == "TableList8") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_LIST8;
        if (value == "Table3DEffects1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS1;
        if (value == "Table3DEffects2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS2;
        if (value == "Table3DEffects3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE3_D_EFFECTS3;
        if (value == "TableContemporary") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_CONTEMPORARY;
        if (value == "TableElegant") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_ELEGANT;
        if (value == "TableProfessional") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_PROFESSIONAL;
        if (value == "TableSubtle1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SUBTLE1;
        if (value == "TableSubtle2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_SUBTLE2;
        if (value == "TableWeb1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB1;
        if (value == "TableWeb2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB2;
        if (value == "TableWeb3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_WEB3;
        if (value == "BalloonText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BALLOON_TEXT;
        if (value == "TableGrid") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID;
        if (value == "TableTheme") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_THEME;
        if (value == "PlaceholderText") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLACEHOLDER_TEXT;
        if (value == "NoSpacing") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NO_SPACING;
        if (value == "LightShading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING;
        if (value == "LightList") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST;
        if (value == "LightGrid") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID;
        if (value == "MediumShading1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1;
        if (value == "MediumShading2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2;
        if (value == "MediumList1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1;
        if (value == "MediumList2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2;
        if (value == "MediumGrid1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1;
        if (value == "MediumGrid2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2;
        if (value == "MediumGrid3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3;
        if (value == "DarkList") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST;
        if (value == "ColorfulShading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING;
        if (value == "ColorfulList") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST;
        if (value == "ColorfulGrid") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID;
        if (value == "LightShadingAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT1;
        if (value == "LightListAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT1;
        if (value == "LightGridAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT1;
        if (value == "MediumShading1Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT1;
        if (value == "MediumShading2Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT1;
        if (value == "MediumList1Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT1;
        if (value == "Revision") return aspose::words::cloud::models::TableProperties::StyleIdentifier::REVISION;
        if (value == "ListParagraph") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_PARAGRAPH;
        if (value == "Quote") return aspose::words::cloud::models::TableProperties::StyleIdentifier::QUOTE;
        if (value == "IntenseQuote") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_QUOTE;
        if (value == "MediumList2Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT1;
        if (value == "MediumGrid1Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT1;
        if (value == "MediumGrid2Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT1;
        if (value == "MediumGrid3Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT1;
        if (value == "DarkListAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT1;
        if (value == "ColorfulShadingAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT1;
        if (value == "ColorfulListAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT1;
        if (value == "ColorfulGridAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT1;
        if (value == "LightShadingAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT2;
        if (value == "LightListAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT2;
        if (value == "LightGridAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT2;
        if (value == "MediumShading1Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT2;
        if (value == "MediumShading2Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT2;
        if (value == "MediumList1Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT2;
        if (value == "MediumList2Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT2;
        if (value == "MediumGrid1Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT2;
        if (value == "MediumGrid2Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT2;
        if (value == "MediumGrid3Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT2;
        if (value == "DarkListAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT2;
        if (value == "ColorfulShadingAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT2;
        if (value == "ColorfulListAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT2;
        if (value == "ColorfulGridAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT2;
        if (value == "LightShadingAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT3;
        if (value == "LightListAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT3;
        if (value == "LightGridAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT3;
        if (value == "MediumShading1Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT3;
        if (value == "MediumShading2Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT3;
        if (value == "MediumList1Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT3;
        if (value == "MediumList2Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT3;
        if (value == "MediumGrid1Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT3;
        if (value == "MediumGrid2Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT3;
        if (value == "MediumGrid3Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT3;
        if (value == "DarkListAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT3;
        if (value == "ColorfulShadingAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT3;
        if (value == "ColorfulListAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT3;
        if (value == "ColorfulGridAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT3;
        if (value == "LightShadingAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT4;
        if (value == "LightListAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT4;
        if (value == "LightGridAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT4;
        if (value == "MediumShading1Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT4;
        if (value == "MediumShading2Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT4;
        if (value == "MediumList1Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT4;
        if (value == "MediumList2Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT4;
        if (value == "MediumGrid1Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT4;
        if (value == "MediumGrid2Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT4;
        if (value == "MediumGrid3Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT4;
        if (value == "DarkListAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT4;
        if (value == "ColorfulShadingAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT4;
        if (value == "ColorfulListAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT4;
        if (value == "ColorfulGridAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT4;
        if (value == "LightShadingAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT5;
        if (value == "LightListAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT5;
        if (value == "LightGridAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT5;
        if (value == "MediumShading1Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT5;
        if (value == "MediumShading2Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT5;
        if (value == "MediumList1Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT5;
        if (value == "MediumList2Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT5;
        if (value == "MediumGrid1Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT5;
        if (value == "MediumGrid2Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT5;
        if (value == "MediumGrid3Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT5;
        if (value == "DarkListAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT5;
        if (value == "ColorfulShadingAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT5;
        if (value == "ColorfulListAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT5;
        if (value == "ColorfulGridAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT5;
        if (value == "LightShadingAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_SHADING_ACCENT6;
        if (value == "LightListAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_LIST_ACCENT6;
        if (value == "LightGridAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIGHT_GRID_ACCENT6;
        if (value == "MediumShading1Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING1_ACCENT6;
        if (value == "MediumShading2Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_SHADING2_ACCENT6;
        if (value == "MediumList1Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST1_ACCENT6;
        if (value == "MediumList2Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_LIST2_ACCENT6;
        if (value == "MediumGrid1Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID1_ACCENT6;
        if (value == "MediumGrid2Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID2_ACCENT6;
        if (value == "MediumGrid3Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::MEDIUM_GRID3_ACCENT6;
        if (value == "DarkListAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::DARK_LIST_ACCENT6;
        if (value == "ColorfulShadingAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_SHADING_ACCENT6;
        if (value == "ColorfulListAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_LIST_ACCENT6;
        if (value == "ColorfulGridAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::COLORFUL_GRID_ACCENT6;
        if (value == "SubtleEmphasis") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTLE_EMPHASIS;
        if (value == "IntenseEmphasis") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_EMPHASIS;
        if (value == "SubtleReference") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SUBTLE_REFERENCE;
        if (value == "IntenseReference") return aspose::words::cloud::models::TableProperties::StyleIdentifier::INTENSE_REFERENCE;
        if (value == "BookTitle") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BOOK_TITLE;
        if (value == "Bibliography") return aspose::words::cloud::models::TableProperties::StyleIdentifier::BIBLIOGRAPHY;
        if (value == "TocHeading") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TOC_HEADING;
        if (value == "PlainTable1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE1;
        if (value == "PlainTable2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE2;
        if (value == "PlainTable3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE3;
        if (value == "PlainTable4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE4;
        if (value == "PlainTable5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::PLAIN_TABLE5;
        if (value == "TableGridLight") return aspose::words::cloud::models::TableProperties::StyleIdentifier::TABLE_GRID_LIGHT;
        if (value == "GridTable1Light") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT;
        if (value == "GridTable2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2;
        if (value == "GridTable3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3;
        if (value == "GridTable4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4;
        if (value == "GridTable5Dark") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK;
        if (value == "GridTable6Colorful") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL;
        if (value == "GridTable7Colorful") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL;
        if (value == "GridTable1LightAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT1;
        if (value == "GridTable2Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT1;
        if (value == "GridTable3Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT1;
        if (value == "GridTable4Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT1;
        if (value == "GridTable5DarkAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT1;
        if (value == "GridTable6ColorfulAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT1;
        if (value == "GridTable7ColorfulAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT1;
        if (value == "GridTable1LightAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT2;
        if (value == "GridTable2Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT2;
        if (value == "GridTable3Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT2;
        if (value == "GridTable4Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT2;
        if (value == "GridTable5DarkAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT2;
        if (value == "GridTable6ColorfulAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT2;
        if (value == "GridTable7ColorfulAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT2;
        if (value == "GridTable1LightAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT3;
        if (value == "GridTable2Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT3;
        if (value == "GridTable3Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT3;
        if (value == "GridTable4Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT3;
        if (value == "GridTable5DarkAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT3;
        if (value == "GridTable6ColorfulAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT3;
        if (value == "GridTable7ColorfulAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT3;
        if (value == "GridTable1LightAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT4;
        if (value == "GridTable2Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT4;
        if (value == "GridTable3Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT4;
        if (value == "GridTable4Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT4;
        if (value == "GridTable5DarkAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT4;
        if (value == "GridTable6ColorfulAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT4;
        if (value == "GridTable7ColorfulAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT4;
        if (value == "GridTable1LightAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT5;
        if (value == "GridTable2Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT5;
        if (value == "GridTable3Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT5;
        if (value == "GridTable4Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT5;
        if (value == "GridTable5DarkAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT5;
        if (value == "GridTable6ColorfulAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT5;
        if (value == "GridTable7ColorfulAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT5;
        if (value == "GridTable1LightAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE1_LIGHT_ACCENT6;
        if (value == "GridTable2Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE2_ACCENT6;
        if (value == "GridTable3Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE3_ACCENT6;
        if (value == "GridTable4Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE4_ACCENT6;
        if (value == "GridTable5DarkAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE5_DARK_ACCENT6;
        if (value == "GridTable6ColorfulAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE6_COLORFUL_ACCENT6;
        if (value == "GridTable7ColorfulAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::GRID_TABLE7_COLORFUL_ACCENT6;
        if (value == "ListTable1Light") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT;
        if (value == "ListTable2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2;
        if (value == "ListTable3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3;
        if (value == "ListTable4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4;
        if (value == "ListTable5Dark") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK;
        if (value == "ListTable6Colorful") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL;
        if (value == "ListTable7Colorful") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL;
        if (value == "ListTable1LightAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT1;
        if (value == "ListTable2Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT1;
        if (value == "ListTable3Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT1;
        if (value == "ListTable4Accent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT1;
        if (value == "ListTable5DarkAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT1;
        if (value == "ListTable6ColorfulAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT1;
        if (value == "ListTable7ColorfulAccent1") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT1;
        if (value == "ListTable1LightAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT2;
        if (value == "ListTable2Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT2;
        if (value == "ListTable3Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT2;
        if (value == "ListTable4Accent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT2;
        if (value == "ListTable5DarkAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT2;
        if (value == "ListTable6ColorfulAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT2;
        if (value == "ListTable7ColorfulAccent2") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT2;
        if (value == "ListTable1LightAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT3;
        if (value == "ListTable2Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT3;
        if (value == "ListTable3Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT3;
        if (value == "ListTable4Accent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT3;
        if (value == "ListTable5DarkAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT3;
        if (value == "ListTable6ColorfulAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT3;
        if (value == "ListTable7ColorfulAccent3") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT3;
        if (value == "ListTable1LightAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT4;
        if (value == "ListTable2Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT4;
        if (value == "ListTable3Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT4;
        if (value == "ListTable4Accent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT4;
        if (value == "ListTable5DarkAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT4;
        if (value == "ListTable6ColorfulAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT4;
        if (value == "ListTable7ColorfulAccent4") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT4;
        if (value == "ListTable1LightAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT5;
        if (value == "ListTable2Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT5;
        if (value == "ListTable3Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT5;
        if (value == "ListTable4Accent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT5;
        if (value == "ListTable5DarkAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT5;
        if (value == "ListTable6ColorfulAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT5;
        if (value == "ListTable7ColorfulAccent5") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT5;
        if (value == "ListTable1LightAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE1_LIGHT_ACCENT6;
        if (value == "ListTable2Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE2_ACCENT6;
        if (value == "ListTable3Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE3_ACCENT6;
        if (value == "ListTable4Accent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE4_ACCENT6;
        if (value == "ListTable5DarkAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE5_DARK_ACCENT6;
        if (value == "ListTable6ColorfulAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE6_COLORFUL_ACCENT6;
        if (value == "ListTable7ColorfulAccent6") return aspose::words::cloud::models::TableProperties::StyleIdentifier::LIST_TABLE7_COLORFUL_ACCENT6;
        if (value == "SmartLink") return aspose::words::cloud::models::TableProperties::StyleIdentifier::SMART_LINK;
        if (value == "User") return aspose::words::cloud::models::TableProperties::StyleIdentifier::USER;
        if (value == "Nil") return aspose::words::cloud::models::TableProperties::StyleIdentifier::NIL;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tablePropertiesStyleOptionsToString(aspose::words::cloud::models::TableProperties::StyleOptions value)
    {
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::NONE) return "None";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::FIRST_ROW) return "FirstRow";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::LAST_ROW) return "LastRow";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::FIRST_COLUMN) return "FirstColumn";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::LAST_COLUMN) return "LastColumn";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::ROW_BANDS) return "RowBands";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::COLUMN_BANDS) return "ColumnBands";
        if (value == aspose::words::cloud::models::TableProperties::StyleOptions::DEFAULT2003) return "Default2003";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableProperties::StyleOptions tablePropertiesStyleOptionsFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::TableProperties::StyleOptions::NONE;
        if (value == "FirstRow") return aspose::words::cloud::models::TableProperties::StyleOptions::FIRST_ROW;
        if (value == "LastRow") return aspose::words::cloud::models::TableProperties::StyleOptions::LAST_ROW;
        if (value == "FirstColumn") return aspose::words::cloud::models::TableProperties::StyleOptions::FIRST_COLUMN;
        if (value == "LastColumn") return aspose::words::cloud::models::TableProperties::StyleOptions::LAST_COLUMN;
        if (value == "RowBands") return aspose::words::cloud::models::TableProperties::StyleOptions::ROW_BANDS;
        if (value == "Default") return aspose::words::cloud::models::TableProperties::StyleOptions::DEFAULT;
        if (value == "ColumnBands") return aspose::words::cloud::models::TableProperties::StyleOptions::COLUMN_BANDS;
        if (value == "Default2003") return aspose::words::cloud::models::TableProperties::StyleOptions::DEFAULT2003;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tablePropertiesTextWrappingToString(aspose::words::cloud::models::TableProperties::TextWrapping value)
    {
        if (value == aspose::words::cloud::models::TableProperties::TextWrapping::DEFAULT) return "Default";
        if (value == aspose::words::cloud::models::TableProperties::TextWrapping::NONE) return "None";
        if (value == aspose::words::cloud::models::TableProperties::TextWrapping::AROUND) return "Around";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableProperties::TextWrapping tablePropertiesTextWrappingFromString(const std::string& value)
    {
        if (value == "Default") return aspose::words::cloud::models::TableProperties::TextWrapping::DEFAULT;
        if (value == "None") return aspose::words::cloud::models::TableProperties::TextWrapping::NONE;
        if (value == "Around") return aspose::words::cloud::models::TableProperties::TextWrapping::AROUND;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void TableProperties::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = tablePropertiesAlignmentToString(*m_Alignment);
        }
        if (m_AllowAutoFit) {
            json["AllowAutoFit"] = *m_AllowAutoFit;
        }
        if (m_Bidi) {
            json["Bidi"] = *m_Bidi;
        }
        if (m_BottomPadding) {
            json["BottomPadding"] = *m_BottomPadding;
        }
        if (m_CellSpacing) {
            json["CellSpacing"] = *m_CellSpacing;
        }
        if (m_LeftIndent) {
            json["LeftIndent"] = *m_LeftIndent;
        }
        if (m_LeftPadding) {
            json["LeftPadding"] = *m_LeftPadding;
        }
        if (m_PreferredWidth) {
            m_PreferredWidth->toJson(&json["PreferredWidth"]);
        }
        if (m_RightPadding) {
            json["RightPadding"] = *m_RightPadding;
        }
        if (m_StyleIdentifier) {
            json["StyleIdentifier"] = tablePropertiesStyleIdentifierToString(*m_StyleIdentifier);
        }
        if (m_StyleName) {
            json["StyleName"] = convertUtf16(*m_StyleName);
        }
        if (m_StyleOptions) {
            json["StyleOptions"] = tablePropertiesStyleOptionsToString(*m_StyleOptions);
        }
        if (m_TextWrapping) {
            json["TextWrapping"] = tablePropertiesTextWrappingToString(*m_TextWrapping);
        }
        if (m_TopPadding) {
            json["TopPadding"] = *m_TopPadding;
        }
    }

    void TableProperties::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::TableProperties::Alignment >(
                tablePropertiesAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("AllowAutoFit") && !json["AllowAutoFit"].is_null()) {
            m_AllowAutoFit = std::make_shared< bool >(
                json["AllowAutoFit"].get< bool >()
            );
        }
        if (json.contains("Bidi") && !json["Bidi"].is_null()) {
            m_Bidi = std::make_shared< bool >(
                json["Bidi"].get< bool >()
            );
        }
        if (json.contains("BottomPadding") && !json["BottomPadding"].is_null()) {
            m_BottomPadding = std::make_shared< double >(
                json["BottomPadding"].get< double >()
            );
        }
        if (json.contains("CellSpacing") && !json["CellSpacing"].is_null()) {
            m_CellSpacing = std::make_shared< double >(
                json["CellSpacing"].get< double >()
            );
        }
        if (json.contains("LeftIndent") && !json["LeftIndent"].is_null()) {
            m_LeftIndent = std::make_shared< double >(
                json["LeftIndent"].get< double >()
            );
        }
        if (json.contains("LeftPadding") && !json["LeftPadding"].is_null()) {
            m_LeftPadding = std::make_shared< double >(
                json["LeftPadding"].get< double >()
            );
        }
        if (json.contains("PreferredWidth") && !json["PreferredWidth"].is_null()) {
            m_PreferredWidth = std::make_shared< aspose::words::cloud::models::PreferredWidth >();
            m_PreferredWidth->fromJson(&json["PreferredWidth"]);
        }
        if (json.contains("RightPadding") && !json["RightPadding"].is_null()) {
            m_RightPadding = std::make_shared< double >(
                json["RightPadding"].get< double >()
            );
        }
        if (json.contains("StyleIdentifier") && !json["StyleIdentifier"].is_null()) {
            m_StyleIdentifier = std::make_shared< aspose::words::cloud::models::TableProperties::StyleIdentifier >(
                tablePropertiesStyleIdentifierFromString(json["StyleIdentifier"].get< std::string >())
            );
        }
        if (json.contains("StyleName") && !json["StyleName"].is_null()) {
            m_StyleName = std::make_shared< std::wstring >(
                convertUtf8( json["StyleName"].get< std::string >() )
            );
        }
        if (json.contains("StyleOptions") && !json["StyleOptions"].is_null()) {
            m_StyleOptions = std::make_shared< aspose::words::cloud::models::TableProperties::StyleOptions >(
                tablePropertiesStyleOptionsFromString(json["StyleOptions"].get< std::string >())
            );
        }
        if (json.contains("TextWrapping") && !json["TextWrapping"].is_null()) {
            m_TextWrapping = std::make_shared< aspose::words::cloud::models::TableProperties::TextWrapping >(
                tablePropertiesTextWrappingFromString(json["TextWrapping"].get< std::string >())
            );
        }
        if (json.contains("TopPadding") && !json["TopPadding"].is_null()) {
            m_TopPadding = std::make_shared< double >(
                json["TopPadding"].get< double >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties::Alignment > TableProperties::getAlignment() const
    {
        return m_Alignment;
    }

    void TableProperties::setAlignment(std::shared_ptr< aspose::words::cloud::models::TableProperties::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< bool > TableProperties::getAllowAutoFit() const
    {
        return m_AllowAutoFit;
    }

    void TableProperties::setAllowAutoFit(std::shared_ptr< bool > value)
    {
        m_AllowAutoFit = value;
    }

    std::shared_ptr< bool > TableProperties::getBidi() const
    {
        return m_Bidi;
    }

    void TableProperties::setBidi(std::shared_ptr< bool > value)
    {
        m_Bidi = value;
    }

    std::shared_ptr< double > TableProperties::getBottomPadding() const
    {
        return m_BottomPadding;
    }

    void TableProperties::setBottomPadding(std::shared_ptr< double > value)
    {
        m_BottomPadding = value;
    }

    std::shared_ptr< double > TableProperties::getCellSpacing() const
    {
        return m_CellSpacing;
    }

    void TableProperties::setCellSpacing(std::shared_ptr< double > value)
    {
        m_CellSpacing = value;
    }

    std::shared_ptr< double > TableProperties::getLeftIndent() const
    {
        return m_LeftIndent;
    }

    void TableProperties::setLeftIndent(std::shared_ptr< double > value)
    {
        m_LeftIndent = value;
    }

    std::shared_ptr< double > TableProperties::getLeftPadding() const
    {
        return m_LeftPadding;
    }

    void TableProperties::setLeftPadding(std::shared_ptr< double > value)
    {
        m_LeftPadding = value;
    }

    std::shared_ptr< aspose::words::cloud::models::PreferredWidth > TableProperties::getPreferredWidth() const
    {
        return m_PreferredWidth;
    }

    void TableProperties::setPreferredWidth(std::shared_ptr< aspose::words::cloud::models::PreferredWidth > value)
    {
        m_PreferredWidth = value;
    }

    std::shared_ptr< double > TableProperties::getRightPadding() const
    {
        return m_RightPadding;
    }

    void TableProperties::setRightPadding(std::shared_ptr< double > value)
    {
        m_RightPadding = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties::StyleIdentifier > TableProperties::getStyleIdentifier() const
    {
        return m_StyleIdentifier;
    }

    void TableProperties::setStyleIdentifier(std::shared_ptr< aspose::words::cloud::models::TableProperties::StyleIdentifier > value)
    {
        m_StyleIdentifier = value;
    }

    std::shared_ptr< std::wstring > TableProperties::getStyleName() const
    {
        return m_StyleName;
    }

    void TableProperties::setStyleName(std::shared_ptr< std::wstring > value)
    {
        m_StyleName = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties::StyleOptions > TableProperties::getStyleOptions() const
    {
        return m_StyleOptions;
    }

    void TableProperties::setStyleOptions(std::shared_ptr< aspose::words::cloud::models::TableProperties::StyleOptions > value)
    {
        m_StyleOptions = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties::TextWrapping > TableProperties::getTextWrapping() const
    {
        return m_TextWrapping;
    }

    void TableProperties::setTextWrapping(std::shared_ptr< aspose::words::cloud::models::TableProperties::TextWrapping > value)
    {
        m_TextWrapping = value;
    }

    std::shared_ptr< double > TableProperties::getTopPadding() const
    {
        return m_TopPadding;
    }

    void TableProperties::setTopPadding(std::shared_ptr< double > value)
    {
        m_TopPadding = value;
    }


    /*
     * TablePropertiesDto implementation
     */
    void TablePropertiesDto::toJson(void* jsonIfc) const
    {
    }

    void TablePropertiesDto::fromJson(const void* jsonIfc)
    {
    }




    /*
     * TablePropertiesResponse implementation
     */
    void TablePropertiesResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Properties) {
            m_Properties->toJson(&json["Properties"]);
        }
    }

    void TablePropertiesResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Properties") && !json["Properties"].is_null()) {
            m_Properties = std::make_shared< aspose::words::cloud::models::TableProperties >();
            m_Properties->fromJson(&json["Properties"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableProperties > TablePropertiesResponse::getProperties() const
    {
        return m_Properties;
    }

    void TablePropertiesResponse::setProperties(std::shared_ptr< aspose::words::cloud::models::TableProperties > value)
    {
        m_Properties = value;
    }


    /*
     * TableResponse implementation
     */
    void TableResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Table) {
            m_Table->toJson(&json["Table"]);
        }
    }

    void TableResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Table") && !json["Table"].is_null()) {
            m_Table = std::make_shared< aspose::words::cloud::models::Table >();
            m_Table->fromJson(&json["Table"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::Table > TableResponse::getTable() const
    {
        return m_Table;
    }

    void TableResponse::setTable(std::shared_ptr< aspose::words::cloud::models::Table > value)
    {
        m_Table = value;
    }


    /*
     * TableRow implementation
     */
    void TableRow::toJson(void* jsonIfc) const
    {
        NodeLink::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_RowFormat) {
            m_RowFormat->toJson(&json["RowFormat"]);
        }
        if (m_TableCellList) {
            json["TableCellList"] = ::nlohmann::json::array();
            for (auto& element : *m_TableCellList) {
                element->toJson(&json["TableCellList"].emplace_back());
            }
        }
    }

    void TableRow::fromJson(const void* jsonIfc)
    {
        NodeLink::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("RowFormat") && !json["RowFormat"].is_null()) {
            m_RowFormat = std::make_shared< aspose::words::cloud::models::TableRowFormat >();
            m_RowFormat->fromJson(&json["RowFormat"]);
        }
        if (json.contains("TableCellList") && !json["TableCellList"].is_null()) {
            m_TableCellList = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::TableCell>> >();
            for (auto& element : json["TableCellList"]) {
                m_TableCellList->emplace_back(std::make_shared< aspose::words::cloud::models::TableCell >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableRowFormat > TableRow::getRowFormat() const
    {
        return m_RowFormat;
    }

    void TableRow::setRowFormat(std::shared_ptr< aspose::words::cloud::models::TableRowFormat > value)
    {
        m_RowFormat = value;
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableCell>> > TableRow::getTableCellList() const
    {
        return m_TableCellList;
    }

    void TableRow::setTableCellList(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TableCell>> > value)
    {
        m_TableCellList = value;
    }


    /*
     * TableRowFormat implementation
     */
    inline std::string tableRowFormatHeightRuleToString(aspose::words::cloud::models::TableRowFormat::HeightRule value)
    {
        if (value == aspose::words::cloud::models::TableRowFormat::HeightRule::AT_LEAST) return "AtLeast";
        if (value == aspose::words::cloud::models::TableRowFormat::HeightRule::EXACTLY) return "Exactly";
        if (value == aspose::words::cloud::models::TableRowFormat::HeightRule::AUTO) return "Auto";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TableRowFormat::HeightRule tableRowFormatHeightRuleFromString(const std::string& value)
    {
        if (value == "AtLeast") return aspose::words::cloud::models::TableRowFormat::HeightRule::AT_LEAST;
        if (value == "Exactly") return aspose::words::cloud::models::TableRowFormat::HeightRule::EXACTLY;
        if (value == "Auto") return aspose::words::cloud::models::TableRowFormat::HeightRule::AUTO;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void TableRowFormat::toJson(void* jsonIfc) const
    {
        LinkElement::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AllowBreakAcrossPages) {
            json["AllowBreakAcrossPages"] = *m_AllowBreakAcrossPages;
        }
        if (m_HeadingFormat) {
            json["HeadingFormat"] = *m_HeadingFormat;
        }
        if (m_Height) {
            json["Height"] = *m_Height;
        }
        if (m_HeightRule) {
            json["HeightRule"] = tableRowFormatHeightRuleToString(*m_HeightRule);
        }
    }

    void TableRowFormat::fromJson(const void* jsonIfc)
    {
        LinkElement::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AllowBreakAcrossPages") && !json["AllowBreakAcrossPages"].is_null()) {
            m_AllowBreakAcrossPages = std::make_shared< bool >(
                json["AllowBreakAcrossPages"].get< bool >()
            );
        }
        if (json.contains("HeadingFormat") && !json["HeadingFormat"].is_null()) {
            m_HeadingFormat = std::make_shared< bool >(
                json["HeadingFormat"].get< bool >()
            );
        }
        if (json.contains("Height") && !json["Height"].is_null()) {
            m_Height = std::make_shared< double >(
                json["Height"].get< double >()
            );
        }
        if (json.contains("HeightRule") && !json["HeightRule"].is_null()) {
            m_HeightRule = std::make_shared< aspose::words::cloud::models::TableRowFormat::HeightRule >(
                tableRowFormatHeightRuleFromString(json["HeightRule"].get< std::string >())
            );
        }
    }

    std::shared_ptr< bool > TableRowFormat::getAllowBreakAcrossPages() const
    {
        return m_AllowBreakAcrossPages;
    }

    void TableRowFormat::setAllowBreakAcrossPages(std::shared_ptr< bool > value)
    {
        m_AllowBreakAcrossPages = value;
    }

    std::shared_ptr< bool > TableRowFormat::getHeadingFormat() const
    {
        return m_HeadingFormat;
    }

    void TableRowFormat::setHeadingFormat(std::shared_ptr< bool > value)
    {
        m_HeadingFormat = value;
    }

    std::shared_ptr< double > TableRowFormat::getHeight() const
    {
        return m_Height;
    }

    void TableRowFormat::setHeight(std::shared_ptr< double > value)
    {
        m_Height = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TableRowFormat::HeightRule > TableRowFormat::getHeightRule() const
    {
        return m_HeightRule;
    }

    void TableRowFormat::setHeightRule(std::shared_ptr< aspose::words::cloud::models::TableRowFormat::HeightRule > value)
    {
        m_HeightRule = value;
    }


    /*
     * TableRowFormatDto implementation
     */
    void TableRowFormatDto::toJson(void* jsonIfc) const
    {
    }

    void TableRowFormatDto::fromJson(const void* jsonIfc)
    {
    }




    /*
     * TableRowFormatResponse implementation
     */
    void TableRowFormatResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_RowFormat) {
            m_RowFormat->toJson(&json["RowFormat"]);
        }
    }

    void TableRowFormatResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("RowFormat") && !json["RowFormat"].is_null()) {
            m_RowFormat = std::make_shared< aspose::words::cloud::models::TableRowFormat >();
            m_RowFormat->fromJson(&json["RowFormat"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableRowFormat > TableRowFormatResponse::getRowFormat() const
    {
        return m_RowFormat;
    }

    void TableRowFormatResponse::setRowFormat(std::shared_ptr< aspose::words::cloud::models::TableRowFormat > value)
    {
        m_RowFormat = value;
    }


    /*
     * TableRowInsert implementation
     */
    void TableRowInsert::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ColumnsCount) {
            json["ColumnsCount"] = *m_ColumnsCount;
        }
        if (m_InsertAfter) {
            json["InsertAfter"] = *m_InsertAfter;
        }
    }

    void TableRowInsert::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ColumnsCount") && !json["ColumnsCount"].is_null()) {
            m_ColumnsCount = std::make_shared< int32_t >(
                json["ColumnsCount"].get< int32_t >()
            );
        }
        if (json.contains("InsertAfter") && !json["InsertAfter"].is_null()) {
            m_InsertAfter = std::make_shared< int32_t >(
                json["InsertAfter"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableRowInsert::getColumnsCount() const
    {
        return m_ColumnsCount;
    }

    void TableRowInsert::setColumnsCount(std::shared_ptr< int32_t > value)
    {
        m_ColumnsCount = value;
    }

    std::shared_ptr< int32_t > TableRowInsert::getInsertAfter() const
    {
        return m_InsertAfter;
    }

    void TableRowInsert::setInsertAfter(std::shared_ptr< int32_t > value)
    {
        m_InsertAfter = value;
    }


    /*
     * TableRowInsertDto implementation
     */
    void TableRowInsertDto::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ColumnsCount) {
            json["ColumnsCount"] = *m_ColumnsCount;
        }
        if (m_InsertAfter) {
            json["InsertAfter"] = *m_InsertAfter;
        }
    }

    void TableRowInsertDto::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ColumnsCount") && !json["ColumnsCount"].is_null()) {
            m_ColumnsCount = std::make_shared< int32_t >(
                json["ColumnsCount"].get< int32_t >()
            );
        }
        if (json.contains("InsertAfter") && !json["InsertAfter"].is_null()) {
            m_InsertAfter = std::make_shared< int32_t >(
                json["InsertAfter"].get< int32_t >()
            );
        }
    }

    std::shared_ptr< int32_t > TableRowInsertDto::getColumnsCount() const
    {
        return m_ColumnsCount;
    }

    void TableRowInsertDto::setColumnsCount(std::shared_ptr< int32_t > value)
    {
        m_ColumnsCount = value;
    }

    std::shared_ptr< int32_t > TableRowInsertDto::getInsertAfter() const
    {
        return m_InsertAfter;
    }

    void TableRowInsertDto::setInsertAfter(std::shared_ptr< int32_t > value)
    {
        m_InsertAfter = value;
    }


    /*
     * TableRowResponse implementation
     */
    void TableRowResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Row) {
            m_Row->toJson(&json["Row"]);
        }
    }

    void TableRowResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Row") && !json["Row"].is_null()) {
            m_Row = std::make_shared< aspose::words::cloud::models::TableRow >();
            m_Row->fromJson(&json["Row"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TableRow > TableRowResponse::getRow() const
    {
        return m_Row;
    }

    void TableRowResponse::setRow(std::shared_ptr< aspose::words::cloud::models::TableRow > value)
    {
        m_Row = value;
    }


    /*
     * TabStop implementation
     */
    void TabStop::toJson(void* jsonIfc) const
    {
        TabStopBase::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_IsClear) {
            json["IsClear"] = *m_IsClear;
        }
    }

    void TabStop::fromJson(const void* jsonIfc)
    {
        TabStopBase::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("IsClear") && !json["IsClear"].is_null()) {
            m_IsClear = std::make_shared< bool >(
                json["IsClear"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > TabStop::getIsClear() const
    {
        return m_IsClear;
    }

    void TabStop::setIsClear(std::shared_ptr< bool > value)
    {
        m_IsClear = value;
    }


    /*
     * TabStopBase implementation
     */
    inline std::string tabStopBaseAlignmentToString(aspose::words::cloud::models::TabStopBase::Alignment value)
    {
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::LEFT) return "Left";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::CENTER) return "Center";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::RIGHT) return "Right";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::DECIMAL) return "Decimal";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::BAR) return "Bar";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::LIST) return "List";
        if (value == aspose::words::cloud::models::TabStopBase::Alignment::CLEAR) return "Clear";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TabStopBase::Alignment tabStopBaseAlignmentFromString(const std::string& value)
    {
        if (value == "Left") return aspose::words::cloud::models::TabStopBase::Alignment::LEFT;
        if (value == "Center") return aspose::words::cloud::models::TabStopBase::Alignment::CENTER;
        if (value == "Right") return aspose::words::cloud::models::TabStopBase::Alignment::RIGHT;
        if (value == "Decimal") return aspose::words::cloud::models::TabStopBase::Alignment::DECIMAL;
        if (value == "Bar") return aspose::words::cloud::models::TabStopBase::Alignment::BAR;
        if (value == "List") return aspose::words::cloud::models::TabStopBase::Alignment::LIST;
        if (value == "Clear") return aspose::words::cloud::models::TabStopBase::Alignment::CLEAR;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline std::string tabStopBaseLeaderToString(aspose::words::cloud::models::TabStopBase::Leader value)
    {
        if (value == aspose::words::cloud::models::TabStopBase::Leader::NONE) return "None";
        if (value == aspose::words::cloud::models::TabStopBase::Leader::DOTS) return "Dots";
        if (value == aspose::words::cloud::models::TabStopBase::Leader::DASHES) return "Dashes";
        if (value == aspose::words::cloud::models::TabStopBase::Leader::LINE) return "Line";
        if (value == aspose::words::cloud::models::TabStopBase::Leader::HEAVY) return "Heavy";
        if (value == aspose::words::cloud::models::TabStopBase::Leader::MIDDLE_DOT) return "MiddleDot";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TabStopBase::Leader tabStopBaseLeaderFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::TabStopBase::Leader::NONE;
        if (value == "Dots") return aspose::words::cloud::models::TabStopBase::Leader::DOTS;
        if (value == "Dashes") return aspose::words::cloud::models::TabStopBase::Leader::DASHES;
        if (value == "Line") return aspose::words::cloud::models::TabStopBase::Leader::LINE;
        if (value == "Heavy") return aspose::words::cloud::models::TabStopBase::Leader::HEAVY;
        if (value == "MiddleDot") return aspose::words::cloud::models::TabStopBase::Leader::MIDDLE_DOT;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void TabStopBase::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alignment) {
            json["Alignment"] = tabStopBaseAlignmentToString(*m_Alignment);
        }
        if (m_Leader) {
            json["Leader"] = tabStopBaseLeaderToString(*m_Leader);
        }
        if (m_Position) {
            json["Position"] = *m_Position;
        }
    }

    void TabStopBase::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alignment") && !json["Alignment"].is_null()) {
            m_Alignment = std::make_shared< aspose::words::cloud::models::TabStopBase::Alignment >(
                tabStopBaseAlignmentFromString(json["Alignment"].get< std::string >())
            );
        }
        if (json.contains("Leader") && !json["Leader"].is_null()) {
            m_Leader = std::make_shared< aspose::words::cloud::models::TabStopBase::Leader >(
                tabStopBaseLeaderFromString(json["Leader"].get< std::string >())
            );
        }
        if (json.contains("Position") && !json["Position"].is_null()) {
            m_Position = std::make_shared< double >(
                json["Position"].get< double >()
            );
        }
    }

    std::shared_ptr< aspose::words::cloud::models::TabStopBase::Alignment > TabStopBase::getAlignment() const
    {
        return m_Alignment;
    }

    void TabStopBase::setAlignment(std::shared_ptr< aspose::words::cloud::models::TabStopBase::Alignment > value)
    {
        m_Alignment = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TabStopBase::Leader > TabStopBase::getLeader() const
    {
        return m_Leader;
    }

    void TabStopBase::setLeader(std::shared_ptr< aspose::words::cloud::models::TabStopBase::Leader > value)
    {
        m_Leader = value;
    }

    std::shared_ptr< double > TabStopBase::getPosition() const
    {
        return m_Position;
    }

    void TabStopBase::setPosition(std::shared_ptr< double > value)
    {
        m_Position = value;
    }


    /*
     * TabStopInsert implementation
     */
    void TabStopInsert::toJson(void* jsonIfc) const
    {
        TabStopBase::toJson(jsonIfc);
    }

    void TabStopInsert::fromJson(const void* jsonIfc)
    {
        TabStopBase::fromJson(jsonIfc);
    }




    /*
     * TabStopsResponse implementation
     */
    void TabStopsResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_TabStops) {
            json["TabStops"] = ::nlohmann::json::array();
            for (auto& element : *m_TabStops) {
                element->toJson(&json["TabStops"].emplace_back());
            }
        }
    }

    void TabStopsResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("TabStops") && !json["TabStops"].is_null()) {
            m_TabStops = std::make_shared< std::vector<std::shared_ptr<aspose::words::cloud::models::TabStop>> >();
            for (auto& element : json["TabStops"]) {
                m_TabStops->emplace_back(std::make_shared< aspose::words::cloud::models::TabStop >())->fromJson(&element);
            }
        }
    }

    std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TabStop>> > TabStopsResponse::getTabStops() const
    {
        return m_TabStops;
    }

    void TabStopsResponse::setTabStops(std::shared_ptr< std::vector<std::shared_ptr<aspose::words::cloud::models::TabStop>> > value)
    {
        m_TabStops = value;
    }


    /*
     * TextSaveOptionsData implementation
     */
    void TextSaveOptionsData::toJson(void* jsonIfc) const
    {
        TxtSaveOptionsBaseData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_AddBidiMarks) {
            json["AddBidiMarks"] = *m_AddBidiMarks;
        }
        if (m_MaxCharactersPerLine) {
            json["MaxCharactersPerLine"] = *m_MaxCharactersPerLine;
        }
        if (m_PreserveTableLayout) {
            json["PreserveTableLayout"] = *m_PreserveTableLayout;
        }
        if (m_SimplifyListLabels) {
            json["SimplifyListLabels"] = *m_SimplifyListLabels;
        }
    }

    void TextSaveOptionsData::fromJson(const void* jsonIfc)
    {
        TxtSaveOptionsBaseData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("AddBidiMarks") && !json["AddBidiMarks"].is_null()) {
            m_AddBidiMarks = std::make_shared< bool >(
                json["AddBidiMarks"].get< bool >()
            );
        }
        if (json.contains("MaxCharactersPerLine") && !json["MaxCharactersPerLine"].is_null()) {
            m_MaxCharactersPerLine = std::make_shared< int32_t >(
                json["MaxCharactersPerLine"].get< int32_t >()
            );
        }
        if (json.contains("PreserveTableLayout") && !json["PreserveTableLayout"].is_null()) {
            m_PreserveTableLayout = std::make_shared< bool >(
                json["PreserveTableLayout"].get< bool >()
            );
        }
        if (json.contains("SimplifyListLabels") && !json["SimplifyListLabels"].is_null()) {
            m_SimplifyListLabels = std::make_shared< bool >(
                json["SimplifyListLabels"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > TextSaveOptionsData::getAddBidiMarks() const
    {
        return m_AddBidiMarks;
    }

    void TextSaveOptionsData::setAddBidiMarks(std::shared_ptr< bool > value)
    {
        m_AddBidiMarks = value;
    }

    std::shared_ptr< int32_t > TextSaveOptionsData::getMaxCharactersPerLine() const
    {
        return m_MaxCharactersPerLine;
    }

    void TextSaveOptionsData::setMaxCharactersPerLine(std::shared_ptr< int32_t > value)
    {
        m_MaxCharactersPerLine = value;
    }

    std::shared_ptr< bool > TextSaveOptionsData::getPreserveTableLayout() const
    {
        return m_PreserveTableLayout;
    }

    void TextSaveOptionsData::setPreserveTableLayout(std::shared_ptr< bool > value)
    {
        m_PreserveTableLayout = value;
    }

    std::shared_ptr< bool > TextSaveOptionsData::getSimplifyListLabels() const
    {
        return m_SimplifyListLabels;
    }

    void TextSaveOptionsData::setSimplifyListLabels(std::shared_ptr< bool > value)
    {
        m_SimplifyListLabels = value;
    }


    /*
     * TiffSaveOptionsData implementation
     */
    void TiffSaveOptionsData::toJson(void* jsonIfc) const
    {
        ImageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ThresholdForFloydSteinbergDithering) {
            json["ThresholdForFloydSteinbergDithering"] = *m_ThresholdForFloydSteinbergDithering;
        }
        if (m_TiffBinarizationMethod) {
            json["TiffBinarizationMethod"] = convertUtf16(*m_TiffBinarizationMethod);
        }
        if (m_TiffCompression) {
            json["TiffCompression"] = convertUtf16(*m_TiffCompression);
        }
    }

    void TiffSaveOptionsData::fromJson(const void* jsonIfc)
    {
        ImageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ThresholdForFloydSteinbergDithering") && !json["ThresholdForFloydSteinbergDithering"].is_null()) {
            m_ThresholdForFloydSteinbergDithering = std::make_shared< int32_t >(
                json["ThresholdForFloydSteinbergDithering"].get< int32_t >()
            );
        }
        if (json.contains("TiffBinarizationMethod") && !json["TiffBinarizationMethod"].is_null()) {
            m_TiffBinarizationMethod = std::make_shared< std::wstring >(
                convertUtf8( json["TiffBinarizationMethod"].get< std::string >() )
            );
        }
        if (json.contains("TiffCompression") && !json["TiffCompression"].is_null()) {
            m_TiffCompression = std::make_shared< std::wstring >(
                convertUtf8( json["TiffCompression"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< int32_t > TiffSaveOptionsData::getThresholdForFloydSteinbergDithering() const
    {
        return m_ThresholdForFloydSteinbergDithering;
    }

    void TiffSaveOptionsData::setThresholdForFloydSteinbergDithering(std::shared_ptr< int32_t > value)
    {
        m_ThresholdForFloydSteinbergDithering = value;
    }

    std::shared_ptr< std::wstring > TiffSaveOptionsData::getTiffBinarizationMethod() const
    {
        return m_TiffBinarizationMethod;
    }

    void TiffSaveOptionsData::setTiffBinarizationMethod(std::shared_ptr< std::wstring > value)
    {
        m_TiffBinarizationMethod = value;
    }

    std::shared_ptr< std::wstring > TiffSaveOptionsData::getTiffCompression() const
    {
        return m_TiffCompression;
    }

    void TiffSaveOptionsData::setTiffCompression(std::shared_ptr< std::wstring > value)
    {
        m_TiffCompression = value;
    }


    /*
     * TimeZoneInfoData implementation
     */
    void TimeZoneInfoData::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BaseUtcOffset) {
            json["BaseUtcOffset"] = convertUtf16(*m_BaseUtcOffset);
        }
        if (m_DisplayName) {
            json["DisplayName"] = convertUtf16(*m_DisplayName);
        }
        if (m_Id) {
            json["Id"] = convertUtf16(*m_Id);
        }
        if (m_StandardDisplayName) {
            json["StandardDisplayName"] = convertUtf16(*m_StandardDisplayName);
        }
    }

    void TimeZoneInfoData::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BaseUtcOffset") && !json["BaseUtcOffset"].is_null()) {
            m_BaseUtcOffset = std::make_shared< std::wstring >(
                convertUtf8( json["BaseUtcOffset"].get< std::string >() )
            );
        }
        if (json.contains("DisplayName") && !json["DisplayName"].is_null()) {
            m_DisplayName = std::make_shared< std::wstring >(
                convertUtf8( json["DisplayName"].get< std::string >() )
            );
        }
        if (json.contains("Id") && !json["Id"].is_null()) {
            m_Id = std::make_shared< std::wstring >(
                convertUtf8( json["Id"].get< std::string >() )
            );
        }
        if (json.contains("StandardDisplayName") && !json["StandardDisplayName"].is_null()) {
            m_StandardDisplayName = std::make_shared< std::wstring >(
                convertUtf8( json["StandardDisplayName"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > TimeZoneInfoData::getBaseUtcOffset() const
    {
        return m_BaseUtcOffset;
    }

    void TimeZoneInfoData::setBaseUtcOffset(std::shared_ptr< std::wstring > value)
    {
        m_BaseUtcOffset = value;
    }

    std::shared_ptr< std::wstring > TimeZoneInfoData::getDisplayName() const
    {
        return m_DisplayName;
    }

    void TimeZoneInfoData::setDisplayName(std::shared_ptr< std::wstring > value)
    {
        m_DisplayName = value;
    }

    std::shared_ptr< std::wstring > TimeZoneInfoData::getId() const
    {
        return m_Id;
    }

    void TimeZoneInfoData::setId(std::shared_ptr< std::wstring > value)
    {
        m_Id = value;
    }

    std::shared_ptr< std::wstring > TimeZoneInfoData::getStandardDisplayName() const
    {
        return m_StandardDisplayName;
    }

    void TimeZoneInfoData::setStandardDisplayName(std::shared_ptr< std::wstring > value)
    {
        m_StandardDisplayName = value;
    }


    /*
     * TxtSaveOptionsBaseData implementation
     */
    inline std::string txtSaveOptionsBaseDataExportHeadersFootersModeToString(aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode value)
    {
        if (value == aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::NONE) return "None";
        if (value == aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::PRIMARY_ONLY) return "PrimaryOnly";
        if (value == aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::ALL_AT_END) return "AllAtEnd";
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }

    inline aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode txtSaveOptionsBaseDataExportHeadersFootersModeFromString(const std::string& value)
    {
        if (value == "None") return aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::NONE;
        if (value == "PrimaryOnly") return aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::PRIMARY_ONLY;
        if (value == "AllAtEnd") return aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode::ALL_AT_END;
        throw aspose::words::cloud::ApiException(400, L"Invalid enum value");
    }
    void TxtSaveOptionsBaseData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Encoding) {
            json["Encoding"] = convertUtf16(*m_Encoding);
        }
        if (m_ExportHeadersFootersMode) {
            json["ExportHeadersFootersMode"] = txtSaveOptionsBaseDataExportHeadersFootersModeToString(*m_ExportHeadersFootersMode);
        }
        if (m_ForcePageBreaks) {
            json["ForcePageBreaks"] = *m_ForcePageBreaks;
        }
        if (m_ParagraphBreak) {
            json["ParagraphBreak"] = convertUtf16(*m_ParagraphBreak);
        }
    }

    void TxtSaveOptionsBaseData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Encoding") && !json["Encoding"].is_null()) {
            m_Encoding = std::make_shared< std::wstring >(
                convertUtf8( json["Encoding"].get< std::string >() )
            );
        }
        if (json.contains("ExportHeadersFootersMode") && !json["ExportHeadersFootersMode"].is_null()) {
            m_ExportHeadersFootersMode = std::make_shared< aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode >(
                txtSaveOptionsBaseDataExportHeadersFootersModeFromString(json["ExportHeadersFootersMode"].get< std::string >())
            );
        }
        if (json.contains("ForcePageBreaks") && !json["ForcePageBreaks"].is_null()) {
            m_ForcePageBreaks = std::make_shared< bool >(
                json["ForcePageBreaks"].get< bool >()
            );
        }
        if (json.contains("ParagraphBreak") && !json["ParagraphBreak"].is_null()) {
            m_ParagraphBreak = std::make_shared< std::wstring >(
                convertUtf8( json["ParagraphBreak"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > TxtSaveOptionsBaseData::getEncoding() const
    {
        return m_Encoding;
    }

    void TxtSaveOptionsBaseData::setEncoding(std::shared_ptr< std::wstring > value)
    {
        m_Encoding = value;
    }

    std::shared_ptr< aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode > TxtSaveOptionsBaseData::getExportHeadersFootersMode() const
    {
        return m_ExportHeadersFootersMode;
    }

    void TxtSaveOptionsBaseData::setExportHeadersFootersMode(std::shared_ptr< aspose::words::cloud::models::TxtSaveOptionsBaseData::ExportHeadersFootersMode > value)
    {
        m_ExportHeadersFootersMode = value;
    }

    std::shared_ptr< bool > TxtSaveOptionsBaseData::getForcePageBreaks() const
    {
        return m_ForcePageBreaks;
    }

    void TxtSaveOptionsBaseData::setForcePageBreaks(std::shared_ptr< bool > value)
    {
        m_ForcePageBreaks = value;
    }

    std::shared_ptr< std::wstring > TxtSaveOptionsBaseData::getParagraphBreak() const
    {
        return m_ParagraphBreak;
    }

    void TxtSaveOptionsBaseData::setParagraphBreak(std::shared_ptr< std::wstring > value)
    {
        m_ParagraphBreak = value;
    }


    /*
     * WatermarkText implementation
     */
    void WatermarkText::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_RotationAngle) {
            json["RotationAngle"] = *m_RotationAngle;
        }
        if (m_Text) {
            json["Text"] = convertUtf16(*m_Text);
        }
    }

    void WatermarkText::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("RotationAngle") && !json["RotationAngle"].is_null()) {
            m_RotationAngle = std::make_shared< double >(
                json["RotationAngle"].get< double >()
            );
        }
        if (json.contains("Text") && !json["Text"].is_null()) {
            m_Text = std::make_shared< std::wstring >(
                convertUtf8( json["Text"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< double > WatermarkText::getRotationAngle() const
    {
        return m_RotationAngle;
    }

    void WatermarkText::setRotationAngle(std::shared_ptr< double > value)
    {
        m_RotationAngle = value;
    }

    std::shared_ptr< std::wstring > WatermarkText::getText() const
    {
        return m_Text;
    }

    void WatermarkText::setText(std::shared_ptr< std::wstring > value)
    {
        m_Text = value;
    }


    /*
     * WordMLSaveOptionsData implementation
     */
    void WordMLSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_PrettyFormat) {
            json["PrettyFormat"] = *m_PrettyFormat;
        }
    }

    void WordMLSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("PrettyFormat") && !json["PrettyFormat"].is_null()) {
            m_PrettyFormat = std::make_shared< bool >(
                json["PrettyFormat"].get< bool >()
            );
        }
    }

    std::shared_ptr< bool > WordMLSaveOptionsData::getPrettyFormat() const
    {
        return m_PrettyFormat;
    }

    void WordMLSaveOptionsData::setPrettyFormat(std::shared_ptr< bool > value)
    {
        m_PrettyFormat = value;
    }


    /*
     * WordsApiErrorResponse implementation
     */
    void WordsApiErrorResponse::toJson(void* jsonIfc) const
    {
        WordsResponse::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Error) {
            m_Error->toJson(&json["Error"]);
        }
    }

    void WordsApiErrorResponse::fromJson(const void* jsonIfc)
    {
        WordsResponse::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Error") && !json["Error"].is_null()) {
            m_Error = std::make_shared< aspose::words::cloud::models::ApiError >();
            m_Error->fromJson(&json["Error"]);
        }
    }

    std::shared_ptr< aspose::words::cloud::models::ApiError > WordsApiErrorResponse::getError() const
    {
        return m_Error;
    }

    void WordsApiErrorResponse::setError(std::shared_ptr< aspose::words::cloud::models::ApiError > value)
    {
        m_Error = value;
    }


    /*
     * WordsApiLink implementation
     */
    void WordsApiLink::toJson(void* jsonIfc) const
    {
        Link::toJson(jsonIfc);
    }

    void WordsApiLink::fromJson(const void* jsonIfc)
    {
        Link::fromJson(jsonIfc);
    }




    /*
     * WordsResponse implementation
     */
    void WordsResponse::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_RequestId) {
            json["RequestId"] = convertUtf16(*m_RequestId);
        }
    }

    void WordsResponse::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("RequestId") && !json["RequestId"].is_null()) {
            m_RequestId = std::make_shared< std::wstring >(
                convertUtf8( json["RequestId"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > WordsResponse::getRequestId() const
    {
        return m_RequestId;
    }

    void WordsResponse::setRequestId(std::shared_ptr< std::wstring > value)
    {
        m_RequestId = value;
    }


    /*
     * XamlFixedSaveOptionsData implementation
     */
    void XamlFixedSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ResourcesFolder) {
            json["ResourcesFolder"] = convertUtf16(*m_ResourcesFolder);
        }
        if (m_ResourcesFolderAlias) {
            json["ResourcesFolderAlias"] = convertUtf16(*m_ResourcesFolderAlias);
        }
    }

    void XamlFixedSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ResourcesFolder") && !json["ResourcesFolder"].is_null()) {
            m_ResourcesFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolder"].get< std::string >() )
            );
        }
        if (json.contains("ResourcesFolderAlias") && !json["ResourcesFolderAlias"].is_null()) {
            m_ResourcesFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ResourcesFolderAlias"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > XamlFixedSaveOptionsData::getResourcesFolder() const
    {
        return m_ResourcesFolder;
    }

    void XamlFixedSaveOptionsData::setResourcesFolder(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolder = value;
    }

    std::shared_ptr< std::wstring > XamlFixedSaveOptionsData::getResourcesFolderAlias() const
    {
        return m_ResourcesFolderAlias;
    }

    void XamlFixedSaveOptionsData::setResourcesFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ResourcesFolderAlias = value;
    }


    /*
     * XamlFlowSaveOptionsData implementation
     */
    void XamlFlowSaveOptionsData::toJson(void* jsonIfc) const
    {
        SaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_ImagesFolder) {
            json["ImagesFolder"] = convertUtf16(*m_ImagesFolder);
        }
        if (m_ImagesFolderAlias) {
            json["ImagesFolderAlias"] = convertUtf16(*m_ImagesFolderAlias);
        }
    }

    void XamlFlowSaveOptionsData::fromJson(const void* jsonIfc)
    {
        SaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("ImagesFolder") && !json["ImagesFolder"].is_null()) {
            m_ImagesFolder = std::make_shared< std::wstring >(
                convertUtf8( json["ImagesFolder"].get< std::string >() )
            );
        }
        if (json.contains("ImagesFolderAlias") && !json["ImagesFolderAlias"].is_null()) {
            m_ImagesFolderAlias = std::make_shared< std::wstring >(
                convertUtf8( json["ImagesFolderAlias"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< std::wstring > XamlFlowSaveOptionsData::getImagesFolder() const
    {
        return m_ImagesFolder;
    }

    void XamlFlowSaveOptionsData::setImagesFolder(std::shared_ptr< std::wstring > value)
    {
        m_ImagesFolder = value;
    }

    std::shared_ptr< std::wstring > XamlFlowSaveOptionsData::getImagesFolderAlias() const
    {
        return m_ImagesFolderAlias;
    }

    void XamlFlowSaveOptionsData::setImagesFolderAlias(std::shared_ptr< std::wstring > value)
    {
        m_ImagesFolderAlias = value;
    }


    /*
     * XmlColor implementation
     */
    void XmlColor::toJson(void* jsonIfc) const
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_Alpha) {
            json["Alpha"] = *m_Alpha;
        }
        if (m_Web) {
            json["Web"] = convertUtf16(*m_Web);
        }
    }

    void XmlColor::fromJson(const void* jsonIfc)
    {
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("Alpha") && !json["Alpha"].is_null()) {
            m_Alpha = std::make_shared< int32_t >(
                json["Alpha"].get< int32_t >()
            );
        }
        if (json.contains("Web") && !json["Web"].is_null()) {
            m_Web = std::make_shared< std::wstring >(
                convertUtf8( json["Web"].get< std::string >() )
            );
        }
    }

    std::shared_ptr< int32_t > XmlColor::getAlpha() const
    {
        return m_Alpha;
    }

    void XmlColor::setAlpha(std::shared_ptr< int32_t > value)
    {
        m_Alpha = value;
    }

    std::shared_ptr< std::wstring > XmlColor::getWeb() const
    {
        return m_Web;
    }

    void XmlColor::setWeb(std::shared_ptr< std::wstring > value)
    {
        m_Web = value;
    }


    /*
     * XpsSaveOptionsData implementation
     */
    void XpsSaveOptionsData::toJson(void* jsonIfc) const
    {
        FixedPageSaveOptionsData::toJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (m_BookmarksOutlineLevel) {
            json["BookmarksOutlineLevel"] = *m_BookmarksOutlineLevel;
        }
        if (m_HeadingsOutlineLevels) {
            json["HeadingsOutlineLevels"] = *m_HeadingsOutlineLevels;
        }
        if (m_OutlineOptions) {
            m_OutlineOptions->toJson(&json["OutlineOptions"]);
        }
        if (m_UseBookFoldPrintingSettings) {
            json["UseBookFoldPrintingSettings"] = *m_UseBookFoldPrintingSettings;
        }
    }

    void XpsSaveOptionsData::fromJson(const void* jsonIfc)
    {
        FixedPageSaveOptionsData::fromJson(jsonIfc);
        ::nlohmann::json& json = *((::nlohmann::json*)jsonIfc);
        if (json.contains("BookmarksOutlineLevel") && !json["BookmarksOutlineLevel"].is_null()) {
            m_BookmarksOutlineLevel = std::make_shared< int32_t >(
                json["BookmarksOutlineLevel"].get< int32_t >()
            );
        }
        if (json.contains("HeadingsOutlineLevels") && !json["HeadingsOutlineLevels"].is_null()) {
            m_HeadingsOutlineLevels = std::make_shared< int32_t >(
                json["HeadingsOutlineLevels"].get< int32_t >()
            );
        }
        if (json.contains("OutlineOptions") && !json["OutlineOptions"].is_null()) {
            m_OutlineOptions = std::make_shared< aspose::words::cloud::models::OutlineOptionsData >();
            m_OutlineOptions->fromJson(&json["OutlineOptions"]);
        }
        if (json.contains("UseBookFoldPrintingSettings") && !json["UseBookFoldPrintingSettings"].is_null()) {
            m_UseBookFoldPrintingSettings = std::make_shared< bool >(
                json["UseBookFoldPrintingSettings"].get< bool >()
            );
        }
    }

    std::shared_ptr< int32_t > XpsSaveOptionsData::getBookmarksOutlineLevel() const
    {
        return m_BookmarksOutlineLevel;
    }

    void XpsSaveOptionsData::setBookmarksOutlineLevel(std::shared_ptr< int32_t > value)
    {
        m_BookmarksOutlineLevel = value;
    }

    std::shared_ptr< int32_t > XpsSaveOptionsData::getHeadingsOutlineLevels() const
    {
        return m_HeadingsOutlineLevels;
    }

    void XpsSaveOptionsData::setHeadingsOutlineLevels(std::shared_ptr< int32_t > value)
    {
        m_HeadingsOutlineLevels = value;
    }

    std::shared_ptr< aspose::words::cloud::models::OutlineOptionsData > XpsSaveOptionsData::getOutlineOptions() const
    {
        return m_OutlineOptions;
    }

    void XpsSaveOptionsData::setOutlineOptions(std::shared_ptr< aspose::words::cloud::models::OutlineOptionsData > value)
    {
        m_OutlineOptions = value;
    }

    std::shared_ptr< bool > XpsSaveOptionsData::getUseBookFoldPrintingSettings() const
    {
        return m_UseBookFoldPrintingSettings;
    }

    void XpsSaveOptionsData::setUseBookFoldPrintingSettings(std::shared_ptr< bool > value)
    {
        m_UseBookFoldPrintingSettings = value;
    }


}